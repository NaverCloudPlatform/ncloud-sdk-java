/*
 * vloadbalancer
 * VPC Load Balancer 관련 API<br/>https://ncloud.apigw.ntruss.com/vloadbalancer/v2
 *
 * OpenAPI spec version: 2020-12-22T09:19:59Z
 *
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.vloadbalancer.model;

import java.util.Objects;

/**
 * ChangeLoadBalancerListenerConfigurationRequest
 */
public class ChangeLoadBalancerListenerConfigurationRequest {
	private String regionCode = null;

	private String sslCertificateNo = null;

	private Boolean useHttp2 = null;

	private String loadBalancerListenerNo = null;

	private Integer port = null;

	private String protocolTypeCode = null;

	private String tlsMinVersionTypeCode = null;

	private String responseFormatType = null;

	public ChangeLoadBalancerListenerConfigurationRequest regionCode(String regionCode) {
		this.regionCode = regionCode;
		return this;
	}

	 /**
	 * REGION코드
	 * @return regionCode
	**/
	public String getRegionCode() {
		return regionCode;
	}

	public void setRegionCode(String regionCode) {
		this.regionCode = regionCode;
	}

	public ChangeLoadBalancerListenerConfigurationRequest sslCertificateNo(String sslCertificateNo) {
		this.sslCertificateNo = sslCertificateNo;
		return this;
	}

	 /**
	 * SSL인증서번호
	 * @return sslCertificateNo
	**/
	public String getSslCertificateNo() {
		return sslCertificateNo;
	}

	public void setSslCertificateNo(String sslCertificateNo) {
		this.sslCertificateNo = sslCertificateNo;
	}

	public ChangeLoadBalancerListenerConfigurationRequest useHttp2(Boolean useHttp2) {
		this.useHttp2 = useHttp2;
		return this;
	}

	 /**
	 * HTTP2사용여부
	 * @return useHttp2
	**/
	public Boolean isUseHttp2() {
		return useHttp2;
	}

	public void setUseHttp2(Boolean useHttp2) {
		this.useHttp2 = useHttp2;
	}

	public ChangeLoadBalancerListenerConfigurationRequest loadBalancerListenerNo(String loadBalancerListenerNo) {
		this.loadBalancerListenerNo = loadBalancerListenerNo;
		return this;
	}

	 /**
	 * 로드밸런서리스너번호
	 * @return loadBalancerListenerNo
	**/
	public String getLoadBalancerListenerNo() {
		return loadBalancerListenerNo;
	}

	public void setLoadBalancerListenerNo(String loadBalancerListenerNo) {
		this.loadBalancerListenerNo = loadBalancerListenerNo;
	}

	public ChangeLoadBalancerListenerConfigurationRequest port(Integer port) {
		this.port = port;
		return this;
	}

	 /**
	 * 포트
	 * @return port
	**/
	public Integer getPort() {
		return port;
	}

	public void setPort(Integer port) {
		this.port = port;
	}

	public ChangeLoadBalancerListenerConfigurationRequest protocolTypeCode(String protocolTypeCode) {
		this.protocolTypeCode = protocolTypeCode;
		return this;
	}

	 /**
	 * 프로토콜유형코드
	 * @return protocolTypeCode
	**/
	public String getProtocolTypeCode() {
		return protocolTypeCode;
	}

	public void setProtocolTypeCode(String protocolTypeCode) {
		this.protocolTypeCode = protocolTypeCode;
	}

	public ChangeLoadBalancerListenerConfigurationRequest tlsMinVersionTypeCode(String tlsMinVersionTypeCode) {
		this.tlsMinVersionTypeCode = tlsMinVersionTypeCode;
		return this;
	}

	 /**
	 * TLS최소지원버전유형코드
	 * @return tlsMinVersionTypeCode
	**/
	public String getTlsMinVersionTypeCode() {
		return tlsMinVersionTypeCode;
	}

	public void setTlsMinVersionTypeCode(String tlsMinVersionTypeCode) {
		this.tlsMinVersionTypeCode = tlsMinVersionTypeCode;
	}

	public ChangeLoadBalancerListenerConfigurationRequest responseFormatType(String responseFormatType) {
		this.responseFormatType = responseFormatType;
		return this;
	}

	 /**
	 * responseFormatType {json, xml}
	 * @return responseFormatType
	**/
	public String getResponseFormatType() {
		return responseFormatType;
	}

	public void setResponseFormatType(String responseFormatType) {
		this.responseFormatType = responseFormatType;
	}


	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ChangeLoadBalancerListenerConfigurationRequest changeLoadBalancerListenerConfigurationRequest = (ChangeLoadBalancerListenerConfigurationRequest) o;
		return Objects.equals(this.regionCode, changeLoadBalancerListenerConfigurationRequest.regionCode) &&
				Objects.equals(this.sslCertificateNo, changeLoadBalancerListenerConfigurationRequest.sslCertificateNo) &&
				Objects.equals(this.useHttp2, changeLoadBalancerListenerConfigurationRequest.useHttp2) &&
				Objects.equals(this.loadBalancerListenerNo, changeLoadBalancerListenerConfigurationRequest.loadBalancerListenerNo) &&
				Objects.equals(this.port, changeLoadBalancerListenerConfigurationRequest.port) &&
				Objects.equals(this.protocolTypeCode, changeLoadBalancerListenerConfigurationRequest.protocolTypeCode) &&
				Objects.equals(this.tlsMinVersionTypeCode, changeLoadBalancerListenerConfigurationRequest.tlsMinVersionTypeCode) &&
				Objects.equals(this.responseFormatType, changeLoadBalancerListenerConfigurationRequest.responseFormatType);
	}

	@Override
	public int hashCode() {
		return Objects.hash(regionCode, sslCertificateNo, useHttp2, loadBalancerListenerNo, port, protocolTypeCode, tlsMinVersionTypeCode, responseFormatType);
	}


	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ChangeLoadBalancerListenerConfigurationRequest {\n");
		
		sb.append("		regionCode: ").append(toIndentedString(regionCode)).append("\n");
		sb.append("		sslCertificateNo: ").append(toIndentedString(sslCertificateNo)).append("\n");
		sb.append("		useHttp2: ").append(toIndentedString(useHttp2)).append("\n");
		sb.append("		loadBalancerListenerNo: ").append(toIndentedString(loadBalancerListenerNo)).append("\n");
		sb.append("		port: ").append(toIndentedString(port)).append("\n");
		sb.append("		protocolTypeCode: ").append(toIndentedString(protocolTypeCode)).append("\n");
		sb.append("		tlsMinVersionTypeCode: ").append(toIndentedString(tlsMinVersionTypeCode)).append("\n");
		sb.append("		responseFormatType: ").append(toIndentedString(responseFormatType)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n		");
	}

}

