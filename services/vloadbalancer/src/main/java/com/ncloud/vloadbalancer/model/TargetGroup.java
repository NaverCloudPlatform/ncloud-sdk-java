/*
 * vloadbalancer
 * VPC Load Balancer 관련 API<br/>https://ncloud.apigw.ntruss.com/vloadbalancer/v2
 *
 * OpenAPI spec version: 2020-12-22T09:19:59Z
 *
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.vloadbalancer.model;

import java.util.Objects;
import com.ncloud.vloadbalancer.model.CommonCode;
import java.util.ArrayList;
import java.util.List;

/**
 * TargetGroup
 */
public class TargetGroup {
	private String targetGroupNo = null;

	private String targetGroupName = null;

	private CommonCode targetType = null;

	private String vpcNo = null;

	private CommonCode targetGroupProtocolType = null;

	private Integer targetGroupPort = null;

	private String targetGroupDescription = null;

	private Boolean useStickySession = null;

	private Boolean useProxyProtocol = null;

	private CommonCode algorithmType = null;

	private String createDate = null;

	private String regionCode = null;

	private String loadBalancerInstanceNo = null;

	private CommonCode healthCheckProtocolType = null;

	private Integer healthCheckPort = null;

	private String healthCheckUrlPath = null;

	private CommonCode healthCheckHttpMethodType = null;

	private Integer healthCheckCycle = null;

	private Integer healthCheckUpThreshold = null;

	private Integer healthCheckDownThreshold = null;

	private List<String> targetNoList = null;

	public TargetGroup targetGroupNo(String targetGroupNo) {
		this.targetGroupNo = targetGroupNo;
		return this;
	}

	 /**
	 * 타겟그룹번호
	 * @return targetGroupNo
	**/
	public String getTargetGroupNo() {
		return targetGroupNo;
	}

	public void setTargetGroupNo(String targetGroupNo) {
		this.targetGroupNo = targetGroupNo;
	}

	public TargetGroup targetGroupName(String targetGroupName) {
		this.targetGroupName = targetGroupName;
		return this;
	}

	 /**
	 * 타겟그룹이름
	 * @return targetGroupName
	**/
	public String getTargetGroupName() {
		return targetGroupName;
	}

	public void setTargetGroupName(String targetGroupName) {
		this.targetGroupName = targetGroupName;
	}

	public TargetGroup targetType(CommonCode targetType) {
		this.targetType = targetType;
		return this;
	}

	 /**
	 * 타겟유형
	 * @return targetType
	**/
	public CommonCode getTargetType() {
		return targetType;
	}

	public void setTargetType(CommonCode targetType) {
		this.targetType = targetType;
	}

	public TargetGroup vpcNo(String vpcNo) {
		this.vpcNo = vpcNo;
		return this;
	}

	 /**
	 * VPC번호
	 * @return vpcNo
	**/
	public String getVpcNo() {
		return vpcNo;
	}

	public void setVpcNo(String vpcNo) {
		this.vpcNo = vpcNo;
	}

	public TargetGroup targetGroupProtocolType(CommonCode targetGroupProtocolType) {
		this.targetGroupProtocolType = targetGroupProtocolType;
		return this;
	}

	 /**
	 * 타겟그룹프로토콜유형
	 * @return targetGroupProtocolType
	**/
	public CommonCode getTargetGroupProtocolType() {
		return targetGroupProtocolType;
	}

	public void setTargetGroupProtocolType(CommonCode targetGroupProtocolType) {
		this.targetGroupProtocolType = targetGroupProtocolType;
	}

	public TargetGroup targetGroupPort(Integer targetGroupPort) {
		this.targetGroupPort = targetGroupPort;
		return this;
	}

	 /**
	 * 타겟그룹포트
	 * @return targetGroupPort
	**/
	public Integer getTargetGroupPort() {
		return targetGroupPort;
	}

	public void setTargetGroupPort(Integer targetGroupPort) {
		this.targetGroupPort = targetGroupPort;
	}

	public TargetGroup targetGroupDescription(String targetGroupDescription) {
		this.targetGroupDescription = targetGroupDescription;
		return this;
	}

	 /**
	 * 타겟그룹설명
	 * @return targetGroupDescription
	**/
	public String getTargetGroupDescription() {
		return targetGroupDescription;
	}

	public void setTargetGroupDescription(String targetGroupDescription) {
		this.targetGroupDescription = targetGroupDescription;
	}

	public TargetGroup useStickySession(Boolean useStickySession) {
		this.useStickySession = useStickySession;
		return this;
	}

	 /**
	 * 세션별접근사용여부
	 * @return useStickySession
	**/
	public Boolean isUseStickySession() {
		return useStickySession;
	}

	public void setUseStickySession(Boolean useStickySession) {
		this.useStickySession = useStickySession;
	}

	public TargetGroup useProxyProtocol(Boolean useProxyProtocol) {
		this.useProxyProtocol = useProxyProtocol;
		return this;
	}

	 /**
	 * 프록시프로토콜사용여부
	 * @return useProxyProtocol
	**/
	public Boolean isUseProxyProtocol() {
		return useProxyProtocol;
	}

	public void setUseProxyProtocol(Boolean useProxyProtocol) {
		this.useProxyProtocol = useProxyProtocol;
	}

	public TargetGroup algorithmType(CommonCode algorithmType) {
		this.algorithmType = algorithmType;
		return this;
	}

	 /**
	 * 알고리즘유형
	 * @return algorithmType
	**/
	public CommonCode getAlgorithmType() {
		return algorithmType;
	}

	public void setAlgorithmType(CommonCode algorithmType) {
		this.algorithmType = algorithmType;
	}

	public TargetGroup createDate(String createDate) {
		this.createDate = createDate;
		return this;
	}

	 /**
	 * 생성일시
	 * @return createDate
	**/
	public String getCreateDate() {
		return createDate;
	}

	public void setCreateDate(String createDate) {
		this.createDate = createDate;
	}

	public TargetGroup regionCode(String regionCode) {
		this.regionCode = regionCode;
		return this;
	}

	 /**
	 * REGION코드
	 * @return regionCode
	**/
	public String getRegionCode() {
		return regionCode;
	}

	public void setRegionCode(String regionCode) {
		this.regionCode = regionCode;
	}

	public TargetGroup loadBalancerInstanceNo(String loadBalancerInstanceNo) {
		this.loadBalancerInstanceNo = loadBalancerInstanceNo;
		return this;
	}

	 /**
	 * 로드밸런서인스턴스번호
	 * @return loadBalancerInstanceNo
	**/
	public String getLoadBalancerInstanceNo() {
		return loadBalancerInstanceNo;
	}

	public void setLoadBalancerInstanceNo(String loadBalancerInstanceNo) {
		this.loadBalancerInstanceNo = loadBalancerInstanceNo;
	}

	public TargetGroup healthCheckProtocolType(CommonCode healthCheckProtocolType) {
		this.healthCheckProtocolType = healthCheckProtocolType;
		return this;
	}

	 /**
	 * 헬스체크프로토콜유형
	 * @return healthCheckProtocolType
	**/
	public CommonCode getHealthCheckProtocolType() {
		return healthCheckProtocolType;
	}

	public void setHealthCheckProtocolType(CommonCode healthCheckProtocolType) {
		this.healthCheckProtocolType = healthCheckProtocolType;
	}

	public TargetGroup healthCheckPort(Integer healthCheckPort) {
		this.healthCheckPort = healthCheckPort;
		return this;
	}

	 /**
	 * 타겟그룹포트
	 * @return healthCheckPort
	**/
	public Integer getHealthCheckPort() {
		return healthCheckPort;
	}

	public void setHealthCheckPort(Integer healthCheckPort) {
		this.healthCheckPort = healthCheckPort;
	}

	public TargetGroup healthCheckUrlPath(String healthCheckUrlPath) {
		this.healthCheckUrlPath = healthCheckUrlPath;
		return this;
	}

	 /**
	 * 헬스체크URL경로
	 * @return healthCheckUrlPath
	**/
	public String getHealthCheckUrlPath() {
		return healthCheckUrlPath;
	}

	public void setHealthCheckUrlPath(String healthCheckUrlPath) {
		this.healthCheckUrlPath = healthCheckUrlPath;
	}

	public TargetGroup healthCheckHttpMethodType(CommonCode healthCheckHttpMethodType) {
		this.healthCheckHttpMethodType = healthCheckHttpMethodType;
		return this;
	}

	 /**
	 * 헬스체크HTTP메소드유형
	 * @return healthCheckHttpMethodType
	**/
	public CommonCode getHealthCheckHttpMethodType() {
		return healthCheckHttpMethodType;
	}

	public void setHealthCheckHttpMethodType(CommonCode healthCheckHttpMethodType) {
		this.healthCheckHttpMethodType = healthCheckHttpMethodType;
	}

	public TargetGroup healthCheckCycle(Integer healthCheckCycle) {
		this.healthCheckCycle = healthCheckCycle;
		return this;
	}

	 /**
	 * 헬스체크주기
	 * @return healthCheckCycle
	**/
	public Integer getHealthCheckCycle() {
		return healthCheckCycle;
	}

	public void setHealthCheckCycle(Integer healthCheckCycle) {
		this.healthCheckCycle = healthCheckCycle;
	}

	public TargetGroup healthCheckUpThreshold(Integer healthCheckUpThreshold) {
		this.healthCheckUpThreshold = healthCheckUpThreshold;
		return this;
	}

	 /**
	 * 헬스체크정상임계값
	 * @return healthCheckUpThreshold
	**/
	public Integer getHealthCheckUpThreshold() {
		return healthCheckUpThreshold;
	}

	public void setHealthCheckUpThreshold(Integer healthCheckUpThreshold) {
		this.healthCheckUpThreshold = healthCheckUpThreshold;
	}

	public TargetGroup healthCheckDownThreshold(Integer healthCheckDownThreshold) {
		this.healthCheckDownThreshold = healthCheckDownThreshold;
		return this;
	}

	 /**
	 * 헬스체크실패임계값
	 * @return healthCheckDownThreshold
	**/
	public Integer getHealthCheckDownThreshold() {
		return healthCheckDownThreshold;
	}

	public void setHealthCheckDownThreshold(Integer healthCheckDownThreshold) {
		this.healthCheckDownThreshold = healthCheckDownThreshold;
	}

	public TargetGroup targetNoList(List<String> targetNoList) {
		this.targetNoList = targetNoList;
		return this;
	}

	public TargetGroup addTargetNoListItem(String targetNoListItem) {
		if (this.targetNoList == null) {
			this.targetNoList = new ArrayList<String>();
		}
		this.targetNoList.add(targetNoListItem);
		return this;
	}

	 /**
	 * 타겟번호리스트
	 * @return targetNoList
	**/
	public List<String> getTargetNoList() {
		return targetNoList;
	}

	public void setTargetNoList(List<String> targetNoList) {
		this.targetNoList = targetNoList;
	}


	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		TargetGroup targetGroup = (TargetGroup) o;
		return Objects.equals(this.targetGroupNo, targetGroup.targetGroupNo) &&
				Objects.equals(this.targetGroupName, targetGroup.targetGroupName) &&
				Objects.equals(this.targetType, targetGroup.targetType) &&
				Objects.equals(this.vpcNo, targetGroup.vpcNo) &&
				Objects.equals(this.targetGroupProtocolType, targetGroup.targetGroupProtocolType) &&
				Objects.equals(this.targetGroupPort, targetGroup.targetGroupPort) &&
				Objects.equals(this.targetGroupDescription, targetGroup.targetGroupDescription) &&
				Objects.equals(this.useStickySession, targetGroup.useStickySession) &&
				Objects.equals(this.useProxyProtocol, targetGroup.useProxyProtocol) &&
				Objects.equals(this.algorithmType, targetGroup.algorithmType) &&
				Objects.equals(this.createDate, targetGroup.createDate) &&
				Objects.equals(this.regionCode, targetGroup.regionCode) &&
				Objects.equals(this.loadBalancerInstanceNo, targetGroup.loadBalancerInstanceNo) &&
				Objects.equals(this.healthCheckProtocolType, targetGroup.healthCheckProtocolType) &&
				Objects.equals(this.healthCheckPort, targetGroup.healthCheckPort) &&
				Objects.equals(this.healthCheckUrlPath, targetGroup.healthCheckUrlPath) &&
				Objects.equals(this.healthCheckHttpMethodType, targetGroup.healthCheckHttpMethodType) &&
				Objects.equals(this.healthCheckCycle, targetGroup.healthCheckCycle) &&
				Objects.equals(this.healthCheckUpThreshold, targetGroup.healthCheckUpThreshold) &&
				Objects.equals(this.healthCheckDownThreshold, targetGroup.healthCheckDownThreshold) &&
				Objects.equals(this.targetNoList, targetGroup.targetNoList);
	}

	@Override
	public int hashCode() {
		return Objects.hash(targetGroupNo, targetGroupName, targetType, vpcNo, targetGroupProtocolType, targetGroupPort, targetGroupDescription, useStickySession, useProxyProtocol, algorithmType, createDate, regionCode, loadBalancerInstanceNo, healthCheckProtocolType, healthCheckPort, healthCheckUrlPath, healthCheckHttpMethodType, healthCheckCycle, healthCheckUpThreshold, healthCheckDownThreshold, targetNoList);
	}


	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class TargetGroup {\n");
		
		sb.append("		targetGroupNo: ").append(toIndentedString(targetGroupNo)).append("\n");
		sb.append("		targetGroupName: ").append(toIndentedString(targetGroupName)).append("\n");
		sb.append("		targetType: ").append(toIndentedString(targetType)).append("\n");
		sb.append("		vpcNo: ").append(toIndentedString(vpcNo)).append("\n");
		sb.append("		targetGroupProtocolType: ").append(toIndentedString(targetGroupProtocolType)).append("\n");
		sb.append("		targetGroupPort: ").append(toIndentedString(targetGroupPort)).append("\n");
		sb.append("		targetGroupDescription: ").append(toIndentedString(targetGroupDescription)).append("\n");
		sb.append("		useStickySession: ").append(toIndentedString(useStickySession)).append("\n");
		sb.append("		useProxyProtocol: ").append(toIndentedString(useProxyProtocol)).append("\n");
		sb.append("		algorithmType: ").append(toIndentedString(algorithmType)).append("\n");
		sb.append("		createDate: ").append(toIndentedString(createDate)).append("\n");
		sb.append("		regionCode: ").append(toIndentedString(regionCode)).append("\n");
		sb.append("		loadBalancerInstanceNo: ").append(toIndentedString(loadBalancerInstanceNo)).append("\n");
		sb.append("		healthCheckProtocolType: ").append(toIndentedString(healthCheckProtocolType)).append("\n");
		sb.append("		healthCheckPort: ").append(toIndentedString(healthCheckPort)).append("\n");
		sb.append("		healthCheckUrlPath: ").append(toIndentedString(healthCheckUrlPath)).append("\n");
		sb.append("		healthCheckHttpMethodType: ").append(toIndentedString(healthCheckHttpMethodType)).append("\n");
		sb.append("		healthCheckCycle: ").append(toIndentedString(healthCheckCycle)).append("\n");
		sb.append("		healthCheckUpThreshold: ").append(toIndentedString(healthCheckUpThreshold)).append("\n");
		sb.append("		healthCheckDownThreshold: ").append(toIndentedString(healthCheckDownThreshold)).append("\n");
		sb.append("		targetNoList: ").append(toIndentedString(targetNoList)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n		");
	}

}

