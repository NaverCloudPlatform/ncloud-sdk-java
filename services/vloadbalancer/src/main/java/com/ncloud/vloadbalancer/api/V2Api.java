/*
 * vloadbalancer
 * VPC Load Balancer 관련 API<br/>https://ncloud.apigw.ntruss.com/vloadbalancer/v2
 *
 * OpenAPI spec version: 2020-12-22T09:19:59Z
 *
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.vloadbalancer.api;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.ncloud.vloadbalancer.ApiClient;
import com.ncloud.vloadbalancer.ApiRequest;
import com.ncloud.vloadbalancer.ApiResponse;
import com.ncloud.vloadbalancer.exception.ApiException;
import com.ncloud.vloadbalancer.exception.SdkException;
import com.ncloud.vloadbalancer.model.AddTargetRequest;
import com.ncloud.vloadbalancer.model.AddTargetResponse;
import com.ncloud.vloadbalancer.model.ChangeLoadBalancerInstanceConfigurationRequest;
import com.ncloud.vloadbalancer.model.ChangeLoadBalancerInstanceConfigurationResponse;
import com.ncloud.vloadbalancer.model.ChangeLoadBalancerListenerConfigurationRequest;
import com.ncloud.vloadbalancer.model.ChangeLoadBalancerListenerConfigurationResponse;
import com.ncloud.vloadbalancer.model.ChangeTargetGroupConfigurationRequest;
import com.ncloud.vloadbalancer.model.ChangeTargetGroupConfigurationResponse;
import com.ncloud.vloadbalancer.model.ChangeTargetGroupHealthCheckConfigurationRequest;
import com.ncloud.vloadbalancer.model.ChangeTargetGroupHealthCheckConfigurationResponse;
import com.ncloud.vloadbalancer.model.CreateLoadBalancerInstanceRequest;
import com.ncloud.vloadbalancer.model.CreateLoadBalancerInstanceResponse;
import com.ncloud.vloadbalancer.model.CreateLoadBalancerListenerRequest;
import com.ncloud.vloadbalancer.model.CreateLoadBalancerListenerResponse;
import com.ncloud.vloadbalancer.model.CreateTargetGroupRequest;
import com.ncloud.vloadbalancer.model.CreateTargetGroupResponse;
import com.ncloud.vloadbalancer.model.DeleteLoadBalancerInstancesRequest;
import com.ncloud.vloadbalancer.model.DeleteLoadBalancerInstancesResponse;
import com.ncloud.vloadbalancer.model.DeleteLoadBalancerListenersRequest;
import com.ncloud.vloadbalancer.model.DeleteLoadBalancerListenersResponse;
import com.ncloud.vloadbalancer.model.DeleteTargetGroupsRequest;
import com.ncloud.vloadbalancer.model.DeleteTargetGroupsResponse;
import com.ncloud.vloadbalancer.model.GetLoadBalancerInstanceDetailRequest;
import com.ncloud.vloadbalancer.model.GetLoadBalancerInstanceDetailResponse;
import com.ncloud.vloadbalancer.model.GetLoadBalancerInstanceListRequest;
import com.ncloud.vloadbalancer.model.GetLoadBalancerInstanceListResponse;
import com.ncloud.vloadbalancer.model.GetLoadBalancerListenerListRequest;
import com.ncloud.vloadbalancer.model.GetLoadBalancerListenerListResponse;
import com.ncloud.vloadbalancer.model.GetLoadBalancerRuleListRequest;
import com.ncloud.vloadbalancer.model.GetLoadBalancerRuleListResponse;
import com.ncloud.vloadbalancer.model.GetTargetGroupDetailRequest;
import com.ncloud.vloadbalancer.model.GetTargetGroupDetailResponse;
import com.ncloud.vloadbalancer.model.GetTargetGroupListRequest;
import com.ncloud.vloadbalancer.model.GetTargetGroupListResponse;
import com.ncloud.vloadbalancer.model.GetTargetListRequest;
import com.ncloud.vloadbalancer.model.GetTargetListResponse;
import com.ncloud.vloadbalancer.model.RemoveTargetRequest;
import com.ncloud.vloadbalancer.model.RemoveTargetResponse;
import com.ncloud.vloadbalancer.model.SetLoadBalancerDescriptionRequest;
import com.ncloud.vloadbalancer.model.SetLoadBalancerDescriptionResponse;
import com.ncloud.vloadbalancer.model.SetLoadBalancerInstanceSubnetRequest;
import com.ncloud.vloadbalancer.model.SetLoadBalancerInstanceSubnetResponse;
import com.ncloud.vloadbalancer.model.SetTargetGroupDescriptionRequest;
import com.ncloud.vloadbalancer.model.SetTargetGroupDescriptionResponse;
import com.ncloud.vloadbalancer.model.SetTargetRequest;
import com.ncloud.vloadbalancer.model.SetTargetResponse;

public class V2Api {
	private final ApiClient apiClient;

	public V2Api(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	/**
	 * 
	 * 타겟추가
	 * @param addTargetRequest addTargetRequest (required)
	 * @return AddTargetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddTargetResponse> addTargetGet(AddTargetRequest addTargetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addTarget";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, addTargetRequest, true, false);
		return apiClient.call(apiRequest, AddTargetResponse.class);
	}

	/**
	 * 
	 * 타겟추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addTargetRequest addTargetRequest (required)
	 * @return byte[]
	 *	AddTargetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addTargetGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addTarget";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟추가
	 * @param addTargetRequest addTargetRequest (required)
	 * @return AddTargetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddTargetResponse> addTargetPost(AddTargetRequest addTargetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addTarget";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, addTargetRequest, true, false);
		return apiClient.call(apiRequest, AddTargetResponse.class);
	}

	/**
	 * 
	 * 타겟추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addTargetRequest addTargetRequest (required)
	 * @return byte[]
	 *	AddTargetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addTargetPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addTarget";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스설정변경
	 * @param changeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest (required)
	 * @return ChangeLoadBalancerInstanceConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeLoadBalancerInstanceConfigurationResponse> changeLoadBalancerInstanceConfigurationGet(ChangeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeLoadBalancerInstanceConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, changeLoadBalancerInstanceConfigurationRequest, true, false);
		return apiClient.call(apiRequest, ChangeLoadBalancerInstanceConfigurationResponse.class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스설정변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest (required)
	 * @return byte[]
	 *	ChangeLoadBalancerInstanceConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeLoadBalancerInstanceConfigurationGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeLoadBalancerInstanceConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스설정변경
	 * @param changeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest (required)
	 * @return ChangeLoadBalancerInstanceConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeLoadBalancerInstanceConfigurationResponse> changeLoadBalancerInstanceConfigurationPost(ChangeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeLoadBalancerInstanceConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, changeLoadBalancerInstanceConfigurationRequest, true, false);
		return apiClient.call(apiRequest, ChangeLoadBalancerInstanceConfigurationResponse.class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스설정변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest (required)
	 * @return byte[]
	 *	ChangeLoadBalancerInstanceConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeLoadBalancerInstanceConfigurationPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeLoadBalancerInstanceConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서리스너설정변경
	 * @param changeLoadBalancerListenerConfigurationRequest changeLoadBalancerListenerConfigurationRequest (required)
	 * @return ChangeLoadBalancerListenerConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeLoadBalancerListenerConfigurationResponse> changeLoadBalancerListenerConfigurationGet(ChangeLoadBalancerListenerConfigurationRequest changeLoadBalancerListenerConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeLoadBalancerListenerConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, changeLoadBalancerListenerConfigurationRequest, true, false);
		return apiClient.call(apiRequest, ChangeLoadBalancerListenerConfigurationResponse.class);
	}

	/**
	 * 
	 * 로드밸런서리스너설정변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeLoadBalancerListenerConfigurationRequest changeLoadBalancerListenerConfigurationRequest (required)
	 * @return byte[]
	 *	ChangeLoadBalancerListenerConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeLoadBalancerListenerConfigurationGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeLoadBalancerListenerConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서리스너설정변경
	 * @param changeLoadBalancerListenerConfigurationRequest changeLoadBalancerListenerConfigurationRequest (required)
	 * @return ChangeLoadBalancerListenerConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeLoadBalancerListenerConfigurationResponse> changeLoadBalancerListenerConfigurationPost(ChangeLoadBalancerListenerConfigurationRequest changeLoadBalancerListenerConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeLoadBalancerListenerConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, changeLoadBalancerListenerConfigurationRequest, true, false);
		return apiClient.call(apiRequest, ChangeLoadBalancerListenerConfigurationResponse.class);
	}

	/**
	 * 
	 * 로드밸런서리스너설정변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeLoadBalancerListenerConfigurationRequest changeLoadBalancerListenerConfigurationRequest (required)
	 * @return byte[]
	 *	ChangeLoadBalancerListenerConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeLoadBalancerListenerConfigurationPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeLoadBalancerListenerConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹설정변경
	 * @param changeTargetGroupConfigurationRequest changeTargetGroupConfigurationRequest (required)
	 * @return ChangeTargetGroupConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeTargetGroupConfigurationResponse> changeTargetGroupConfigurationGet(ChangeTargetGroupConfigurationRequest changeTargetGroupConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeTargetGroupConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, changeTargetGroupConfigurationRequest, true, false);
		return apiClient.call(apiRequest, ChangeTargetGroupConfigurationResponse.class);
	}

	/**
	 * 
	 * 타겟그룹설정변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeTargetGroupConfigurationRequest changeTargetGroupConfigurationRequest (required)
	 * @return byte[]
	 *	ChangeTargetGroupConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeTargetGroupConfigurationGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeTargetGroupConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹설정변경
	 * @param changeTargetGroupConfigurationRequest changeTargetGroupConfigurationRequest (required)
	 * @return ChangeTargetGroupConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeTargetGroupConfigurationResponse> changeTargetGroupConfigurationPost(ChangeTargetGroupConfigurationRequest changeTargetGroupConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeTargetGroupConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, changeTargetGroupConfigurationRequest, true, false);
		return apiClient.call(apiRequest, ChangeTargetGroupConfigurationResponse.class);
	}

	/**
	 * 
	 * 타겟그룹설정변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeTargetGroupConfigurationRequest changeTargetGroupConfigurationRequest (required)
	 * @return byte[]
	 *	ChangeTargetGroupConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeTargetGroupConfigurationPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeTargetGroupConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹헬스체크설정변경
	 * @param changeTargetGroupHealthCheckConfigurationRequest changeTargetGroupHealthCheckConfigurationRequest (required)
	 * @return ChangeTargetGroupHealthCheckConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeTargetGroupHealthCheckConfigurationResponse> changeTargetGroupHealthCheckConfigurationGet(ChangeTargetGroupHealthCheckConfigurationRequest changeTargetGroupHealthCheckConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeTargetGroupHealthCheckConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, changeTargetGroupHealthCheckConfigurationRequest, true, false);
		return apiClient.call(apiRequest, ChangeTargetGroupHealthCheckConfigurationResponse.class);
	}

	/**
	 * 
	 * 타겟그룹헬스체크설정변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeTargetGroupHealthCheckConfigurationRequest changeTargetGroupHealthCheckConfigurationRequest (required)
	 * @return byte[]
	 *	ChangeTargetGroupHealthCheckConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeTargetGroupHealthCheckConfigurationGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeTargetGroupHealthCheckConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹헬스체크설정변경
	 * @param changeTargetGroupHealthCheckConfigurationRequest changeTargetGroupHealthCheckConfigurationRequest (required)
	 * @return ChangeTargetGroupHealthCheckConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeTargetGroupHealthCheckConfigurationResponse> changeTargetGroupHealthCheckConfigurationPost(ChangeTargetGroupHealthCheckConfigurationRequest changeTargetGroupHealthCheckConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeTargetGroupHealthCheckConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, changeTargetGroupHealthCheckConfigurationRequest, true, false);
		return apiClient.call(apiRequest, ChangeTargetGroupHealthCheckConfigurationResponse.class);
	}

	/**
	 * 
	 * 타겟그룹헬스체크설정변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeTargetGroupHealthCheckConfigurationRequest changeTargetGroupHealthCheckConfigurationRequest (required)
	 * @return byte[]
	 *	ChangeTargetGroupHealthCheckConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeTargetGroupHealthCheckConfigurationPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeTargetGroupHealthCheckConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스생성
	 * @param createLoadBalancerInstanceRequest createLoadBalancerInstanceRequest (required)
	 * @return CreateLoadBalancerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateLoadBalancerInstanceResponse> createLoadBalancerInstanceGet(CreateLoadBalancerInstanceRequest createLoadBalancerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createLoadBalancerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, createLoadBalancerInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateLoadBalancerInstanceResponse.class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createLoadBalancerInstanceRequest createLoadBalancerInstanceRequest (required)
	 * @return byte[]
	 *	CreateLoadBalancerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createLoadBalancerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createLoadBalancerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스생성
	 * @param createLoadBalancerInstanceRequest createLoadBalancerInstanceRequest (required)
	 * @return CreateLoadBalancerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateLoadBalancerInstanceResponse> createLoadBalancerInstancePost(CreateLoadBalancerInstanceRequest createLoadBalancerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createLoadBalancerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, createLoadBalancerInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateLoadBalancerInstanceResponse.class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createLoadBalancerInstanceRequest createLoadBalancerInstanceRequest (required)
	 * @return byte[]
	 *	CreateLoadBalancerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createLoadBalancerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createLoadBalancerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서리스너생성
	 * @param createLoadBalancerListenerRequest createLoadBalancerListenerRequest (required)
	 * @return CreateLoadBalancerListenerResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateLoadBalancerListenerResponse> createLoadBalancerListenerGet(CreateLoadBalancerListenerRequest createLoadBalancerListenerRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createLoadBalancerListener";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, createLoadBalancerListenerRequest, true, false);
		return apiClient.call(apiRequest, CreateLoadBalancerListenerResponse.class);
	}

	/**
	 * 
	 * 로드밸런서리스너생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createLoadBalancerListenerRequest createLoadBalancerListenerRequest (required)
	 * @return byte[]
	 *	CreateLoadBalancerListenerResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createLoadBalancerListenerGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createLoadBalancerListener";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서리스너생성
	 * @param createLoadBalancerListenerRequest createLoadBalancerListenerRequest (required)
	 * @return CreateLoadBalancerListenerResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateLoadBalancerListenerResponse> createLoadBalancerListenerPost(CreateLoadBalancerListenerRequest createLoadBalancerListenerRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createLoadBalancerListener";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, createLoadBalancerListenerRequest, true, false);
		return apiClient.call(apiRequest, CreateLoadBalancerListenerResponse.class);
	}

	/**
	 * 
	 * 로드밸런서리스너생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createLoadBalancerListenerRequest createLoadBalancerListenerRequest (required)
	 * @return byte[]
	 *	CreateLoadBalancerListenerResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createLoadBalancerListenerPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createLoadBalancerListener";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹생성
	 * @param createTargetGroupRequest createTargetGroupRequest (required)
	 * @return CreateTargetGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateTargetGroupResponse> createTargetGroupGet(CreateTargetGroupRequest createTargetGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createTargetGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, createTargetGroupRequest, true, false);
		return apiClient.call(apiRequest, CreateTargetGroupResponse.class);
	}

	/**
	 * 
	 * 타겟그룹생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createTargetGroupRequest createTargetGroupRequest (required)
	 * @return byte[]
	 *	CreateTargetGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createTargetGroupGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createTargetGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹생성
	 * @param createTargetGroupRequest createTargetGroupRequest (required)
	 * @return CreateTargetGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateTargetGroupResponse> createTargetGroupPost(CreateTargetGroupRequest createTargetGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createTargetGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, createTargetGroupRequest, true, false);
		return apiClient.call(apiRequest, CreateTargetGroupResponse.class);
	}

	/**
	 * 
	 * 타겟그룹생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createTargetGroupRequest createTargetGroupRequest (required)
	 * @return byte[]
	 *	CreateTargetGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createTargetGroupPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createTargetGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스삭제
	 * @param deleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest (required)
	 * @return DeleteLoadBalancerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLoadBalancerInstancesResponse> deleteLoadBalancerInstancesGet(DeleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLoadBalancerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, deleteLoadBalancerInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteLoadBalancerInstancesResponse.class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest (required)
	 * @return byte[]
	 *	DeleteLoadBalancerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLoadBalancerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLoadBalancerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스삭제
	 * @param deleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest (required)
	 * @return DeleteLoadBalancerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLoadBalancerInstancesResponse> deleteLoadBalancerInstancesPost(DeleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLoadBalancerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, deleteLoadBalancerInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteLoadBalancerInstancesResponse.class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest (required)
	 * @return byte[]
	 *	DeleteLoadBalancerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLoadBalancerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLoadBalancerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서리스너삭제
	 * @param deleteLoadBalancerListenersRequest deleteLoadBalancerListenersRequest (required)
	 * @return DeleteLoadBalancerListenersResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLoadBalancerListenersResponse> deleteLoadBalancerListenersGet(DeleteLoadBalancerListenersRequest deleteLoadBalancerListenersRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLoadBalancerListeners";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, deleteLoadBalancerListenersRequest, true, false);
		return apiClient.call(apiRequest, DeleteLoadBalancerListenersResponse.class);
	}

	/**
	 * 
	 * 로드밸런서리스너삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLoadBalancerListenersRequest deleteLoadBalancerListenersRequest (required)
	 * @return byte[]
	 *	DeleteLoadBalancerListenersResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLoadBalancerListenersGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLoadBalancerListeners";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서리스너삭제
	 * @param deleteLoadBalancerListenersRequest deleteLoadBalancerListenersRequest (required)
	 * @return DeleteLoadBalancerListenersResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLoadBalancerListenersResponse> deleteLoadBalancerListenersPost(DeleteLoadBalancerListenersRequest deleteLoadBalancerListenersRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLoadBalancerListeners";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, deleteLoadBalancerListenersRequest, true, false);
		return apiClient.call(apiRequest, DeleteLoadBalancerListenersResponse.class);
	}

	/**
	 * 
	 * 로드밸런서리스너삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLoadBalancerListenersRequest deleteLoadBalancerListenersRequest (required)
	 * @return byte[]
	 *	DeleteLoadBalancerListenersResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLoadBalancerListenersPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLoadBalancerListeners";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹삭제
	 * @param deleteTargetGroupsRequest deleteTargetGroupsRequest (required)
	 * @return DeleteTargetGroupsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteTargetGroupsResponse> deleteTargetGroupsGet(DeleteTargetGroupsRequest deleteTargetGroupsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteTargetGroups";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, deleteTargetGroupsRequest, true, false);
		return apiClient.call(apiRequest, DeleteTargetGroupsResponse.class);
	}

	/**
	 * 
	 * 타겟그룹삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteTargetGroupsRequest deleteTargetGroupsRequest (required)
	 * @return byte[]
	 *	DeleteTargetGroupsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteTargetGroupsGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteTargetGroups";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹삭제
	 * @param deleteTargetGroupsRequest deleteTargetGroupsRequest (required)
	 * @return DeleteTargetGroupsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteTargetGroupsResponse> deleteTargetGroupsPost(DeleteTargetGroupsRequest deleteTargetGroupsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteTargetGroups";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, deleteTargetGroupsRequest, true, false);
		return apiClient.call(apiRequest, DeleteTargetGroupsResponse.class);
	}

	/**
	 * 
	 * 타겟그룹삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteTargetGroupsRequest deleteTargetGroupsRequest (required)
	 * @return byte[]
	 *	DeleteTargetGroupsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteTargetGroupsPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteTargetGroups";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스상세조회
	 * @param getLoadBalancerInstanceDetailRequest getLoadBalancerInstanceDetailRequest (required)
	 * @return GetLoadBalancerInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerInstanceDetailResponse> getLoadBalancerInstanceDetailGet(GetLoadBalancerInstanceDetailRequest getLoadBalancerInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, getLoadBalancerInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerInstanceDetailResponse.class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerInstanceDetailRequest getLoadBalancerInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerInstanceDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스상세조회
	 * @param getLoadBalancerInstanceDetailRequest getLoadBalancerInstanceDetailRequest (required)
	 * @return GetLoadBalancerInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerInstanceDetailResponse> getLoadBalancerInstanceDetailPost(GetLoadBalancerInstanceDetailRequest getLoadBalancerInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, getLoadBalancerInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerInstanceDetailResponse.class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerInstanceDetailRequest getLoadBalancerInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerInstanceDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스리스트조회
	 * @param getLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest (required)
	 * @return GetLoadBalancerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerInstanceListResponse> getLoadBalancerInstanceListGet(GetLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, getLoadBalancerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerInstanceListResponse.class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스리스트조회
	 * @param getLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest (required)
	 * @return GetLoadBalancerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerInstanceListResponse> getLoadBalancerInstanceListPost(GetLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, getLoadBalancerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerInstanceListResponse.class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서리스너리스트조회
	 * @param getLoadBalancerListenerListRequest getLoadBalancerListenerListRequest (required)
	 * @return GetLoadBalancerListenerListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerListenerListResponse> getLoadBalancerListenerListGet(GetLoadBalancerListenerListRequest getLoadBalancerListenerListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerListenerList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, getLoadBalancerListenerListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerListenerListResponse.class);
	}

	/**
	 * 
	 * 로드밸런서리스너리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerListenerListRequest getLoadBalancerListenerListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerListenerListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerListenerListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerListenerList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서리스너리스트조회
	 * @param getLoadBalancerListenerListRequest getLoadBalancerListenerListRequest (required)
	 * @return GetLoadBalancerListenerListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerListenerListResponse> getLoadBalancerListenerListPost(GetLoadBalancerListenerListRequest getLoadBalancerListenerListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerListenerList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, getLoadBalancerListenerListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerListenerListResponse.class);
	}

	/**
	 * 
	 * 로드밸런서리스너리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerListenerListRequest getLoadBalancerListenerListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerListenerListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerListenerListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerListenerList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서룰리스트조회
	 * @param getLoadBalancerRuleListRequest getLoadBalancerRuleListRequest (required)
	 * @return GetLoadBalancerRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerRuleListResponse> getLoadBalancerRuleListGet(GetLoadBalancerRuleListRequest getLoadBalancerRuleListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerRuleList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, getLoadBalancerRuleListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerRuleListResponse.class);
	}

	/**
	 * 
	 * 로드밸런서룰리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerRuleListRequest getLoadBalancerRuleListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerRuleListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerRuleList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서룰리스트조회
	 * @param getLoadBalancerRuleListRequest getLoadBalancerRuleListRequest (required)
	 * @return GetLoadBalancerRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerRuleListResponse> getLoadBalancerRuleListPost(GetLoadBalancerRuleListRequest getLoadBalancerRuleListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerRuleList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, getLoadBalancerRuleListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerRuleListResponse.class);
	}

	/**
	 * 
	 * 로드밸런서룰리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerRuleListRequest getLoadBalancerRuleListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerRuleListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerRuleList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹상세조회
	 * @param getTargetGroupDetailRequest getTargetGroupDetailRequest (required)
	 * @return GetTargetGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetTargetGroupDetailResponse> getTargetGroupDetailGet(GetTargetGroupDetailRequest getTargetGroupDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getTargetGroupDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, getTargetGroupDetailRequest, true, false);
		return apiClient.call(apiRequest, GetTargetGroupDetailResponse.class);
	}

	/**
	 * 
	 * 타겟그룹상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getTargetGroupDetailRequest getTargetGroupDetailRequest (required)
	 * @return byte[]
	 *	GetTargetGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getTargetGroupDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getTargetGroupDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹상세조회
	 * @param getTargetGroupDetailRequest getTargetGroupDetailRequest (required)
	 * @return GetTargetGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetTargetGroupDetailResponse> getTargetGroupDetailPost(GetTargetGroupDetailRequest getTargetGroupDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getTargetGroupDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, getTargetGroupDetailRequest, true, false);
		return apiClient.call(apiRequest, GetTargetGroupDetailResponse.class);
	}

	/**
	 * 
	 * 타겟그룹상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getTargetGroupDetailRequest getTargetGroupDetailRequest (required)
	 * @return byte[]
	 *	GetTargetGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getTargetGroupDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getTargetGroupDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹리스트조회
	 * @param getTargetGroupListRequest getTargetGroupListRequest (required)
	 * @return GetTargetGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetTargetGroupListResponse> getTargetGroupListGet(GetTargetGroupListRequest getTargetGroupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getTargetGroupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, getTargetGroupListRequest, true, false);
		return apiClient.call(apiRequest, GetTargetGroupListResponse.class);
	}

	/**
	 * 
	 * 타겟그룹리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getTargetGroupListRequest getTargetGroupListRequest (required)
	 * @return byte[]
	 *	GetTargetGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getTargetGroupListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getTargetGroupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹리스트조회
	 * @param getTargetGroupListRequest getTargetGroupListRequest (required)
	 * @return GetTargetGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetTargetGroupListResponse> getTargetGroupListPost(GetTargetGroupListRequest getTargetGroupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getTargetGroupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, getTargetGroupListRequest, true, false);
		return apiClient.call(apiRequest, GetTargetGroupListResponse.class);
	}

	/**
	 * 
	 * 타겟그룹리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getTargetGroupListRequest getTargetGroupListRequest (required)
	 * @return byte[]
	 *	GetTargetGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getTargetGroupListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getTargetGroupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟리스트조회
	 * @param getTargetListRequest getTargetListRequest (required)
	 * @return GetTargetListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetTargetListResponse> getTargetListGet(GetTargetListRequest getTargetListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getTargetList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, getTargetListRequest, true, false);
		return apiClient.call(apiRequest, GetTargetListResponse.class);
	}

	/**
	 * 
	 * 타겟리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getTargetListRequest getTargetListRequest (required)
	 * @return byte[]
	 *	GetTargetListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getTargetListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getTargetList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟리스트조회
	 * @param getTargetListRequest getTargetListRequest (required)
	 * @return GetTargetListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetTargetListResponse> getTargetListPost(GetTargetListRequest getTargetListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getTargetList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, getTargetListRequest, true, false);
		return apiClient.call(apiRequest, GetTargetListResponse.class);
	}

	/**
	 * 
	 * 타겟리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getTargetListRequest getTargetListRequest (required)
	 * @return byte[]
	 *	GetTargetListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getTargetListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getTargetList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟제거
	 * @param removeTargetRequest removeTargetRequest (required)
	 * @return RemoveTargetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveTargetResponse> removeTargetGet(RemoveTargetRequest removeTargetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeTarget";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, removeTargetRequest, true, false);
		return apiClient.call(apiRequest, RemoveTargetResponse.class);
	}

	/**
	 * 
	 * 타겟제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeTargetRequest removeTargetRequest (required)
	 * @return byte[]
	 *	RemoveTargetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeTargetGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeTarget";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟제거
	 * @param removeTargetRequest removeTargetRequest (required)
	 * @return RemoveTargetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveTargetResponse> removeTargetPost(RemoveTargetRequest removeTargetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeTarget";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, removeTargetRequest, true, false);
		return apiClient.call(apiRequest, RemoveTargetResponse.class);
	}

	/**
	 * 
	 * 타겟제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeTargetRequest removeTargetRequest (required)
	 * @return byte[]
	 *	RemoveTargetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeTargetPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeTarget";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서설명설정
	 * @param setLoadBalancerDescriptionRequest setLoadBalancerDescriptionRequest (required)
	 * @return SetLoadBalancerDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetLoadBalancerDescriptionResponse> setLoadBalancerDescriptionGet(SetLoadBalancerDescriptionRequest setLoadBalancerDescriptionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setLoadBalancerDescription";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, setLoadBalancerDescriptionRequest, true, false);
		return apiClient.call(apiRequest, SetLoadBalancerDescriptionResponse.class);
	}

	/**
	 * 
	 * 로드밸런서설명설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setLoadBalancerDescriptionRequest setLoadBalancerDescriptionRequest (required)
	 * @return byte[]
	 *	SetLoadBalancerDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setLoadBalancerDescriptionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setLoadBalancerDescription";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서설명설정
	 * @param setLoadBalancerDescriptionRequest setLoadBalancerDescriptionRequest (required)
	 * @return SetLoadBalancerDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetLoadBalancerDescriptionResponse> setLoadBalancerDescriptionPost(SetLoadBalancerDescriptionRequest setLoadBalancerDescriptionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setLoadBalancerDescription";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, setLoadBalancerDescriptionRequest, true, false);
		return apiClient.call(apiRequest, SetLoadBalancerDescriptionResponse.class);
	}

	/**
	 * 
	 * 로드밸런서설명설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setLoadBalancerDescriptionRequest setLoadBalancerDescriptionRequest (required)
	 * @return byte[]
	 *	SetLoadBalancerDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setLoadBalancerDescriptionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setLoadBalancerDescription";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스서브넷설정
	 * @param setLoadBalancerInstanceSubnetRequest setLoadBalancerInstanceSubnetRequest (required)
	 * @return SetLoadBalancerInstanceSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetLoadBalancerInstanceSubnetResponse> setLoadBalancerInstanceSubnetGet(SetLoadBalancerInstanceSubnetRequest setLoadBalancerInstanceSubnetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setLoadBalancerInstanceSubnet";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, setLoadBalancerInstanceSubnetRequest, true, false);
		return apiClient.call(apiRequest, SetLoadBalancerInstanceSubnetResponse.class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스서브넷설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setLoadBalancerInstanceSubnetRequest setLoadBalancerInstanceSubnetRequest (required)
	 * @return byte[]
	 *	SetLoadBalancerInstanceSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setLoadBalancerInstanceSubnetGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setLoadBalancerInstanceSubnet";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스서브넷설정
	 * @param setLoadBalancerInstanceSubnetRequest setLoadBalancerInstanceSubnetRequest (required)
	 * @return SetLoadBalancerInstanceSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetLoadBalancerInstanceSubnetResponse> setLoadBalancerInstanceSubnetPost(SetLoadBalancerInstanceSubnetRequest setLoadBalancerInstanceSubnetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setLoadBalancerInstanceSubnet";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, setLoadBalancerInstanceSubnetRequest, true, false);
		return apiClient.call(apiRequest, SetLoadBalancerInstanceSubnetResponse.class);
	}

	/**
	 * 
	 * 로드밸런서인스턴스서브넷설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setLoadBalancerInstanceSubnetRequest setLoadBalancerInstanceSubnetRequest (required)
	 * @return byte[]
	 *	SetLoadBalancerInstanceSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setLoadBalancerInstanceSubnetPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setLoadBalancerInstanceSubnet";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟설정
	 * @param setTargetRequest setTargetRequest (required)
	 * @return SetTargetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetTargetResponse> setTargetGet(SetTargetRequest setTargetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setTarget";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, setTargetRequest, true, false);
		return apiClient.call(apiRequest, SetTargetResponse.class);
	}

	/**
	 * 
	 * 타겟설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setTargetRequest setTargetRequest (required)
	 * @return byte[]
	 *	SetTargetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setTargetGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setTarget";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹설명설정
	 * @param setTargetGroupDescriptionRequest setTargetGroupDescriptionRequest (required)
	 * @return SetTargetGroupDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetTargetGroupDescriptionResponse> setTargetGroupDescriptionGet(SetTargetGroupDescriptionRequest setTargetGroupDescriptionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setTargetGroupDescription";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, setTargetGroupDescriptionRequest, true, false);
		return apiClient.call(apiRequest, SetTargetGroupDescriptionResponse.class);
	}

	/**
	 * 
	 * 타겟그룹설명설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setTargetGroupDescriptionRequest setTargetGroupDescriptionRequest (required)
	 * @return byte[]
	 *	SetTargetGroupDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setTargetGroupDescriptionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setTargetGroupDescription";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟그룹설명설정
	 * @param setTargetGroupDescriptionRequest setTargetGroupDescriptionRequest (required)
	 * @return SetTargetGroupDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetTargetGroupDescriptionResponse> setTargetGroupDescriptionPost(SetTargetGroupDescriptionRequest setTargetGroupDescriptionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setTargetGroupDescription";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, setTargetGroupDescriptionRequest, true, false);
		return apiClient.call(apiRequest, SetTargetGroupDescriptionResponse.class);
	}

	/**
	 * 
	 * 타겟그룹설명설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setTargetGroupDescriptionRequest setTargetGroupDescriptionRequest (required)
	 * @return byte[]
	 *	SetTargetGroupDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setTargetGroupDescriptionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setTargetGroupDescription";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 타겟설정
	 * @param setTargetRequest setTargetRequest (required)
	 * @return SetTargetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetTargetResponse> setTargetPost(SetTargetRequest setTargetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setTarget";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, setTargetRequest, true, false);
		return apiClient.call(apiRequest, SetTargetResponse.class);
	}

	/**
	 * 
	 * 타겟설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setTargetRequest setTargetRequest (required)
	 * @return byte[]
	 *	SetTargetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setTargetPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setTarget";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

}
