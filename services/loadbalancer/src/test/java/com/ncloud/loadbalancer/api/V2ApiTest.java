/*
 * loadbalancer
 * <br/>https://ncloud.apigw.ntruss.com/loadbalancer/v2
 *
 * NBP corp.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.loadbalancer.api;

import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import com.ncloud.ApiClient;
import com.ncloud.ApiResponse;
import com.ncloud.auth.PropertiesFileCredentialsProvider;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.marshaller.FormMarshaller;
import com.ncloud.marshaller.JsonMarshaller;
import com.ncloud.marshaller.XmlMarshaller;
import com.ncloud.loadbalancer.model.AddLoadBalancerSslCertificateRequest;
import com.ncloud.loadbalancer.model.AddLoadBalancerSslCertificateResponse;
import com.ncloud.loadbalancer.model.AddServerInstancesToLoadBalancerRequest;
import com.ncloud.loadbalancer.model.AddServerInstancesToLoadBalancerResponse;
import com.ncloud.loadbalancer.model.ChangeLoadBalancedServerInstancesRequest;
import com.ncloud.loadbalancer.model.ChangeLoadBalancedServerInstancesResponse;
import com.ncloud.loadbalancer.model.ChangeLoadBalancerInstanceConfigurationRequest;
import com.ncloud.loadbalancer.model.ChangeLoadBalancerInstanceConfigurationResponse;
import com.ncloud.loadbalancer.model.CreateLoadBalancerInstanceRequest;
import com.ncloud.loadbalancer.model.CreateLoadBalancerInstanceResponse;
import com.ncloud.loadbalancer.model.DeleteLoadBalancerInstancesRequest;
import com.ncloud.loadbalancer.model.DeleteLoadBalancerInstancesResponse;
import com.ncloud.loadbalancer.model.DeleteLoadBalancerSslCertificateRequest;
import com.ncloud.loadbalancer.model.DeleteLoadBalancerSslCertificateResponse;
import com.ncloud.loadbalancer.model.DeleteServerInstancesFromLoadBalancerRequest;
import com.ncloud.loadbalancer.model.DeleteServerInstancesFromLoadBalancerResponse;
import com.ncloud.loadbalancer.model.GetLoadBalancedServerInstanceListRequest;
import com.ncloud.loadbalancer.model.GetLoadBalancedServerInstanceListResponse;
import com.ncloud.loadbalancer.model.GetLoadBalancerInstanceListRequest;
import com.ncloud.loadbalancer.model.GetLoadBalancerInstanceListResponse;
import com.ncloud.loadbalancer.model.GetLoadBalancerSslCertificateListRequest;
import com.ncloud.loadbalancer.model.GetLoadBalancerSslCertificateListResponse;
import com.ncloud.loadbalancer.model.GetLoadBalancerTargetServerInstanceListRequest;
import com.ncloud.loadbalancer.model.GetLoadBalancerTargetServerInstanceListResponse;

/**
 * API tests for V2Api
 */
@Ignore
public class V2ApiTest {
	private V2Api api;
	private ApiClient apiClient;

	@Before
	public void setUp() {
		apiClient = new ApiClient.ApiClientBuilder()
		.addMarshaller(JsonMarshaller.getInstance())
		.addMarshaller(XmlMarshaller.getInstance())
		.addMarshaller(FormMarshaller.getInstance())
		.setCredentials(new PropertiesFileCredentialsProvider("credentials.properties").getCredentials())
		.setLogging(true)
		.build();

		api = new V2Api(apiClient);
	}

	@After
	public void tearDown() {
	}

	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addLoadBalancerSslCertificatePostTest() throws ApiException, SdkException {
		AddLoadBalancerSslCertificateRequest addLoadBalancerSslCertificateRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AddLoadBalancerSslCertificateResponse> response = api.addLoadBalancerSslCertificatePost(addLoadBalancerSslCertificateRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addLoadBalancerSslCertificatePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.addLoadBalancerSslCertificatePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addServerInstancesToLoadBalancerGetTest() throws ApiException, SdkException {
		AddServerInstancesToLoadBalancerRequest addServerInstancesToLoadBalancerRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AddServerInstancesToLoadBalancerResponse> response = api.addServerInstancesToLoadBalancerGet(addServerInstancesToLoadBalancerRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addServerInstancesToLoadBalancerGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.addServerInstancesToLoadBalancerGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addServerInstancesToLoadBalancerPostTest() throws ApiException, SdkException {
		AddServerInstancesToLoadBalancerRequest addServerInstancesToLoadBalancerRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AddServerInstancesToLoadBalancerResponse> response = api.addServerInstancesToLoadBalancerPost(addServerInstancesToLoadBalancerRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addServerInstancesToLoadBalancerPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.addServerInstancesToLoadBalancerPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void changeLoadBalancedServerInstancesGetTest() throws ApiException, SdkException {
		ChangeLoadBalancedServerInstancesRequest changeLoadBalancedServerInstancesRequest = null;

		try {
			// Handler Successful response
			ApiResponse<ChangeLoadBalancedServerInstancesResponse> response = api.changeLoadBalancedServerInstancesGet(changeLoadBalancedServerInstancesRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void changeLoadBalancedServerInstancesGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.changeLoadBalancedServerInstancesGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void changeLoadBalancedServerInstancesPostTest() throws ApiException, SdkException {
		ChangeLoadBalancedServerInstancesRequest changeLoadBalancedServerInstancesRequest = null;

		try {
			// Handler Successful response
			ApiResponse<ChangeLoadBalancedServerInstancesResponse> response = api.changeLoadBalancedServerInstancesPost(changeLoadBalancedServerInstancesRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void changeLoadBalancedServerInstancesPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.changeLoadBalancedServerInstancesPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void changeLoadBalancerInstanceConfigurationGetTest() throws ApiException, SdkException {
		ChangeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest = null;

		try {
			// Handler Successful response
			ApiResponse<ChangeLoadBalancerInstanceConfigurationResponse> response = api.changeLoadBalancerInstanceConfigurationGet(changeLoadBalancerInstanceConfigurationRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void changeLoadBalancerInstanceConfigurationGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.changeLoadBalancerInstanceConfigurationGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void changeLoadBalancerInstanceConfigurationPostTest() throws ApiException, SdkException {
		ChangeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest = null;

		try {
			// Handler Successful response
			ApiResponse<ChangeLoadBalancerInstanceConfigurationResponse> response = api.changeLoadBalancerInstanceConfigurationPost(changeLoadBalancerInstanceConfigurationRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void changeLoadBalancerInstanceConfigurationPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.changeLoadBalancerInstanceConfigurationPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createLoadBalancerInstanceGetTest() throws ApiException, SdkException {
		CreateLoadBalancerInstanceRequest createLoadBalancerInstanceRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateLoadBalancerInstanceResponse> response = api.createLoadBalancerInstanceGet(createLoadBalancerInstanceRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createLoadBalancerInstanceGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createLoadBalancerInstanceGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createLoadBalancerInstancePostTest() throws ApiException, SdkException {
		CreateLoadBalancerInstanceRequest createLoadBalancerInstanceRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateLoadBalancerInstanceResponse> response = api.createLoadBalancerInstancePost(createLoadBalancerInstanceRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createLoadBalancerInstancePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createLoadBalancerInstancePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteLoadBalancerInstancesGetTest() throws ApiException, SdkException {
		DeleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteLoadBalancerInstancesResponse> response = api.deleteLoadBalancerInstancesGet(deleteLoadBalancerInstancesRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteLoadBalancerInstancesGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteLoadBalancerInstancesGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteLoadBalancerInstancesPostTest() throws ApiException, SdkException {
		DeleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteLoadBalancerInstancesResponse> response = api.deleteLoadBalancerInstancesPost(deleteLoadBalancerInstancesRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteLoadBalancerInstancesPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteLoadBalancerInstancesPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteLoadBalancerSslCertificateGetTest() throws ApiException, SdkException {
		DeleteLoadBalancerSslCertificateRequest deleteLoadBalancerSslCertificateRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteLoadBalancerSslCertificateResponse> response = api.deleteLoadBalancerSslCertificateGet(deleteLoadBalancerSslCertificateRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteLoadBalancerSslCertificateGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteLoadBalancerSslCertificateGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteLoadBalancerSslCertificatePostTest() throws ApiException, SdkException {
		DeleteLoadBalancerSslCertificateRequest deleteLoadBalancerSslCertificateRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteLoadBalancerSslCertificateResponse> response = api.deleteLoadBalancerSslCertificatePost(deleteLoadBalancerSslCertificateRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteLoadBalancerSslCertificatePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteLoadBalancerSslCertificatePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteServerInstancesFromLoadBalancerGetTest() throws ApiException, SdkException {
		DeleteServerInstancesFromLoadBalancerRequest deleteServerInstancesFromLoadBalancerRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteServerInstancesFromLoadBalancerResponse> response = api.deleteServerInstancesFromLoadBalancerGet(deleteServerInstancesFromLoadBalancerRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteServerInstancesFromLoadBalancerGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteServerInstancesFromLoadBalancerGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteServerInstancesFromLoadBalancerPostTest() throws ApiException, SdkException {
		DeleteServerInstancesFromLoadBalancerRequest deleteServerInstancesFromLoadBalancerRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteServerInstancesFromLoadBalancerResponse> response = api.deleteServerInstancesFromLoadBalancerPost(deleteServerInstancesFromLoadBalancerRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteServerInstancesFromLoadBalancerPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteServerInstancesFromLoadBalancerPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancedServerInstanceListGetTest() throws ApiException, SdkException {
		GetLoadBalancedServerInstanceListRequest getLoadBalancedServerInstanceListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetLoadBalancedServerInstanceListResponse> response = api.getLoadBalancedServerInstanceListGet(getLoadBalancedServerInstanceListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancedServerInstanceListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getLoadBalancedServerInstanceListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancedServerInstanceListPostTest() throws ApiException, SdkException {
		GetLoadBalancedServerInstanceListRequest getLoadBalancedServerInstanceListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetLoadBalancedServerInstanceListResponse> response = api.getLoadBalancedServerInstanceListPost(getLoadBalancedServerInstanceListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancedServerInstanceListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getLoadBalancedServerInstanceListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancerInstanceListGetTest() throws ApiException, SdkException {
		GetLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetLoadBalancerInstanceListResponse> response = api.getLoadBalancerInstanceListGet(getLoadBalancerInstanceListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancerInstanceListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getLoadBalancerInstanceListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancerInstanceListPostTest() throws ApiException, SdkException {
		GetLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetLoadBalancerInstanceListResponse> response = api.getLoadBalancerInstanceListPost(getLoadBalancerInstanceListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancerInstanceListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getLoadBalancerInstanceListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancerSslCertificateListGetTest() throws ApiException, SdkException {
		GetLoadBalancerSslCertificateListRequest getLoadBalancerSslCertificateListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetLoadBalancerSslCertificateListResponse> response = api.getLoadBalancerSslCertificateListGet(getLoadBalancerSslCertificateListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancerSslCertificateListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getLoadBalancerSslCertificateListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancerSslCertificateListPostTest() throws ApiException, SdkException {
		GetLoadBalancerSslCertificateListRequest getLoadBalancerSslCertificateListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetLoadBalancerSslCertificateListResponse> response = api.getLoadBalancerSslCertificateListPost(getLoadBalancerSslCertificateListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancerSslCertificateListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getLoadBalancerSslCertificateListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancerTargetServerInstanceListGetTest() throws ApiException, SdkException {
		GetLoadBalancerTargetServerInstanceListRequest getLoadBalancerTargetServerInstanceListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetLoadBalancerTargetServerInstanceListResponse> response = api.getLoadBalancerTargetServerInstanceListGet(getLoadBalancerTargetServerInstanceListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancerTargetServerInstanceListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getLoadBalancerTargetServerInstanceListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancerTargetServerInstanceListPostTest() throws ApiException, SdkException {
		GetLoadBalancerTargetServerInstanceListRequest getLoadBalancerTargetServerInstanceListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetLoadBalancerTargetServerInstanceListResponse> response = api.getLoadBalancerTargetServerInstanceListPost(getLoadBalancerTargetServerInstanceListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getLoadBalancerTargetServerInstanceListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getLoadBalancerTargetServerInstanceListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
}
