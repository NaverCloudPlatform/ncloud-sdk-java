/*
 * loadbalancer
 * <br/>https://ncloud.apigw.ntruss.com/loadbalancer/v2
 *
 * NBP corp.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.loadbalancer.api;

import java.util.HashMap;
import java.util.Map;

import com.ncloud.ApiClient;
import com.ncloud.ApiRequest;
import com.ncloud.ApiResponse;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.loadbalancer.model.AddLoadBalancerSslCertificateRequest;
import com.ncloud.loadbalancer.model.AddLoadBalancerSslCertificateResponse;
import com.ncloud.loadbalancer.model.AddServerInstancesToLoadBalancerRequest;
import com.ncloud.loadbalancer.model.AddServerInstancesToLoadBalancerResponse;
import com.ncloud.loadbalancer.model.ChangeLoadBalancedServerInstancesRequest;
import com.ncloud.loadbalancer.model.ChangeLoadBalancedServerInstancesResponse;
import com.ncloud.loadbalancer.model.ChangeLoadBalancerInstanceConfigurationRequest;
import com.ncloud.loadbalancer.model.ChangeLoadBalancerInstanceConfigurationResponse;
import com.ncloud.loadbalancer.model.CreateLoadBalancerInstanceRequest;
import com.ncloud.loadbalancer.model.CreateLoadBalancerInstanceResponse;
import com.ncloud.loadbalancer.model.DeleteLoadBalancerInstancesRequest;
import com.ncloud.loadbalancer.model.DeleteLoadBalancerInstancesResponse;
import com.ncloud.loadbalancer.model.DeleteLoadBalancerSslCertificateRequest;
import com.ncloud.loadbalancer.model.DeleteLoadBalancerSslCertificateResponse;
import com.ncloud.loadbalancer.model.DeleteServerInstancesFromLoadBalancerRequest;
import com.ncloud.loadbalancer.model.DeleteServerInstancesFromLoadBalancerResponse;
import com.ncloud.loadbalancer.model.GetLoadBalancedServerInstanceListRequest;
import com.ncloud.loadbalancer.model.GetLoadBalancedServerInstanceListResponse;
import com.ncloud.loadbalancer.model.GetLoadBalancerInstanceListRequest;
import com.ncloud.loadbalancer.model.GetLoadBalancerInstanceListResponse;
import com.ncloud.loadbalancer.model.GetLoadBalancerSslCertificateListRequest;
import com.ncloud.loadbalancer.model.GetLoadBalancerSslCertificateListResponse;
import com.ncloud.loadbalancer.model.GetLoadBalancerTargetServerInstanceListRequest;
import com.ncloud.loadbalancer.model.GetLoadBalancerTargetServerInstanceListResponse;

public class V2Api {

	private final String basePath = "/loadbalancer/v2";

	private final ApiClient apiClient;

	public V2Api(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	/**
	 * 
	 * 
	 * @param addLoadBalancerSslCertificateRequest addLoadBalancerSslCertificateRequest (required)
	 * @return AddLoadBalancerSslCertificateResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddLoadBalancerSslCertificateResponse> addLoadBalancerSslCertificatePost(AddLoadBalancerSslCertificateRequest addLoadBalancerSslCertificateRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addLoadBalancerSslCertificate";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addLoadBalancerSslCertificateRequest, true, false);
		return apiClient.call(apiRequest, AddLoadBalancerSslCertificateResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addLoadBalancerSslCertificateRequest addLoadBalancerSslCertificateRequest (required)
	 * @return byte[]
	 *	AddLoadBalancerSslCertificateResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addLoadBalancerSslCertificatePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addLoadBalancerSslCertificate";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param addServerInstancesToLoadBalancerRequest addServerInstancesToLoadBalancerRequest (required)
	 * @return AddServerInstancesToLoadBalancerResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddServerInstancesToLoadBalancerResponse> addServerInstancesToLoadBalancerGet(AddServerInstancesToLoadBalancerRequest addServerInstancesToLoadBalancerRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addServerInstancesToLoadBalancer";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addServerInstancesToLoadBalancerRequest, true, false);
		return apiClient.call(apiRequest, AddServerInstancesToLoadBalancerResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addServerInstancesToLoadBalancerRequest addServerInstancesToLoadBalancerRequest (required)
	 * @return byte[]
	 *	AddServerInstancesToLoadBalancerResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addServerInstancesToLoadBalancerGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addServerInstancesToLoadBalancer";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param addServerInstancesToLoadBalancerRequest addServerInstancesToLoadBalancerRequest (required)
	 * @return AddServerInstancesToLoadBalancerResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddServerInstancesToLoadBalancerResponse> addServerInstancesToLoadBalancerPost(AddServerInstancesToLoadBalancerRequest addServerInstancesToLoadBalancerRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addServerInstancesToLoadBalancer";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addServerInstancesToLoadBalancerRequest, true, false);
		return apiClient.call(apiRequest, AddServerInstancesToLoadBalancerResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addServerInstancesToLoadBalancerRequest addServerInstancesToLoadBalancerRequest (required)
	 * @return byte[]
	 *	AddServerInstancesToLoadBalancerResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addServerInstancesToLoadBalancerPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addServerInstancesToLoadBalancer";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param changeLoadBalancedServerInstancesRequest changeLoadBalancedServerInstancesRequest (required)
	 * @return ChangeLoadBalancedServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeLoadBalancedServerInstancesResponse> changeLoadBalancedServerInstancesGet(ChangeLoadBalancedServerInstancesRequest changeLoadBalancedServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeLoadBalancedServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, changeLoadBalancedServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, ChangeLoadBalancedServerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeLoadBalancedServerInstancesRequest changeLoadBalancedServerInstancesRequest (required)
	 * @return byte[]
	 *	ChangeLoadBalancedServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeLoadBalancedServerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeLoadBalancedServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param changeLoadBalancedServerInstancesRequest changeLoadBalancedServerInstancesRequest (required)
	 * @return ChangeLoadBalancedServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeLoadBalancedServerInstancesResponse> changeLoadBalancedServerInstancesPost(ChangeLoadBalancedServerInstancesRequest changeLoadBalancedServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeLoadBalancedServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, changeLoadBalancedServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, ChangeLoadBalancedServerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeLoadBalancedServerInstancesRequest changeLoadBalancedServerInstancesRequest (required)
	 * @return byte[]
	 *	ChangeLoadBalancedServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeLoadBalancedServerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeLoadBalancedServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param changeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest (required)
	 * @return ChangeLoadBalancerInstanceConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeLoadBalancerInstanceConfigurationResponse> changeLoadBalancerInstanceConfigurationGet(ChangeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeLoadBalancerInstanceConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, changeLoadBalancerInstanceConfigurationRequest, true, false);
		return apiClient.call(apiRequest, ChangeLoadBalancerInstanceConfigurationResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest (required)
	 * @return byte[]
	 *	ChangeLoadBalancerInstanceConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeLoadBalancerInstanceConfigurationGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeLoadBalancerInstanceConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param changeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest (required)
	 * @return ChangeLoadBalancerInstanceConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeLoadBalancerInstanceConfigurationResponse> changeLoadBalancerInstanceConfigurationPost(ChangeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeLoadBalancerInstanceConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, changeLoadBalancerInstanceConfigurationRequest, true, false);
		return apiClient.call(apiRequest, ChangeLoadBalancerInstanceConfigurationResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeLoadBalancerInstanceConfigurationRequest changeLoadBalancerInstanceConfigurationRequest (required)
	 * @return byte[]
	 *	ChangeLoadBalancerInstanceConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeLoadBalancerInstanceConfigurationPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeLoadBalancerInstanceConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createLoadBalancerInstanceRequest createLoadBalancerInstanceRequest (required)
	 * @return CreateLoadBalancerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateLoadBalancerInstanceResponse> createLoadBalancerInstanceGet(CreateLoadBalancerInstanceRequest createLoadBalancerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createLoadBalancerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createLoadBalancerInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateLoadBalancerInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createLoadBalancerInstanceRequest createLoadBalancerInstanceRequest (required)
	 * @return byte[]
	 *	CreateLoadBalancerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createLoadBalancerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createLoadBalancerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createLoadBalancerInstanceRequest createLoadBalancerInstanceRequest (required)
	 * @return CreateLoadBalancerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateLoadBalancerInstanceResponse> createLoadBalancerInstancePost(CreateLoadBalancerInstanceRequest createLoadBalancerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createLoadBalancerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createLoadBalancerInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateLoadBalancerInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createLoadBalancerInstanceRequest createLoadBalancerInstanceRequest (required)
	 * @return byte[]
	 *	CreateLoadBalancerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createLoadBalancerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createLoadBalancerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest (required)
	 * @return DeleteLoadBalancerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLoadBalancerInstancesResponse> deleteLoadBalancerInstancesGet(DeleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLoadBalancerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteLoadBalancerInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteLoadBalancerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest (required)
	 * @return byte[]
	 *	DeleteLoadBalancerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLoadBalancerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLoadBalancerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest (required)
	 * @return DeleteLoadBalancerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLoadBalancerInstancesResponse> deleteLoadBalancerInstancesPost(DeleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLoadBalancerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteLoadBalancerInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteLoadBalancerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLoadBalancerInstancesRequest deleteLoadBalancerInstancesRequest (required)
	 * @return byte[]
	 *	DeleteLoadBalancerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLoadBalancerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLoadBalancerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteLoadBalancerSslCertificateRequest deleteLoadBalancerSslCertificateRequest (required)
	 * @return DeleteLoadBalancerSslCertificateResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLoadBalancerSslCertificateResponse> deleteLoadBalancerSslCertificateGet(DeleteLoadBalancerSslCertificateRequest deleteLoadBalancerSslCertificateRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLoadBalancerSslCertificate";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteLoadBalancerSslCertificateRequest, true, false);
		return apiClient.call(apiRequest, DeleteLoadBalancerSslCertificateResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLoadBalancerSslCertificateRequest deleteLoadBalancerSslCertificateRequest (required)
	 * @return byte[]
	 *	DeleteLoadBalancerSslCertificateResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLoadBalancerSslCertificateGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLoadBalancerSslCertificate";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteLoadBalancerSslCertificateRequest deleteLoadBalancerSslCertificateRequest (required)
	 * @return DeleteLoadBalancerSslCertificateResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLoadBalancerSslCertificateResponse> deleteLoadBalancerSslCertificatePost(DeleteLoadBalancerSslCertificateRequest deleteLoadBalancerSslCertificateRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLoadBalancerSslCertificate";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteLoadBalancerSslCertificateRequest, true, false);
		return apiClient.call(apiRequest, DeleteLoadBalancerSslCertificateResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLoadBalancerSslCertificateRequest deleteLoadBalancerSslCertificateRequest (required)
	 * @return byte[]
	 *	DeleteLoadBalancerSslCertificateResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLoadBalancerSslCertificatePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLoadBalancerSslCertificate";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteServerInstancesFromLoadBalancerRequest deleteServerInstancesFromLoadBalancerRequest (required)
	 * @return DeleteServerInstancesFromLoadBalancerResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteServerInstancesFromLoadBalancerResponse> deleteServerInstancesFromLoadBalancerGet(DeleteServerInstancesFromLoadBalancerRequest deleteServerInstancesFromLoadBalancerRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteServerInstancesFromLoadBalancer";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteServerInstancesFromLoadBalancerRequest, true, false);
		return apiClient.call(apiRequest, DeleteServerInstancesFromLoadBalancerResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteServerInstancesFromLoadBalancerRequest deleteServerInstancesFromLoadBalancerRequest (required)
	 * @return byte[]
	 *	DeleteServerInstancesFromLoadBalancerResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteServerInstancesFromLoadBalancerGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteServerInstancesFromLoadBalancer";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteServerInstancesFromLoadBalancerRequest deleteServerInstancesFromLoadBalancerRequest (required)
	 * @return DeleteServerInstancesFromLoadBalancerResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteServerInstancesFromLoadBalancerResponse> deleteServerInstancesFromLoadBalancerPost(DeleteServerInstancesFromLoadBalancerRequest deleteServerInstancesFromLoadBalancerRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteServerInstancesFromLoadBalancer";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteServerInstancesFromLoadBalancerRequest, true, false);
		return apiClient.call(apiRequest, DeleteServerInstancesFromLoadBalancerResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteServerInstancesFromLoadBalancerRequest deleteServerInstancesFromLoadBalancerRequest (required)
	 * @return byte[]
	 *	DeleteServerInstancesFromLoadBalancerResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteServerInstancesFromLoadBalancerPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteServerInstancesFromLoadBalancer";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getLoadBalancedServerInstanceListRequest getLoadBalancedServerInstanceListRequest (required)
	 * @return GetLoadBalancedServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancedServerInstanceListResponse> getLoadBalancedServerInstanceListGet(GetLoadBalancedServerInstanceListRequest getLoadBalancedServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancedServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getLoadBalancedServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancedServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancedServerInstanceListRequest getLoadBalancedServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancedServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancedServerInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancedServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getLoadBalancedServerInstanceListRequest getLoadBalancedServerInstanceListRequest (required)
	 * @return GetLoadBalancedServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancedServerInstanceListResponse> getLoadBalancedServerInstanceListPost(GetLoadBalancedServerInstanceListRequest getLoadBalancedServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancedServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getLoadBalancedServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancedServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancedServerInstanceListRequest getLoadBalancedServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancedServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancedServerInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancedServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest (required)
	 * @return GetLoadBalancerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerInstanceListResponse> getLoadBalancerInstanceListGet(GetLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getLoadBalancerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest (required)
	 * @return GetLoadBalancerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerInstanceListResponse> getLoadBalancerInstanceListPost(GetLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getLoadBalancerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerInstanceListRequest getLoadBalancerInstanceListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getLoadBalancerSslCertificateListRequest getLoadBalancerSslCertificateListRequest (required)
	 * @return GetLoadBalancerSslCertificateListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerSslCertificateListResponse> getLoadBalancerSslCertificateListGet(GetLoadBalancerSslCertificateListRequest getLoadBalancerSslCertificateListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerSslCertificateList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getLoadBalancerSslCertificateListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerSslCertificateListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerSslCertificateListRequest getLoadBalancerSslCertificateListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerSslCertificateListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerSslCertificateListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerSslCertificateList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getLoadBalancerSslCertificateListRequest getLoadBalancerSslCertificateListRequest (required)
	 * @return GetLoadBalancerSslCertificateListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerSslCertificateListResponse> getLoadBalancerSslCertificateListPost(GetLoadBalancerSslCertificateListRequest getLoadBalancerSslCertificateListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerSslCertificateList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getLoadBalancerSslCertificateListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerSslCertificateListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerSslCertificateListRequest getLoadBalancerSslCertificateListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerSslCertificateListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerSslCertificateListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerSslCertificateList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getLoadBalancerTargetServerInstanceListRequest getLoadBalancerTargetServerInstanceListRequest (required)
	 * @return GetLoadBalancerTargetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerTargetServerInstanceListResponse> getLoadBalancerTargetServerInstanceListGet(GetLoadBalancerTargetServerInstanceListRequest getLoadBalancerTargetServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerTargetServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getLoadBalancerTargetServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerTargetServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerTargetServerInstanceListRequest getLoadBalancerTargetServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerTargetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerTargetServerInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerTargetServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getLoadBalancerTargetServerInstanceListRequest getLoadBalancerTargetServerInstanceListRequest (required)
	 * @return GetLoadBalancerTargetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoadBalancerTargetServerInstanceListResponse> getLoadBalancerTargetServerInstanceListPost(GetLoadBalancerTargetServerInstanceListRequest getLoadBalancerTargetServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoadBalancerTargetServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getLoadBalancerTargetServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetLoadBalancerTargetServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoadBalancerTargetServerInstanceListRequest getLoadBalancerTargetServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetLoadBalancerTargetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoadBalancerTargetServerInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoadBalancerTargetServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

}
