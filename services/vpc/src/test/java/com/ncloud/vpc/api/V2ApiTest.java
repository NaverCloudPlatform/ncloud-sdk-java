/*
 * vpc
 * VPC Network 관련 API<br/>https://ncloud.apigw.ntruss.com/vpc/v2
 *
 * NBP corp.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.vpc.api;

import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import com.ncloud.ApiClient;
import com.ncloud.ApiResponse;
import com.ncloud.auth.PropertiesFileCredentialsProvider;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.marshaller.FormMarshaller;
import com.ncloud.marshaller.JsonMarshaller;
import com.ncloud.marshaller.XmlMarshaller;
import com.ncloud.vpc.model.AcceptOrRejectVpcPeeringRequest;
import com.ncloud.vpc.model.AcceptOrRejectVpcPeeringResponse;
import com.ncloud.vpc.model.AddNetworkAclInboundRuleRequest;
import com.ncloud.vpc.model.AddNetworkAclInboundRuleResponse;
import com.ncloud.vpc.model.AddNetworkAclOutboundRuleRequest;
import com.ncloud.vpc.model.AddNetworkAclOutboundRuleResponse;
import com.ncloud.vpc.model.AddRouteRequest;
import com.ncloud.vpc.model.AddRouteResponse;
import com.ncloud.vpc.model.AddRouteTableSubnetRequest;
import com.ncloud.vpc.model.AddRouteTableSubnetResponse;
import com.ncloud.vpc.model.CreateNatGatewayInstanceRequest;
import com.ncloud.vpc.model.CreateNatGatewayInstanceResponse;
import com.ncloud.vpc.model.CreateNetworkAclDenyAllowGroupRequest;
import com.ncloud.vpc.model.CreateNetworkAclDenyAllowGroupResponse;
import com.ncloud.vpc.model.CreateNetworkAclRequest;
import com.ncloud.vpc.model.CreateNetworkAclResponse;
import com.ncloud.vpc.model.CreateRouteTableRequest;
import com.ncloud.vpc.model.CreateRouteTableResponse;
import com.ncloud.vpc.model.CreateSubnetRequest;
import com.ncloud.vpc.model.CreateSubnetResponse;
import com.ncloud.vpc.model.CreateVpcPeeringInstanceRequest;
import com.ncloud.vpc.model.CreateVpcPeeringInstanceResponse;
import com.ncloud.vpc.model.CreateVpcRequest;
import com.ncloud.vpc.model.CreateVpcResponse;
import com.ncloud.vpc.model.DeleteNatGatewayInstanceRequest;
import com.ncloud.vpc.model.DeleteNatGatewayInstanceResponse;
import com.ncloud.vpc.model.DeleteNetworkAclDenyAllowGroupRequest;
import com.ncloud.vpc.model.DeleteNetworkAclDenyAllowGroupResponse;
import com.ncloud.vpc.model.DeleteNetworkAclRequest;
import com.ncloud.vpc.model.DeleteNetworkAclResponse;
import com.ncloud.vpc.model.DeleteRouteTableRequest;
import com.ncloud.vpc.model.DeleteRouteTableResponse;
import com.ncloud.vpc.model.DeleteSubnetRequest;
import com.ncloud.vpc.model.DeleteSubnetResponse;
import com.ncloud.vpc.model.DeleteVpcPeeringInstanceRequest;
import com.ncloud.vpc.model.DeleteVpcPeeringInstanceResponse;
import com.ncloud.vpc.model.DeleteVpcRequest;
import com.ncloud.vpc.model.DeleteVpcResponse;
import com.ncloud.vpc.model.GetNatGatewayInstanceDetailRequest;
import com.ncloud.vpc.model.GetNatGatewayInstanceDetailResponse;
import com.ncloud.vpc.model.GetNatGatewayInstanceListRequest;
import com.ncloud.vpc.model.GetNatGatewayInstanceListResponse;
import com.ncloud.vpc.model.GetNetworkAclDenyAllowGroupDetailRequest;
import com.ncloud.vpc.model.GetNetworkAclDenyAllowGroupDetailResponse;
import com.ncloud.vpc.model.GetNetworkAclDenyAllowGroupListRequest;
import com.ncloud.vpc.model.GetNetworkAclDenyAllowGroupListResponse;
import com.ncloud.vpc.model.GetNetworkAclDetailRequest;
import com.ncloud.vpc.model.GetNetworkAclDetailResponse;
import com.ncloud.vpc.model.GetNetworkAclListRequest;
import com.ncloud.vpc.model.GetNetworkAclListResponse;
import com.ncloud.vpc.model.GetNetworkAclRuleListRequest;
import com.ncloud.vpc.model.GetNetworkAclRuleListResponse;
import com.ncloud.vpc.model.GetRouteListRequest;
import com.ncloud.vpc.model.GetRouteListResponse;
import com.ncloud.vpc.model.GetRouteTableDetailRequest;
import com.ncloud.vpc.model.GetRouteTableDetailResponse;
import com.ncloud.vpc.model.GetRouteTableListRequest;
import com.ncloud.vpc.model.GetRouteTableListResponse;
import com.ncloud.vpc.model.GetRouteTableSubnetListRequest;
import com.ncloud.vpc.model.GetRouteTableSubnetListResponse;
import com.ncloud.vpc.model.GetSubnetDetailRequest;
import com.ncloud.vpc.model.GetSubnetDetailResponse;
import com.ncloud.vpc.model.GetSubnetListRequest;
import com.ncloud.vpc.model.GetSubnetListResponse;
import com.ncloud.vpc.model.GetVpcDetailRequest;
import com.ncloud.vpc.model.GetVpcDetailResponse;
import com.ncloud.vpc.model.GetVpcListRequest;
import com.ncloud.vpc.model.GetVpcListResponse;
import com.ncloud.vpc.model.GetVpcPeeringInstanceDetailRequest;
import com.ncloud.vpc.model.GetVpcPeeringInstanceDetailResponse;
import com.ncloud.vpc.model.GetVpcPeeringInstanceListRequest;
import com.ncloud.vpc.model.GetVpcPeeringInstanceListResponse;
import com.ncloud.vpc.model.RemoveNetworkAclInboundRuleRequest;
import com.ncloud.vpc.model.RemoveNetworkAclInboundRuleResponse;
import com.ncloud.vpc.model.RemoveNetworkAclOutboundRuleRequest;
import com.ncloud.vpc.model.RemoveNetworkAclOutboundRuleResponse;
import com.ncloud.vpc.model.RemoveRouteRequest;
import com.ncloud.vpc.model.RemoveRouteResponse;
import com.ncloud.vpc.model.RemoveRouteTableSubnetRequest;
import com.ncloud.vpc.model.RemoveRouteTableSubnetResponse;
import com.ncloud.vpc.model.SetNatGatewayDescriptionRequest;
import com.ncloud.vpc.model.SetNatGatewayDescriptionResponse;
import com.ncloud.vpc.model.SetNetworkAclDenyAllowGroupDescriptionRequest;
import com.ncloud.vpc.model.SetNetworkAclDenyAllowGroupDescriptionResponse;
import com.ncloud.vpc.model.SetNetworkAclDenyAllowGroupIpListRequest;
import com.ncloud.vpc.model.SetNetworkAclDenyAllowGroupIpListResponse;
import com.ncloud.vpc.model.SetNetworkAclDescriptionRequest;
import com.ncloud.vpc.model.SetNetworkAclDescriptionResponse;
import com.ncloud.vpc.model.SetRouteTableDescriptionRequest;
import com.ncloud.vpc.model.SetRouteTableDescriptionResponse;
import com.ncloud.vpc.model.SetSubnetNetworkAclRequest;
import com.ncloud.vpc.model.SetSubnetNetworkAclResponse;
import com.ncloud.vpc.model.SetVpcPeeringDescriptionRequest;
import com.ncloud.vpc.model.SetVpcPeeringDescriptionResponse;

/**
 * API tests for V2Api
 */
@Ignore
public class V2ApiTest {
	private V2Api api;
	private ApiClient apiClient;

	@Before
	public void setUp() {
		apiClient = new ApiClient.ApiClientBuilder()
		.addMarshaller(JsonMarshaller.getInstance())
		.addMarshaller(XmlMarshaller.getInstance())
		.addMarshaller(FormMarshaller.getInstance())
		.setCredentials(new PropertiesFileCredentialsProvider("credentials.properties").getCredentials())
		.setLogging(true)
		.build();

		api = new V2Api(apiClient);
	}

	@After
	public void tearDown() {
	}

	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void acceptOrRejectVpcPeeringGetTest() throws ApiException, SdkException {
		AcceptOrRejectVpcPeeringRequest acceptOrRejectVpcPeeringRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AcceptOrRejectVpcPeeringResponse> response = api.acceptOrRejectVpcPeeringGet(acceptOrRejectVpcPeeringRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void acceptOrRejectVpcPeeringGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.acceptOrRejectVpcPeeringGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void acceptOrRejectVpcPeeringPostTest() throws ApiException, SdkException {
		AcceptOrRejectVpcPeeringRequest acceptOrRejectVpcPeeringRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AcceptOrRejectVpcPeeringResponse> response = api.acceptOrRejectVpcPeeringPost(acceptOrRejectVpcPeeringRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void acceptOrRejectVpcPeeringPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.acceptOrRejectVpcPeeringPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addNetworkAclInboundRuleGetTest() throws ApiException, SdkException {
		AddNetworkAclInboundRuleRequest addNetworkAclInboundRuleRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AddNetworkAclInboundRuleResponse> response = api.addNetworkAclInboundRuleGet(addNetworkAclInboundRuleRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addNetworkAclInboundRuleGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.addNetworkAclInboundRuleGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addNetworkAclInboundRulePostTest() throws ApiException, SdkException {
		AddNetworkAclInboundRuleRequest addNetworkAclInboundRuleRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AddNetworkAclInboundRuleResponse> response = api.addNetworkAclInboundRulePost(addNetworkAclInboundRuleRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addNetworkAclInboundRulePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.addNetworkAclInboundRulePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addNetworkAclOutboundRuleGetTest() throws ApiException, SdkException {
		AddNetworkAclOutboundRuleRequest addNetworkAclOutboundRuleRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AddNetworkAclOutboundRuleResponse> response = api.addNetworkAclOutboundRuleGet(addNetworkAclOutboundRuleRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addNetworkAclOutboundRuleGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.addNetworkAclOutboundRuleGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addNetworkAclOutboundRulePostTest() throws ApiException, SdkException {
		AddNetworkAclOutboundRuleRequest addNetworkAclOutboundRuleRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AddNetworkAclOutboundRuleResponse> response = api.addNetworkAclOutboundRulePost(addNetworkAclOutboundRuleRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addNetworkAclOutboundRulePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.addNetworkAclOutboundRulePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addRouteGetTest() throws ApiException, SdkException {
		AddRouteRequest addRouteRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AddRouteResponse> response = api.addRouteGet(addRouteRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addRouteGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.addRouteGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addRoutePostTest() throws ApiException, SdkException {
		AddRouteRequest addRouteRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AddRouteResponse> response = api.addRoutePost(addRouteRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addRoutePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.addRoutePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addRouteTableSubnetGetTest() throws ApiException, SdkException {
		AddRouteTableSubnetRequest addRouteTableSubnetRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AddRouteTableSubnetResponse> response = api.addRouteTableSubnetGet(addRouteTableSubnetRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addRouteTableSubnetGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.addRouteTableSubnetGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addRouteTableSubnetPostTest() throws ApiException, SdkException {
		AddRouteTableSubnetRequest addRouteTableSubnetRequest = null;

		try {
			// Handler Successful response
			ApiResponse<AddRouteTableSubnetResponse> response = api.addRouteTableSubnetPost(addRouteTableSubnetRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void addRouteTableSubnetPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.addRouteTableSubnetPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createNatGatewayInstanceGetTest() throws ApiException, SdkException {
		CreateNatGatewayInstanceRequest createNatGatewayInstanceRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateNatGatewayInstanceResponse> response = api.createNatGatewayInstanceGet(createNatGatewayInstanceRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createNatGatewayInstanceGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createNatGatewayInstanceGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createNatGatewayInstancePostTest() throws ApiException, SdkException {
		CreateNatGatewayInstanceRequest createNatGatewayInstanceRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateNatGatewayInstanceResponse> response = api.createNatGatewayInstancePost(createNatGatewayInstanceRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createNatGatewayInstancePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createNatGatewayInstancePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createNetworkAclDenyAllowGroupGetTest() throws ApiException, SdkException {
		CreateNetworkAclDenyAllowGroupRequest createNetworkAclDenyAllowGroupRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateNetworkAclDenyAllowGroupResponse> response = api.createNetworkAclDenyAllowGroupGet(createNetworkAclDenyAllowGroupRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createNetworkAclDenyAllowGroupGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createNetworkAclDenyAllowGroupGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createNetworkAclDenyAllowGroupPostTest() throws ApiException, SdkException {
		CreateNetworkAclDenyAllowGroupRequest createNetworkAclDenyAllowGroupRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateNetworkAclDenyAllowGroupResponse> response = api.createNetworkAclDenyAllowGroupPost(createNetworkAclDenyAllowGroupRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createNetworkAclDenyAllowGroupPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createNetworkAclDenyAllowGroupPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createNetworkAclGetTest() throws ApiException, SdkException {
		CreateNetworkAclRequest createNetworkAclRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateNetworkAclResponse> response = api.createNetworkAclGet(createNetworkAclRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createNetworkAclGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createNetworkAclGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createNetworkAclPostTest() throws ApiException, SdkException {
		CreateNetworkAclRequest createNetworkAclRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateNetworkAclResponse> response = api.createNetworkAclPost(createNetworkAclRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createNetworkAclPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createNetworkAclPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createRouteTableGetTest() throws ApiException, SdkException {
		CreateRouteTableRequest createRouteTableRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateRouteTableResponse> response = api.createRouteTableGet(createRouteTableRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createRouteTableGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createRouteTableGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createRouteTablePostTest() throws ApiException, SdkException {
		CreateRouteTableRequest createRouteTableRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateRouteTableResponse> response = api.createRouteTablePost(createRouteTableRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createRouteTablePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createRouteTablePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createSubnetGetTest() throws ApiException, SdkException {
		CreateSubnetRequest createSubnetRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateSubnetResponse> response = api.createSubnetGet(createSubnetRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createSubnetGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createSubnetGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createSubnetPostTest() throws ApiException, SdkException {
		CreateSubnetRequest createSubnetRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateSubnetResponse> response = api.createSubnetPost(createSubnetRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createSubnetPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createSubnetPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createVpcGetTest() throws ApiException, SdkException {
		CreateVpcRequest createVpcRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateVpcResponse> response = api.createVpcGet(createVpcRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createVpcGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createVpcGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createVpcPeeringInstanceGetTest() throws ApiException, SdkException {
		CreateVpcPeeringInstanceRequest createVpcPeeringInstanceRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateVpcPeeringInstanceResponse> response = api.createVpcPeeringInstanceGet(createVpcPeeringInstanceRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createVpcPeeringInstanceGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createVpcPeeringInstanceGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createVpcPeeringInstancePostTest() throws ApiException, SdkException {
		CreateVpcPeeringInstanceRequest createVpcPeeringInstanceRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateVpcPeeringInstanceResponse> response = api.createVpcPeeringInstancePost(createVpcPeeringInstanceRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createVpcPeeringInstancePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createVpcPeeringInstancePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createVpcPostTest() throws ApiException, SdkException {
		CreateVpcRequest createVpcRequest = null;

		try {
			// Handler Successful response
			ApiResponse<CreateVpcResponse> response = api.createVpcPost(createVpcRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void createVpcPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.createVpcPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteNatGatewayInstanceGetTest() throws ApiException, SdkException {
		DeleteNatGatewayInstanceRequest deleteNatGatewayInstanceRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteNatGatewayInstanceResponse> response = api.deleteNatGatewayInstanceGet(deleteNatGatewayInstanceRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteNatGatewayInstanceGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteNatGatewayInstanceGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteNatGatewayInstancePostTest() throws ApiException, SdkException {
		DeleteNatGatewayInstanceRequest deleteNatGatewayInstanceRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteNatGatewayInstanceResponse> response = api.deleteNatGatewayInstancePost(deleteNatGatewayInstanceRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteNatGatewayInstancePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteNatGatewayInstancePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteNetworkAclDenyAllowGroupGetTest() throws ApiException, SdkException {
		DeleteNetworkAclDenyAllowGroupRequest deleteNetworkAclDenyAllowGroupRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteNetworkAclDenyAllowGroupResponse> response = api.deleteNetworkAclDenyAllowGroupGet(deleteNetworkAclDenyAllowGroupRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteNetworkAclDenyAllowGroupGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteNetworkAclDenyAllowGroupGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteNetworkAclDenyAllowGroupPostTest() throws ApiException, SdkException {
		DeleteNetworkAclDenyAllowGroupRequest deleteNetworkAclDenyAllowGroupRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteNetworkAclDenyAllowGroupResponse> response = api.deleteNetworkAclDenyAllowGroupPost(deleteNetworkAclDenyAllowGroupRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteNetworkAclDenyAllowGroupPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteNetworkAclDenyAllowGroupPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteNetworkAclGetTest() throws ApiException, SdkException {
		DeleteNetworkAclRequest deleteNetworkAclRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteNetworkAclResponse> response = api.deleteNetworkAclGet(deleteNetworkAclRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteNetworkAclGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteNetworkAclGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteNetworkAclPostTest() throws ApiException, SdkException {
		DeleteNetworkAclRequest deleteNetworkAclRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteNetworkAclResponse> response = api.deleteNetworkAclPost(deleteNetworkAclRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteNetworkAclPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteNetworkAclPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteRouteTableGetTest() throws ApiException, SdkException {
		DeleteRouteTableRequest deleteRouteTableRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteRouteTableResponse> response = api.deleteRouteTableGet(deleteRouteTableRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteRouteTableGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteRouteTableGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteRouteTablePostTest() throws ApiException, SdkException {
		DeleteRouteTableRequest deleteRouteTableRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteRouteTableResponse> response = api.deleteRouteTablePost(deleteRouteTableRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteRouteTablePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteRouteTablePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteSubnetGetTest() throws ApiException, SdkException {
		DeleteSubnetRequest deleteSubnetRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteSubnetResponse> response = api.deleteSubnetGet(deleteSubnetRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteSubnetGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteSubnetGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteSubnetPostTest() throws ApiException, SdkException {
		DeleteSubnetRequest deleteSubnetRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteSubnetResponse> response = api.deleteSubnetPost(deleteSubnetRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteSubnetPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteSubnetPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteVpcGetTest() throws ApiException, SdkException {
		DeleteVpcRequest deleteVpcRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteVpcResponse> response = api.deleteVpcGet(deleteVpcRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteVpcGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteVpcGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteVpcPeeringInstanceGetTest() throws ApiException, SdkException {
		DeleteVpcPeeringInstanceRequest deleteVpcPeeringInstanceRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteVpcPeeringInstanceResponse> response = api.deleteVpcPeeringInstanceGet(deleteVpcPeeringInstanceRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteVpcPeeringInstanceGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteVpcPeeringInstanceGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteVpcPeeringInstancePostTest() throws ApiException, SdkException {
		DeleteVpcPeeringInstanceRequest deleteVpcPeeringInstanceRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteVpcPeeringInstanceResponse> response = api.deleteVpcPeeringInstancePost(deleteVpcPeeringInstanceRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteVpcPeeringInstancePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteVpcPeeringInstancePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteVpcPostTest() throws ApiException, SdkException {
		DeleteVpcRequest deleteVpcRequest = null;

		try {
			// Handler Successful response
			ApiResponse<DeleteVpcResponse> response = api.deleteVpcPost(deleteVpcRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void deleteVpcPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.deleteVpcPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNatGatewayInstanceDetailGetTest() throws ApiException, SdkException {
		GetNatGatewayInstanceDetailRequest getNatGatewayInstanceDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNatGatewayInstanceDetailResponse> response = api.getNatGatewayInstanceDetailGet(getNatGatewayInstanceDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNatGatewayInstanceDetailGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNatGatewayInstanceDetailGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNatGatewayInstanceDetailPostTest() throws ApiException, SdkException {
		GetNatGatewayInstanceDetailRequest getNatGatewayInstanceDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNatGatewayInstanceDetailResponse> response = api.getNatGatewayInstanceDetailPost(getNatGatewayInstanceDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNatGatewayInstanceDetailPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNatGatewayInstanceDetailPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNatGatewayInstanceListGetTest() throws ApiException, SdkException {
		GetNatGatewayInstanceListRequest getNatGatewayInstanceListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNatGatewayInstanceListResponse> response = api.getNatGatewayInstanceListGet(getNatGatewayInstanceListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNatGatewayInstanceListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNatGatewayInstanceListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNatGatewayInstanceListPostTest() throws ApiException, SdkException {
		GetNatGatewayInstanceListRequest getNatGatewayInstanceListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNatGatewayInstanceListResponse> response = api.getNatGatewayInstanceListPost(getNatGatewayInstanceListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNatGatewayInstanceListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNatGatewayInstanceListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclDenyAllowGroupDetailGetTest() throws ApiException, SdkException {
		GetNetworkAclDenyAllowGroupDetailRequest getNetworkAclDenyAllowGroupDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNetworkAclDenyAllowGroupDetailResponse> response = api.getNetworkAclDenyAllowGroupDetailGet(getNetworkAclDenyAllowGroupDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclDenyAllowGroupDetailGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNetworkAclDenyAllowGroupDetailGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclDenyAllowGroupDetailPostTest() throws ApiException, SdkException {
		GetNetworkAclDenyAllowGroupDetailRequest getNetworkAclDenyAllowGroupDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNetworkAclDenyAllowGroupDetailResponse> response = api.getNetworkAclDenyAllowGroupDetailPost(getNetworkAclDenyAllowGroupDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclDenyAllowGroupDetailPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNetworkAclDenyAllowGroupDetailPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclDenyAllowGroupListGetTest() throws ApiException, SdkException {
		GetNetworkAclDenyAllowGroupListRequest getNetworkAclDenyAllowGroupListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNetworkAclDenyAllowGroupListResponse> response = api.getNetworkAclDenyAllowGroupListGet(getNetworkAclDenyAllowGroupListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclDenyAllowGroupListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNetworkAclDenyAllowGroupListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclDenyAllowGroupListPostTest() throws ApiException, SdkException {
		GetNetworkAclDenyAllowGroupListRequest getNetworkAclDenyAllowGroupListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNetworkAclDenyAllowGroupListResponse> response = api.getNetworkAclDenyAllowGroupListPost(getNetworkAclDenyAllowGroupListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclDenyAllowGroupListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNetworkAclDenyAllowGroupListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclDetailGetTest() throws ApiException, SdkException {
		GetNetworkAclDetailRequest getNetworkAclDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNetworkAclDetailResponse> response = api.getNetworkAclDetailGet(getNetworkAclDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclDetailGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNetworkAclDetailGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclDetailPostTest() throws ApiException, SdkException {
		GetNetworkAclDetailRequest getNetworkAclDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNetworkAclDetailResponse> response = api.getNetworkAclDetailPost(getNetworkAclDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclDetailPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNetworkAclDetailPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclListGetTest() throws ApiException, SdkException {
		GetNetworkAclListRequest getNetworkAclListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNetworkAclListResponse> response = api.getNetworkAclListGet(getNetworkAclListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNetworkAclListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclListPostTest() throws ApiException, SdkException {
		GetNetworkAclListRequest getNetworkAclListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNetworkAclListResponse> response = api.getNetworkAclListPost(getNetworkAclListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNetworkAclListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclRuleListGetTest() throws ApiException, SdkException {
		GetNetworkAclRuleListRequest getNetworkAclRuleListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNetworkAclRuleListResponse> response = api.getNetworkAclRuleListGet(getNetworkAclRuleListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclRuleListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNetworkAclRuleListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclRuleListPostTest() throws ApiException, SdkException {
		GetNetworkAclRuleListRequest getNetworkAclRuleListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetNetworkAclRuleListResponse> response = api.getNetworkAclRuleListPost(getNetworkAclRuleListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getNetworkAclRuleListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getNetworkAclRuleListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteListGetTest() throws ApiException, SdkException {
		GetRouteListRequest getRouteListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetRouteListResponse> response = api.getRouteListGet(getRouteListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getRouteListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteListPostTest() throws ApiException, SdkException {
		GetRouteListRequest getRouteListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetRouteListResponse> response = api.getRouteListPost(getRouteListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getRouteListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteTableDetailGetTest() throws ApiException, SdkException {
		GetRouteTableDetailRequest getRouteTableDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetRouteTableDetailResponse> response = api.getRouteTableDetailGet(getRouteTableDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteTableDetailGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getRouteTableDetailGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteTableDetailPostTest() throws ApiException, SdkException {
		GetRouteTableDetailRequest getRouteTableDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetRouteTableDetailResponse> response = api.getRouteTableDetailPost(getRouteTableDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteTableDetailPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getRouteTableDetailPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteTableListGetTest() throws ApiException, SdkException {
		GetRouteTableListRequest getRouteTableListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetRouteTableListResponse> response = api.getRouteTableListGet(getRouteTableListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteTableListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getRouteTableListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteTableListPostTest() throws ApiException, SdkException {
		GetRouteTableListRequest getRouteTableListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetRouteTableListResponse> response = api.getRouteTableListPost(getRouteTableListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteTableListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getRouteTableListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteTableSubnetListGetTest() throws ApiException, SdkException {
		GetRouteTableSubnetListRequest getRouteTableSubnetListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetRouteTableSubnetListResponse> response = api.getRouteTableSubnetListGet(getRouteTableSubnetListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteTableSubnetListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getRouteTableSubnetListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteTableSubnetListPostTest() throws ApiException, SdkException {
		GetRouteTableSubnetListRequest getRouteTableSubnetListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetRouteTableSubnetListResponse> response = api.getRouteTableSubnetListPost(getRouteTableSubnetListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getRouteTableSubnetListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getRouteTableSubnetListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getSubnetDetailGetTest() throws ApiException, SdkException {
		GetSubnetDetailRequest getSubnetDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetSubnetDetailResponse> response = api.getSubnetDetailGet(getSubnetDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getSubnetDetailGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getSubnetDetailGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getSubnetDetailPostTest() throws ApiException, SdkException {
		GetSubnetDetailRequest getSubnetDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetSubnetDetailResponse> response = api.getSubnetDetailPost(getSubnetDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getSubnetDetailPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getSubnetDetailPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getSubnetListGetTest() throws ApiException, SdkException {
		GetSubnetListRequest getSubnetListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetSubnetListResponse> response = api.getSubnetListGet(getSubnetListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getSubnetListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getSubnetListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getSubnetListPostTest() throws ApiException, SdkException {
		GetSubnetListRequest getSubnetListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetSubnetListResponse> response = api.getSubnetListPost(getSubnetListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getSubnetListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getSubnetListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcDetailGetTest() throws ApiException, SdkException {
		GetVpcDetailRequest getVpcDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetVpcDetailResponse> response = api.getVpcDetailGet(getVpcDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcDetailGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getVpcDetailGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcDetailPostTest() throws ApiException, SdkException {
		GetVpcDetailRequest getVpcDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetVpcDetailResponse> response = api.getVpcDetailPost(getVpcDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcDetailPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getVpcDetailPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcListGetTest() throws ApiException, SdkException {
		GetVpcListRequest getVpcListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetVpcListResponse> response = api.getVpcListGet(getVpcListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getVpcListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcListPostTest() throws ApiException, SdkException {
		GetVpcListRequest getVpcListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetVpcListResponse> response = api.getVpcListPost(getVpcListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getVpcListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcPeeringInstanceDetailGetTest() throws ApiException, SdkException {
		GetVpcPeeringInstanceDetailRequest getVpcPeeringInstanceDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetVpcPeeringInstanceDetailResponse> response = api.getVpcPeeringInstanceDetailGet(getVpcPeeringInstanceDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcPeeringInstanceDetailGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getVpcPeeringInstanceDetailGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcPeeringInstanceDetailPostTest() throws ApiException, SdkException {
		GetVpcPeeringInstanceDetailRequest getVpcPeeringInstanceDetailRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetVpcPeeringInstanceDetailResponse> response = api.getVpcPeeringInstanceDetailPost(getVpcPeeringInstanceDetailRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcPeeringInstanceDetailPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getVpcPeeringInstanceDetailPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcPeeringInstanceListGetTest() throws ApiException, SdkException {
		GetVpcPeeringInstanceListRequest getVpcPeeringInstanceListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetVpcPeeringInstanceListResponse> response = api.getVpcPeeringInstanceListGet(getVpcPeeringInstanceListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcPeeringInstanceListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getVpcPeeringInstanceListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcPeeringInstanceListPostTest() throws ApiException, SdkException {
		GetVpcPeeringInstanceListRequest getVpcPeeringInstanceListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<GetVpcPeeringInstanceListResponse> response = api.getVpcPeeringInstanceListPost(getVpcPeeringInstanceListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void getVpcPeeringInstanceListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.getVpcPeeringInstanceListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeNetworkAclInboundRuleGetTest() throws ApiException, SdkException {
		RemoveNetworkAclInboundRuleRequest removeNetworkAclInboundRuleRequest = null;

		try {
			// Handler Successful response
			ApiResponse<RemoveNetworkAclInboundRuleResponse> response = api.removeNetworkAclInboundRuleGet(removeNetworkAclInboundRuleRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeNetworkAclInboundRuleGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.removeNetworkAclInboundRuleGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeNetworkAclInboundRulePostTest() throws ApiException, SdkException {
		RemoveNetworkAclInboundRuleRequest removeNetworkAclInboundRuleRequest = null;

		try {
			// Handler Successful response
			ApiResponse<RemoveNetworkAclInboundRuleResponse> response = api.removeNetworkAclInboundRulePost(removeNetworkAclInboundRuleRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeNetworkAclInboundRulePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.removeNetworkAclInboundRulePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeNetworkAclOutboundRuleGetTest() throws ApiException, SdkException {
		RemoveNetworkAclOutboundRuleRequest removeNetworkAclOutboundRuleRequest = null;

		try {
			// Handler Successful response
			ApiResponse<RemoveNetworkAclOutboundRuleResponse> response = api.removeNetworkAclOutboundRuleGet(removeNetworkAclOutboundRuleRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeNetworkAclOutboundRuleGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.removeNetworkAclOutboundRuleGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeNetworkAclOutboundRulePostTest() throws ApiException, SdkException {
		RemoveNetworkAclOutboundRuleRequest removeNetworkAclOutboundRuleRequest = null;

		try {
			// Handler Successful response
			ApiResponse<RemoveNetworkAclOutboundRuleResponse> response = api.removeNetworkAclOutboundRulePost(removeNetworkAclOutboundRuleRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeNetworkAclOutboundRulePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.removeNetworkAclOutboundRulePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeRouteGetTest() throws ApiException, SdkException {
		RemoveRouteRequest removeRouteRequest = null;

		try {
			// Handler Successful response
			ApiResponse<RemoveRouteResponse> response = api.removeRouteGet(removeRouteRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeRouteGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.removeRouteGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeRoutePostTest() throws ApiException, SdkException {
		RemoveRouteRequest removeRouteRequest = null;

		try {
			// Handler Successful response
			ApiResponse<RemoveRouteResponse> response = api.removeRoutePost(removeRouteRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeRoutePostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.removeRoutePost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeRouteTableSubnetGetTest() throws ApiException, SdkException {
		RemoveRouteTableSubnetRequest removeRouteTableSubnetRequest = null;

		try {
			// Handler Successful response
			ApiResponse<RemoveRouteTableSubnetResponse> response = api.removeRouteTableSubnetGet(removeRouteTableSubnetRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeRouteTableSubnetGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.removeRouteTableSubnetGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeRouteTableSubnetPostTest() throws ApiException, SdkException {
		RemoveRouteTableSubnetRequest removeRouteTableSubnetRequest = null;

		try {
			// Handler Successful response
			ApiResponse<RemoveRouteTableSubnetResponse> response = api.removeRouteTableSubnetPost(removeRouteTableSubnetRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void removeRouteTableSubnetPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.removeRouteTableSubnetPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNatGatewayDescriptionGetTest() throws ApiException, SdkException {
		SetNatGatewayDescriptionRequest setNatGatewayDescriptionRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetNatGatewayDescriptionResponse> response = api.setNatGatewayDescriptionGet(setNatGatewayDescriptionRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNatGatewayDescriptionGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setNatGatewayDescriptionGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNatGatewayDescriptionPostTest() throws ApiException, SdkException {
		SetNatGatewayDescriptionRequest setNatGatewayDescriptionRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetNatGatewayDescriptionResponse> response = api.setNatGatewayDescriptionPost(setNatGatewayDescriptionRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNatGatewayDescriptionPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setNatGatewayDescriptionPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNetworkAclDenyAllowGroupDescriptionGetTest() throws ApiException, SdkException {
		SetNetworkAclDenyAllowGroupDescriptionRequest setNetworkAclDenyAllowGroupDescriptionRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetNetworkAclDenyAllowGroupDescriptionResponse> response = api.setNetworkAclDenyAllowGroupDescriptionGet(setNetworkAclDenyAllowGroupDescriptionRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNetworkAclDenyAllowGroupDescriptionGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setNetworkAclDenyAllowGroupDescriptionGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNetworkAclDenyAllowGroupDescriptionPostTest() throws ApiException, SdkException {
		SetNetworkAclDenyAllowGroupDescriptionRequest setNetworkAclDenyAllowGroupDescriptionRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetNetworkAclDenyAllowGroupDescriptionResponse> response = api.setNetworkAclDenyAllowGroupDescriptionPost(setNetworkAclDenyAllowGroupDescriptionRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNetworkAclDenyAllowGroupDescriptionPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setNetworkAclDenyAllowGroupDescriptionPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNetworkAclDenyAllowGroupIpListGetTest() throws ApiException, SdkException {
		SetNetworkAclDenyAllowGroupIpListRequest setNetworkAclDenyAllowGroupIpListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetNetworkAclDenyAllowGroupIpListResponse> response = api.setNetworkAclDenyAllowGroupIpListGet(setNetworkAclDenyAllowGroupIpListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNetworkAclDenyAllowGroupIpListGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setNetworkAclDenyAllowGroupIpListGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNetworkAclDenyAllowGroupIpListPostTest() throws ApiException, SdkException {
		SetNetworkAclDenyAllowGroupIpListRequest setNetworkAclDenyAllowGroupIpListRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetNetworkAclDenyAllowGroupIpListResponse> response = api.setNetworkAclDenyAllowGroupIpListPost(setNetworkAclDenyAllowGroupIpListRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNetworkAclDenyAllowGroupIpListPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setNetworkAclDenyAllowGroupIpListPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNetworkAclDescriptionGetTest() throws ApiException, SdkException {
		SetNetworkAclDescriptionRequest setNetworkAclDescriptionRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetNetworkAclDescriptionResponse> response = api.setNetworkAclDescriptionGet(setNetworkAclDescriptionRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNetworkAclDescriptionGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setNetworkAclDescriptionGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNetworkAclDescriptionPostTest() throws ApiException, SdkException {
		SetNetworkAclDescriptionRequest setNetworkAclDescriptionRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetNetworkAclDescriptionResponse> response = api.setNetworkAclDescriptionPost(setNetworkAclDescriptionRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setNetworkAclDescriptionPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setNetworkAclDescriptionPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setRouteTableDescriptionGetTest() throws ApiException, SdkException {
		SetRouteTableDescriptionRequest setRouteTableDescriptionRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetRouteTableDescriptionResponse> response = api.setRouteTableDescriptionGet(setRouteTableDescriptionRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setRouteTableDescriptionGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setRouteTableDescriptionGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setRouteTableDescriptionPostTest() throws ApiException, SdkException {
		SetRouteTableDescriptionRequest setRouteTableDescriptionRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetRouteTableDescriptionResponse> response = api.setRouteTableDescriptionPost(setRouteTableDescriptionRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setRouteTableDescriptionPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setRouteTableDescriptionPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setSubnetNetworkAclGetTest() throws ApiException, SdkException {
		SetSubnetNetworkAclRequest setSubnetNetworkAclRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetSubnetNetworkAclResponse> response = api.setSubnetNetworkAclGet(setSubnetNetworkAclRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setSubnetNetworkAclGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setSubnetNetworkAclGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setSubnetNetworkAclPostTest() throws ApiException, SdkException {
		SetSubnetNetworkAclRequest setSubnetNetworkAclRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetSubnetNetworkAclResponse> response = api.setSubnetNetworkAclPost(setSubnetNetworkAclRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setSubnetNetworkAclPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setSubnetNetworkAclPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setVpcPeeringDescriptionGetTest() throws ApiException, SdkException {
		SetVpcPeeringDescriptionRequest setVpcPeeringDescriptionRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetVpcPeeringDescriptionResponse> response = api.setVpcPeeringDescriptionGet(setVpcPeeringDescriptionRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setVpcPeeringDescriptionGetGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setVpcPeeringDescriptionGet(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setVpcPeeringDescriptionPostTest() throws ApiException, SdkException {
		SetVpcPeeringDescriptionRequest setVpcPeeringDescriptionRequest = null;

		try {
			// Handler Successful response
			ApiResponse<SetVpcPeeringDescriptionResponse> response = api.setVpcPeeringDescriptionPost(setVpcPeeringDescriptionRequest);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 
	 * @throws ApiException if response fails
	 * @throws SdkException if fails to make API call
	 */
	@Test
	public void setVpcPeeringDescriptionPostGenericTest() throws ApiException, SdkException {
		// path

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// body
		byte[] requestBody = null;

		try {
			// Handler Successful response
			ApiResponse<byte[]> response = api.setVpcPeeringDescriptionPost(httpHeaders, queryParams, formParams, requestBody);
		} catch (ApiException e) {
			// Handler Failed response
			int statusCode = e.getHttpStatusCode();
			Map<String, List<String>> responseHeaders = e.getHttpHeaders();
			InputStream byteStream = e.getByteStream();
			e.printStackTrace();
		} catch (SdkException e) {
			// Handle exceptions that occurred before communication with the server
			e.printStackTrace();
		}
	}
	
}
