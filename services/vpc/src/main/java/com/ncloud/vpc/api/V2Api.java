/*
 * vpc
 * VPC Network 관련 API<br/>https://ncloud.apigw.ntruss.com/vpc/v2
 *
 * NBP corp.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.vpc.api;

import java.util.HashMap;
import java.util.Map;

import com.ncloud.ApiClient;
import com.ncloud.ApiRequest;
import com.ncloud.ApiResponse;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.vpc.model.AcceptOrRejectVpcPeeringRequest;
import com.ncloud.vpc.model.AcceptOrRejectVpcPeeringResponse;
import com.ncloud.vpc.model.AddNetworkAclInboundRuleRequest;
import com.ncloud.vpc.model.AddNetworkAclInboundRuleResponse;
import com.ncloud.vpc.model.AddNetworkAclOutboundRuleRequest;
import com.ncloud.vpc.model.AddNetworkAclOutboundRuleResponse;
import com.ncloud.vpc.model.AddRouteRequest;
import com.ncloud.vpc.model.AddRouteResponse;
import com.ncloud.vpc.model.AddRouteTableSubnetRequest;
import com.ncloud.vpc.model.AddRouteTableSubnetResponse;
import com.ncloud.vpc.model.CreateNatGatewayInstanceRequest;
import com.ncloud.vpc.model.CreateNatGatewayInstanceResponse;
import com.ncloud.vpc.model.CreateNetworkAclRequest;
import com.ncloud.vpc.model.CreateNetworkAclResponse;
import com.ncloud.vpc.model.CreateRouteTableRequest;
import com.ncloud.vpc.model.CreateRouteTableResponse;
import com.ncloud.vpc.model.CreateSubnetRequest;
import com.ncloud.vpc.model.CreateSubnetResponse;
import com.ncloud.vpc.model.CreateVpcPeeringInstanceRequest;
import com.ncloud.vpc.model.CreateVpcPeeringInstanceResponse;
import com.ncloud.vpc.model.CreateVpcRequest;
import com.ncloud.vpc.model.CreateVpcResponse;
import com.ncloud.vpc.model.DeleteNatGatewayInstanceRequest;
import com.ncloud.vpc.model.DeleteNatGatewayInstanceResponse;
import com.ncloud.vpc.model.DeleteNetworkAclRequest;
import com.ncloud.vpc.model.DeleteNetworkAclResponse;
import com.ncloud.vpc.model.DeleteRouteTableRequest;
import com.ncloud.vpc.model.DeleteRouteTableResponse;
import com.ncloud.vpc.model.DeleteSubnetRequest;
import com.ncloud.vpc.model.DeleteSubnetResponse;
import com.ncloud.vpc.model.DeleteVpcPeeringInstanceRequest;
import com.ncloud.vpc.model.DeleteVpcPeeringInstanceResponse;
import com.ncloud.vpc.model.DeleteVpcRequest;
import com.ncloud.vpc.model.DeleteVpcResponse;
import com.ncloud.vpc.model.GetNatGatewayInstanceDetailRequest;
import com.ncloud.vpc.model.GetNatGatewayInstanceDetailResponse;
import com.ncloud.vpc.model.GetNatGatewayInstanceListRequest;
import com.ncloud.vpc.model.GetNatGatewayInstanceListResponse;
import com.ncloud.vpc.model.GetNetworkAclDetailRequest;
import com.ncloud.vpc.model.GetNetworkAclDetailResponse;
import com.ncloud.vpc.model.GetNetworkAclListRequest;
import com.ncloud.vpc.model.GetNetworkAclListResponse;
import com.ncloud.vpc.model.GetNetworkAclRuleListRequest;
import com.ncloud.vpc.model.GetNetworkAclRuleListResponse;
import com.ncloud.vpc.model.GetRouteListRequest;
import com.ncloud.vpc.model.GetRouteListResponse;
import com.ncloud.vpc.model.GetRouteTableDetailRequest;
import com.ncloud.vpc.model.GetRouteTableDetailResponse;
import com.ncloud.vpc.model.GetRouteTableListRequest;
import com.ncloud.vpc.model.GetRouteTableListResponse;
import com.ncloud.vpc.model.GetRouteTableSubnetListRequest;
import com.ncloud.vpc.model.GetRouteTableSubnetListResponse;
import com.ncloud.vpc.model.GetSubnetDetailRequest;
import com.ncloud.vpc.model.GetSubnetDetailResponse;
import com.ncloud.vpc.model.GetSubnetListRequest;
import com.ncloud.vpc.model.GetSubnetListResponse;
import com.ncloud.vpc.model.GetVpcDetailRequest;
import com.ncloud.vpc.model.GetVpcDetailResponse;
import com.ncloud.vpc.model.GetVpcListRequest;
import com.ncloud.vpc.model.GetVpcListResponse;
import com.ncloud.vpc.model.GetVpcPeeringInstanceDetailRequest;
import com.ncloud.vpc.model.GetVpcPeeringInstanceDetailResponse;
import com.ncloud.vpc.model.GetVpcPeeringInstanceListRequest;
import com.ncloud.vpc.model.GetVpcPeeringInstanceListResponse;
import com.ncloud.vpc.model.RemoveNetworkAclInboundRuleRequest;
import com.ncloud.vpc.model.RemoveNetworkAclInboundRuleResponse;
import com.ncloud.vpc.model.RemoveNetworkAclOutboundRuleRequest;
import com.ncloud.vpc.model.RemoveNetworkAclOutboundRuleResponse;
import com.ncloud.vpc.model.RemoveRouteRequest;
import com.ncloud.vpc.model.RemoveRouteResponse;
import com.ncloud.vpc.model.RemoveRouteTableSubnetRequest;
import com.ncloud.vpc.model.RemoveRouteTableSubnetResponse;
import com.ncloud.vpc.model.SetNatGatewayDescriptionRequest;
import com.ncloud.vpc.model.SetNatGatewayDescriptionResponse;
import com.ncloud.vpc.model.SetNetworkAclDescriptionRequest;
import com.ncloud.vpc.model.SetNetworkAclDescriptionResponse;
import com.ncloud.vpc.model.SetRouteTableDescriptionRequest;
import com.ncloud.vpc.model.SetRouteTableDescriptionResponse;
import com.ncloud.vpc.model.SetSubnetNetworkAclRequest;
import com.ncloud.vpc.model.SetSubnetNetworkAclResponse;
import com.ncloud.vpc.model.SetVpcPeeringDescriptionRequest;
import com.ncloud.vpc.model.SetVpcPeeringDescriptionResponse;

public class V2Api {

	private final String basePath = "/vpc/v2";

	private final ApiClient apiClient;

	public V2Api(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	/**
	 * 
	 * VPCPeering요청수락거절
	 * @param acceptOrRejectVpcPeeringRequest acceptOrRejectVpcPeeringRequest (required)
	 * @return AcceptOrRejectVpcPeeringResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AcceptOrRejectVpcPeeringResponse> acceptOrRejectVpcPeeringGet(AcceptOrRejectVpcPeeringRequest acceptOrRejectVpcPeeringRequest) throws ApiException, SdkException {
		
		// path
		String path = "/acceptOrRejectVpcPeering";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, acceptOrRejectVpcPeeringRequest, true, false);
		return apiClient.call(apiRequest, AcceptOrRejectVpcPeeringResponse.class);
	}

	/**
	 * 
	 * VPCPeering요청수락거절
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	acceptOrRejectVpcPeeringRequest acceptOrRejectVpcPeeringRequest (required)
	 * @return byte[]
	 *	AcceptOrRejectVpcPeeringResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> acceptOrRejectVpcPeeringGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/acceptOrRejectVpcPeering";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPCPeering요청수락거절
	 * @param acceptOrRejectVpcPeeringRequest acceptOrRejectVpcPeeringRequest (required)
	 * @return AcceptOrRejectVpcPeeringResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AcceptOrRejectVpcPeeringResponse> acceptOrRejectVpcPeeringPost(AcceptOrRejectVpcPeeringRequest acceptOrRejectVpcPeeringRequest) throws ApiException, SdkException {
		
		// path
		String path = "/acceptOrRejectVpcPeering";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, acceptOrRejectVpcPeeringRequest, true, false);
		return apiClient.call(apiRequest, AcceptOrRejectVpcPeeringResponse.class);
	}

	/**
	 * 
	 * VPCPeering요청수락거절
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	acceptOrRejectVpcPeeringRequest acceptOrRejectVpcPeeringRequest (required)
	 * @return byte[]
	 *	AcceptOrRejectVpcPeeringResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> acceptOrRejectVpcPeeringPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/acceptOrRejectVpcPeering";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACLInboundRule추가
	 * @param addNetworkAclInboundRuleRequest addNetworkAclInboundRuleRequest (required)
	 * @return AddNetworkAclInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddNetworkAclInboundRuleResponse> addNetworkAclInboundRuleGet(AddNetworkAclInboundRuleRequest addNetworkAclInboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addNetworkAclInboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addNetworkAclInboundRuleRequest, true, false);
		return apiClient.call(apiRequest, AddNetworkAclInboundRuleResponse.class);
	}

	/**
	 * 
	 * 네트워크ACLInboundRule추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addNetworkAclInboundRuleRequest addNetworkAclInboundRuleRequest (required)
	 * @return byte[]
	 *	AddNetworkAclInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addNetworkAclInboundRuleGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addNetworkAclInboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACLInboundRule추가
	 * @param addNetworkAclInboundRuleRequest addNetworkAclInboundRuleRequest (required)
	 * @return AddNetworkAclInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddNetworkAclInboundRuleResponse> addNetworkAclInboundRulePost(AddNetworkAclInboundRuleRequest addNetworkAclInboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addNetworkAclInboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addNetworkAclInboundRuleRequest, true, false);
		return apiClient.call(apiRequest, AddNetworkAclInboundRuleResponse.class);
	}

	/**
	 * 
	 * 네트워크ACLInboundRule추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addNetworkAclInboundRuleRequest addNetworkAclInboundRuleRequest (required)
	 * @return byte[]
	 *	AddNetworkAclInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addNetworkAclInboundRulePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addNetworkAclInboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACLOutboundRule추가
	 * @param addNetworkAclOutboundRuleRequest addNetworkAclOutboundRuleRequest (required)
	 * @return AddNetworkAclOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddNetworkAclOutboundRuleResponse> addNetworkAclOutboundRuleGet(AddNetworkAclOutboundRuleRequest addNetworkAclOutboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addNetworkAclOutboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addNetworkAclOutboundRuleRequest, true, false);
		return apiClient.call(apiRequest, AddNetworkAclOutboundRuleResponse.class);
	}

	/**
	 * 
	 * 네트워크ACLOutboundRule추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addNetworkAclOutboundRuleRequest addNetworkAclOutboundRuleRequest (required)
	 * @return byte[]
	 *	AddNetworkAclOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addNetworkAclOutboundRuleGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addNetworkAclOutboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACLOutboundRule추가
	 * @param addNetworkAclOutboundRuleRequest addNetworkAclOutboundRuleRequest (required)
	 * @return AddNetworkAclOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddNetworkAclOutboundRuleResponse> addNetworkAclOutboundRulePost(AddNetworkAclOutboundRuleRequest addNetworkAclOutboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addNetworkAclOutboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addNetworkAclOutboundRuleRequest, true, false);
		return apiClient.call(apiRequest, AddNetworkAclOutboundRuleResponse.class);
	}

	/**
	 * 
	 * 네트워크ACLOutboundRule추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addNetworkAclOutboundRuleRequest addNetworkAclOutboundRuleRequest (required)
	 * @return byte[]
	 *	AddNetworkAclOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addNetworkAclOutboundRulePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addNetworkAclOutboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트추가
	 * @param addRouteRequest addRouteRequest (required)
	 * @return AddRouteResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddRouteResponse> addRouteGet(AddRouteRequest addRouteRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addRoute";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addRouteRequest, true, false);
		return apiClient.call(apiRequest, AddRouteResponse.class);
	}

	/**
	 * 
	 * 라우트추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addRouteRequest addRouteRequest (required)
	 * @return byte[]
	 *	AddRouteResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addRouteGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addRoute";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트추가
	 * @param addRouteRequest addRouteRequest (required)
	 * @return AddRouteResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddRouteResponse> addRoutePost(AddRouteRequest addRouteRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addRoute";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addRouteRequest, true, false);
		return apiClient.call(apiRequest, AddRouteResponse.class);
	}

	/**
	 * 
	 * 라우트추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addRouteRequest addRouteRequest (required)
	 * @return byte[]
	 *	AddRouteResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addRoutePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addRoute";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블의연관서브넷추가
	 * @param addRouteTableSubnetRequest addRouteTableSubnetRequest (required)
	 * @return AddRouteTableSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddRouteTableSubnetResponse> addRouteTableSubnetGet(AddRouteTableSubnetRequest addRouteTableSubnetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addRouteTableSubnet";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addRouteTableSubnetRequest, true, false);
		return apiClient.call(apiRequest, AddRouteTableSubnetResponse.class);
	}

	/**
	 * 
	 * 라우트테이블의연관서브넷추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addRouteTableSubnetRequest addRouteTableSubnetRequest (required)
	 * @return byte[]
	 *	AddRouteTableSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addRouteTableSubnetGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addRouteTableSubnet";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블의연관서브넷추가
	 * @param addRouteTableSubnetRequest addRouteTableSubnetRequest (required)
	 * @return AddRouteTableSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddRouteTableSubnetResponse> addRouteTableSubnetPost(AddRouteTableSubnetRequest addRouteTableSubnetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addRouteTableSubnet";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addRouteTableSubnetRequest, true, false);
		return apiClient.call(apiRequest, AddRouteTableSubnetResponse.class);
	}

	/**
	 * 
	 * 라우트테이블의연관서브넷추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addRouteTableSubnetRequest addRouteTableSubnetRequest (required)
	 * @return byte[]
	 *	AddRouteTableSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addRouteTableSubnetPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addRouteTableSubnet";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NATGateway인스턴스생성
	 * @param createNatGatewayInstanceRequest createNatGatewayInstanceRequest (required)
	 * @return CreateNatGatewayInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNatGatewayInstanceResponse> createNatGatewayInstanceGet(CreateNatGatewayInstanceRequest createNatGatewayInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNatGatewayInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createNatGatewayInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateNatGatewayInstanceResponse.class);
	}

	/**
	 * 
	 * NATGateway인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNatGatewayInstanceRequest createNatGatewayInstanceRequest (required)
	 * @return byte[]
	 *	CreateNatGatewayInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNatGatewayInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNatGatewayInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NATGateway인스턴스생성
	 * @param createNatGatewayInstanceRequest createNatGatewayInstanceRequest (required)
	 * @return CreateNatGatewayInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNatGatewayInstanceResponse> createNatGatewayInstancePost(CreateNatGatewayInstanceRequest createNatGatewayInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNatGatewayInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createNatGatewayInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateNatGatewayInstanceResponse.class);
	}

	/**
	 * 
	 * NATGateway인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNatGatewayInstanceRequest createNatGatewayInstanceRequest (required)
	 * @return byte[]
	 *	CreateNatGatewayInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNatGatewayInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNatGatewayInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACL생성
	 * @param createNetworkAclRequest createNetworkAclRequest (required)
	 * @return CreateNetworkAclResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNetworkAclResponse> createNetworkAclGet(CreateNetworkAclRequest createNetworkAclRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNetworkAcl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createNetworkAclRequest, true, false);
		return apiClient.call(apiRequest, CreateNetworkAclResponse.class);
	}

	/**
	 * 
	 * 네트워크ACL생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNetworkAclRequest createNetworkAclRequest (required)
	 * @return byte[]
	 *	CreateNetworkAclResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNetworkAclGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNetworkAcl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACL생성
	 * @param createNetworkAclRequest createNetworkAclRequest (required)
	 * @return CreateNetworkAclResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNetworkAclResponse> createNetworkAclPost(CreateNetworkAclRequest createNetworkAclRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNetworkAcl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createNetworkAclRequest, true, false);
		return apiClient.call(apiRequest, CreateNetworkAclResponse.class);
	}

	/**
	 * 
	 * 네트워크ACL생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNetworkAclRequest createNetworkAclRequest (required)
	 * @return byte[]
	 *	CreateNetworkAclResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNetworkAclPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNetworkAcl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블생성
	 * @param createRouteTableRequest createRouteTableRequest (required)
	 * @return CreateRouteTableResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateRouteTableResponse> createRouteTableGet(CreateRouteTableRequest createRouteTableRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createRouteTable";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createRouteTableRequest, true, false);
		return apiClient.call(apiRequest, CreateRouteTableResponse.class);
	}

	/**
	 * 
	 * 라우트테이블생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createRouteTableRequest createRouteTableRequest (required)
	 * @return byte[]
	 *	CreateRouteTableResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createRouteTableGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createRouteTable";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블생성
	 * @param createRouteTableRequest createRouteTableRequest (required)
	 * @return CreateRouteTableResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateRouteTableResponse> createRouteTablePost(CreateRouteTableRequest createRouteTableRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createRouteTable";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createRouteTableRequest, true, false);
		return apiClient.call(apiRequest, CreateRouteTableResponse.class);
	}

	/**
	 * 
	 * 라우트테이블생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createRouteTableRequest createRouteTableRequest (required)
	 * @return byte[]
	 *	CreateRouteTableResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createRouteTablePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createRouteTable";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서브넷생성
	 * @param createSubnetRequest createSubnetRequest (required)
	 * @return CreateSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateSubnetResponse> createSubnetGet(CreateSubnetRequest createSubnetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createSubnet";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createSubnetRequest, true, false);
		return apiClient.call(apiRequest, CreateSubnetResponse.class);
	}

	/**
	 * 
	 * 서브넷생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createSubnetRequest createSubnetRequest (required)
	 * @return byte[]
	 *	CreateSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createSubnetGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createSubnet";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서브넷생성
	 * @param createSubnetRequest createSubnetRequest (required)
	 * @return CreateSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateSubnetResponse> createSubnetPost(CreateSubnetRequest createSubnetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createSubnet";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createSubnetRequest, true, false);
		return apiClient.call(apiRequest, CreateSubnetResponse.class);
	}

	/**
	 * 
	 * 서브넷생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createSubnetRequest createSubnetRequest (required)
	 * @return byte[]
	 *	CreateSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createSubnetPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createSubnet";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPC생성
	 * @param createVpcRequest createVpcRequest (required)
	 * @return CreateVpcResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateVpcResponse> createVpcGet(CreateVpcRequest createVpcRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createVpc";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createVpcRequest, true, false);
		return apiClient.call(apiRequest, CreateVpcResponse.class);
	}

	/**
	 * 
	 * VPC생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createVpcRequest createVpcRequest (required)
	 * @return byte[]
	 *	CreateVpcResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createVpcGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createVpc";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPCPeering인스턴스생성
	 * @param createVpcPeeringInstanceRequest createVpcPeeringInstanceRequest (required)
	 * @return CreateVpcPeeringInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateVpcPeeringInstanceResponse> createVpcPeeringInstanceGet(CreateVpcPeeringInstanceRequest createVpcPeeringInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createVpcPeeringInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createVpcPeeringInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateVpcPeeringInstanceResponse.class);
	}

	/**
	 * 
	 * VPCPeering인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createVpcPeeringInstanceRequest createVpcPeeringInstanceRequest (required)
	 * @return byte[]
	 *	CreateVpcPeeringInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createVpcPeeringInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createVpcPeeringInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPCPeering인스턴스생성
	 * @param createVpcPeeringInstanceRequest createVpcPeeringInstanceRequest (required)
	 * @return CreateVpcPeeringInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateVpcPeeringInstanceResponse> createVpcPeeringInstancePost(CreateVpcPeeringInstanceRequest createVpcPeeringInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createVpcPeeringInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createVpcPeeringInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateVpcPeeringInstanceResponse.class);
	}

	/**
	 * 
	 * VPCPeering인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createVpcPeeringInstanceRequest createVpcPeeringInstanceRequest (required)
	 * @return byte[]
	 *	CreateVpcPeeringInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createVpcPeeringInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createVpcPeeringInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPC생성
	 * @param createVpcRequest createVpcRequest (required)
	 * @return CreateVpcResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateVpcResponse> createVpcPost(CreateVpcRequest createVpcRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createVpc";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createVpcRequest, true, false);
		return apiClient.call(apiRequest, CreateVpcResponse.class);
	}

	/**
	 * 
	 * VPC생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createVpcRequest createVpcRequest (required)
	 * @return byte[]
	 *	CreateVpcResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createVpcPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createVpc";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NATGateway인스턴스삭제
	 * @param deleteNatGatewayInstanceRequest deleteNatGatewayInstanceRequest (required)
	 * @return DeleteNatGatewayInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNatGatewayInstanceResponse> deleteNatGatewayInstanceGet(DeleteNatGatewayInstanceRequest deleteNatGatewayInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNatGatewayInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteNatGatewayInstanceRequest, true, false);
		return apiClient.call(apiRequest, DeleteNatGatewayInstanceResponse.class);
	}

	/**
	 * 
	 * NATGateway인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNatGatewayInstanceRequest deleteNatGatewayInstanceRequest (required)
	 * @return byte[]
	 *	DeleteNatGatewayInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNatGatewayInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNatGatewayInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NATGateway인스턴스삭제
	 * @param deleteNatGatewayInstanceRequest deleteNatGatewayInstanceRequest (required)
	 * @return DeleteNatGatewayInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNatGatewayInstanceResponse> deleteNatGatewayInstancePost(DeleteNatGatewayInstanceRequest deleteNatGatewayInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNatGatewayInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteNatGatewayInstanceRequest, true, false);
		return apiClient.call(apiRequest, DeleteNatGatewayInstanceResponse.class);
	}

	/**
	 * 
	 * NATGateway인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNatGatewayInstanceRequest deleteNatGatewayInstanceRequest (required)
	 * @return byte[]
	 *	DeleteNatGatewayInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNatGatewayInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNatGatewayInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACL삭제
	 * @param deleteNetworkAclRequest deleteNetworkAclRequest (required)
	 * @return DeleteNetworkAclResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNetworkAclResponse> deleteNetworkAclGet(DeleteNetworkAclRequest deleteNetworkAclRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNetworkAcl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteNetworkAclRequest, true, false);
		return apiClient.call(apiRequest, DeleteNetworkAclResponse.class);
	}

	/**
	 * 
	 * 네트워크ACL삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNetworkAclRequest deleteNetworkAclRequest (required)
	 * @return byte[]
	 *	DeleteNetworkAclResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNetworkAclGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNetworkAcl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACL삭제
	 * @param deleteNetworkAclRequest deleteNetworkAclRequest (required)
	 * @return DeleteNetworkAclResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNetworkAclResponse> deleteNetworkAclPost(DeleteNetworkAclRequest deleteNetworkAclRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNetworkAcl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteNetworkAclRequest, true, false);
		return apiClient.call(apiRequest, DeleteNetworkAclResponse.class);
	}

	/**
	 * 
	 * 네트워크ACL삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNetworkAclRequest deleteNetworkAclRequest (required)
	 * @return byte[]
	 *	DeleteNetworkAclResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNetworkAclPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNetworkAcl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블삭제
	 * @param deleteRouteTableRequest deleteRouteTableRequest (required)
	 * @return DeleteRouteTableResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteRouteTableResponse> deleteRouteTableGet(DeleteRouteTableRequest deleteRouteTableRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteRouteTable";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteRouteTableRequest, true, false);
		return apiClient.call(apiRequest, DeleteRouteTableResponse.class);
	}

	/**
	 * 
	 * 라우트테이블삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteRouteTableRequest deleteRouteTableRequest (required)
	 * @return byte[]
	 *	DeleteRouteTableResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteRouteTableGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteRouteTable";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블삭제
	 * @param deleteRouteTableRequest deleteRouteTableRequest (required)
	 * @return DeleteRouteTableResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteRouteTableResponse> deleteRouteTablePost(DeleteRouteTableRequest deleteRouteTableRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteRouteTable";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteRouteTableRequest, true, false);
		return apiClient.call(apiRequest, DeleteRouteTableResponse.class);
	}

	/**
	 * 
	 * 라우트테이블삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteRouteTableRequest deleteRouteTableRequest (required)
	 * @return byte[]
	 *	DeleteRouteTableResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteRouteTablePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteRouteTable";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서브넷삭제
	 * @param deleteSubnetRequest deleteSubnetRequest (required)
	 * @return DeleteSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteSubnetResponse> deleteSubnetGet(DeleteSubnetRequest deleteSubnetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteSubnet";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteSubnetRequest, true, false);
		return apiClient.call(apiRequest, DeleteSubnetResponse.class);
	}

	/**
	 * 
	 * 서브넷삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteSubnetRequest deleteSubnetRequest (required)
	 * @return byte[]
	 *	DeleteSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteSubnetGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteSubnet";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서브넷삭제
	 * @param deleteSubnetRequest deleteSubnetRequest (required)
	 * @return DeleteSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteSubnetResponse> deleteSubnetPost(DeleteSubnetRequest deleteSubnetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteSubnet";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteSubnetRequest, true, false);
		return apiClient.call(apiRequest, DeleteSubnetResponse.class);
	}

	/**
	 * 
	 * 서브넷삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteSubnetRequest deleteSubnetRequest (required)
	 * @return byte[]
	 *	DeleteSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteSubnetPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteSubnet";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPC삭제
	 * @param deleteVpcRequest deleteVpcRequest (required)
	 * @return DeleteVpcResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteVpcResponse> deleteVpcGet(DeleteVpcRequest deleteVpcRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteVpc";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteVpcRequest, true, false);
		return apiClient.call(apiRequest, DeleteVpcResponse.class);
	}

	/**
	 * 
	 * VPC삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteVpcRequest deleteVpcRequest (required)
	 * @return byte[]
	 *	DeleteVpcResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteVpcGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteVpc";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPCPeering인스턴스삭제
	 * @param deleteVpcPeeringInstanceRequest deleteVpcPeeringInstanceRequest (required)
	 * @return DeleteVpcPeeringInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteVpcPeeringInstanceResponse> deleteVpcPeeringInstanceGet(DeleteVpcPeeringInstanceRequest deleteVpcPeeringInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteVpcPeeringInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteVpcPeeringInstanceRequest, true, false);
		return apiClient.call(apiRequest, DeleteVpcPeeringInstanceResponse.class);
	}

	/**
	 * 
	 * VPCPeering인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteVpcPeeringInstanceRequest deleteVpcPeeringInstanceRequest (required)
	 * @return byte[]
	 *	DeleteVpcPeeringInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteVpcPeeringInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteVpcPeeringInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPCPeering인스턴스삭제
	 * @param deleteVpcPeeringInstanceRequest deleteVpcPeeringInstanceRequest (required)
	 * @return DeleteVpcPeeringInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteVpcPeeringInstanceResponse> deleteVpcPeeringInstancePost(DeleteVpcPeeringInstanceRequest deleteVpcPeeringInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteVpcPeeringInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteVpcPeeringInstanceRequest, true, false);
		return apiClient.call(apiRequest, DeleteVpcPeeringInstanceResponse.class);
	}

	/**
	 * 
	 * VPCPeering인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteVpcPeeringInstanceRequest deleteVpcPeeringInstanceRequest (required)
	 * @return byte[]
	 *	DeleteVpcPeeringInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteVpcPeeringInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteVpcPeeringInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPC삭제
	 * @param deleteVpcRequest deleteVpcRequest (required)
	 * @return DeleteVpcResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteVpcResponse> deleteVpcPost(DeleteVpcRequest deleteVpcRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteVpc";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteVpcRequest, true, false);
		return apiClient.call(apiRequest, DeleteVpcResponse.class);
	}

	/**
	 * 
	 * VPC삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteVpcRequest deleteVpcRequest (required)
	 * @return byte[]
	 *	DeleteVpcResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteVpcPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteVpc";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NATGateway인스턴스상세조회
	 * @param getNatGatewayInstanceDetailRequest getNatGatewayInstanceDetailRequest (required)
	 * @return GetNatGatewayInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNatGatewayInstanceDetailResponse> getNatGatewayInstanceDetailGet(GetNatGatewayInstanceDetailRequest getNatGatewayInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNatGatewayInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNatGatewayInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetNatGatewayInstanceDetailResponse.class);
	}

	/**
	 * 
	 * NATGateway인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNatGatewayInstanceDetailRequest getNatGatewayInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetNatGatewayInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNatGatewayInstanceDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNatGatewayInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NATGateway인스턴스상세조회
	 * @param getNatGatewayInstanceDetailRequest getNatGatewayInstanceDetailRequest (required)
	 * @return GetNatGatewayInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNatGatewayInstanceDetailResponse> getNatGatewayInstanceDetailPost(GetNatGatewayInstanceDetailRequest getNatGatewayInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNatGatewayInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNatGatewayInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetNatGatewayInstanceDetailResponse.class);
	}

	/**
	 * 
	 * NATGateway인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNatGatewayInstanceDetailRequest getNatGatewayInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetNatGatewayInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNatGatewayInstanceDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNatGatewayInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NATGateway인스턴스리스트조회
	 * @param getNatGatewayInstanceListRequest getNatGatewayInstanceListRequest (required)
	 * @return GetNatGatewayInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNatGatewayInstanceListResponse> getNatGatewayInstanceListGet(GetNatGatewayInstanceListRequest getNatGatewayInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNatGatewayInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNatGatewayInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetNatGatewayInstanceListResponse.class);
	}

	/**
	 * 
	 * NATGateway인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNatGatewayInstanceListRequest getNatGatewayInstanceListRequest (required)
	 * @return byte[]
	 *	GetNatGatewayInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNatGatewayInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNatGatewayInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NATGateway인스턴스리스트조회
	 * @param getNatGatewayInstanceListRequest getNatGatewayInstanceListRequest (required)
	 * @return GetNatGatewayInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNatGatewayInstanceListResponse> getNatGatewayInstanceListPost(GetNatGatewayInstanceListRequest getNatGatewayInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNatGatewayInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNatGatewayInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetNatGatewayInstanceListResponse.class);
	}

	/**
	 * 
	 * NATGateway인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNatGatewayInstanceListRequest getNatGatewayInstanceListRequest (required)
	 * @return byte[]
	 *	GetNatGatewayInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNatGatewayInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNatGatewayInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACL상세조회
	 * @param getNetworkAclDetailRequest getNetworkAclDetailRequest (required)
	 * @return GetNetworkAclDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNetworkAclDetailResponse> getNetworkAclDetailGet(GetNetworkAclDetailRequest getNetworkAclDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNetworkAclDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNetworkAclDetailRequest, true, false);
		return apiClient.call(apiRequest, GetNetworkAclDetailResponse.class);
	}

	/**
	 * 
	 * 네트워크ACL상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNetworkAclDetailRequest getNetworkAclDetailRequest (required)
	 * @return byte[]
	 *	GetNetworkAclDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNetworkAclDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNetworkAclDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACL상세조회
	 * @param getNetworkAclDetailRequest getNetworkAclDetailRequest (required)
	 * @return GetNetworkAclDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNetworkAclDetailResponse> getNetworkAclDetailPost(GetNetworkAclDetailRequest getNetworkAclDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNetworkAclDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNetworkAclDetailRequest, true, false);
		return apiClient.call(apiRequest, GetNetworkAclDetailResponse.class);
	}

	/**
	 * 
	 * 네트워크ACL상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNetworkAclDetailRequest getNetworkAclDetailRequest (required)
	 * @return byte[]
	 *	GetNetworkAclDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNetworkAclDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNetworkAclDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACL리스트조회
	 * @param getNetworkAclListRequest getNetworkAclListRequest (required)
	 * @return GetNetworkAclListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNetworkAclListResponse> getNetworkAclListGet(GetNetworkAclListRequest getNetworkAclListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNetworkAclList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNetworkAclListRequest, true, false);
		return apiClient.call(apiRequest, GetNetworkAclListResponse.class);
	}

	/**
	 * 
	 * 네트워크ACL리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNetworkAclListRequest getNetworkAclListRequest (required)
	 * @return byte[]
	 *	GetNetworkAclListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNetworkAclListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNetworkAclList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACL리스트조회
	 * @param getNetworkAclListRequest getNetworkAclListRequest (required)
	 * @return GetNetworkAclListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNetworkAclListResponse> getNetworkAclListPost(GetNetworkAclListRequest getNetworkAclListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNetworkAclList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNetworkAclListRequest, true, false);
		return apiClient.call(apiRequest, GetNetworkAclListResponse.class);
	}

	/**
	 * 
	 * 네트워크ACL리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNetworkAclListRequest getNetworkAclListRequest (required)
	 * @return byte[]
	 *	GetNetworkAclListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNetworkAclListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNetworkAclList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACLRule리스트조회
	 * @param getNetworkAclRuleListRequest getNetworkAclRuleListRequest (required)
	 * @return GetNetworkAclRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNetworkAclRuleListResponse> getNetworkAclRuleListGet(GetNetworkAclRuleListRequest getNetworkAclRuleListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNetworkAclRuleList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNetworkAclRuleListRequest, true, false);
		return apiClient.call(apiRequest, GetNetworkAclRuleListResponse.class);
	}

	/**
	 * 
	 * 네트워크ACLRule리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNetworkAclRuleListRequest getNetworkAclRuleListRequest (required)
	 * @return byte[]
	 *	GetNetworkAclRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNetworkAclRuleListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNetworkAclRuleList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACLRule리스트조회
	 * @param getNetworkAclRuleListRequest getNetworkAclRuleListRequest (required)
	 * @return GetNetworkAclRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNetworkAclRuleListResponse> getNetworkAclRuleListPost(GetNetworkAclRuleListRequest getNetworkAclRuleListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNetworkAclRuleList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNetworkAclRuleListRequest, true, false);
		return apiClient.call(apiRequest, GetNetworkAclRuleListResponse.class);
	}

	/**
	 * 
	 * 네트워크ACLRule리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNetworkAclRuleListRequest getNetworkAclRuleListRequest (required)
	 * @return byte[]
	 *	GetNetworkAclRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNetworkAclRuleListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNetworkAclRuleList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트리스트조회
	 * @param getRouteListRequest getRouteListRequest (required)
	 * @return GetRouteListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRouteListResponse> getRouteListGet(GetRouteListRequest getRouteListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRouteList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getRouteListRequest, true, false);
		return apiClient.call(apiRequest, GetRouteListResponse.class);
	}

	/**
	 * 
	 * 라우트리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRouteListRequest getRouteListRequest (required)
	 * @return byte[]
	 *	GetRouteListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRouteListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRouteList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트리스트조회
	 * @param getRouteListRequest getRouteListRequest (required)
	 * @return GetRouteListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRouteListResponse> getRouteListPost(GetRouteListRequest getRouteListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRouteList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getRouteListRequest, true, false);
		return apiClient.call(apiRequest, GetRouteListResponse.class);
	}

	/**
	 * 
	 * 라우트리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRouteListRequest getRouteListRequest (required)
	 * @return byte[]
	 *	GetRouteListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRouteListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRouteList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블상세조회
	 * @param getRouteTableDetailRequest getRouteTableDetailRequest (required)
	 * @return GetRouteTableDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRouteTableDetailResponse> getRouteTableDetailGet(GetRouteTableDetailRequest getRouteTableDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRouteTableDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getRouteTableDetailRequest, true, false);
		return apiClient.call(apiRequest, GetRouteTableDetailResponse.class);
	}

	/**
	 * 
	 * 라우트테이블상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRouteTableDetailRequest getRouteTableDetailRequest (required)
	 * @return byte[]
	 *	GetRouteTableDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRouteTableDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRouteTableDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블상세조회
	 * @param getRouteTableDetailRequest getRouteTableDetailRequest (required)
	 * @return GetRouteTableDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRouteTableDetailResponse> getRouteTableDetailPost(GetRouteTableDetailRequest getRouteTableDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRouteTableDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getRouteTableDetailRequest, true, false);
		return apiClient.call(apiRequest, GetRouteTableDetailResponse.class);
	}

	/**
	 * 
	 * 라우트테이블상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRouteTableDetailRequest getRouteTableDetailRequest (required)
	 * @return byte[]
	 *	GetRouteTableDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRouteTableDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRouteTableDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블리스트조회
	 * @param getRouteTableListRequest getRouteTableListRequest (required)
	 * @return GetRouteTableListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRouteTableListResponse> getRouteTableListGet(GetRouteTableListRequest getRouteTableListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRouteTableList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getRouteTableListRequest, true, false);
		return apiClient.call(apiRequest, GetRouteTableListResponse.class);
	}

	/**
	 * 
	 * 라우트테이블리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRouteTableListRequest getRouteTableListRequest (required)
	 * @return byte[]
	 *	GetRouteTableListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRouteTableListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRouteTableList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블리스트조회
	 * @param getRouteTableListRequest getRouteTableListRequest (required)
	 * @return GetRouteTableListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRouteTableListResponse> getRouteTableListPost(GetRouteTableListRequest getRouteTableListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRouteTableList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getRouteTableListRequest, true, false);
		return apiClient.call(apiRequest, GetRouteTableListResponse.class);
	}

	/**
	 * 
	 * 라우트테이블리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRouteTableListRequest getRouteTableListRequest (required)
	 * @return byte[]
	 *	GetRouteTableListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRouteTableListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRouteTableList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블에연관된서브넷리스트조회
	 * @param getRouteTableSubnetListRequest getRouteTableSubnetListRequest (required)
	 * @return GetRouteTableSubnetListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRouteTableSubnetListResponse> getRouteTableSubnetListGet(GetRouteTableSubnetListRequest getRouteTableSubnetListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRouteTableSubnetList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getRouteTableSubnetListRequest, true, false);
		return apiClient.call(apiRequest, GetRouteTableSubnetListResponse.class);
	}

	/**
	 * 
	 * 라우트테이블에연관된서브넷리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRouteTableSubnetListRequest getRouteTableSubnetListRequest (required)
	 * @return byte[]
	 *	GetRouteTableSubnetListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRouteTableSubnetListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRouteTableSubnetList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블에연관된서브넷리스트조회
	 * @param getRouteTableSubnetListRequest getRouteTableSubnetListRequest (required)
	 * @return GetRouteTableSubnetListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRouteTableSubnetListResponse> getRouteTableSubnetListPost(GetRouteTableSubnetListRequest getRouteTableSubnetListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRouteTableSubnetList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getRouteTableSubnetListRequest, true, false);
		return apiClient.call(apiRequest, GetRouteTableSubnetListResponse.class);
	}

	/**
	 * 
	 * 라우트테이블에연관된서브넷리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRouteTableSubnetListRequest getRouteTableSubnetListRequest (required)
	 * @return byte[]
	 *	GetRouteTableSubnetListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRouteTableSubnetListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRouteTableSubnetList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서브넷상세조회
	 * @param getSubnetDetailRequest getSubnetDetailRequest (required)
	 * @return GetSubnetDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetSubnetDetailResponse> getSubnetDetailGet(GetSubnetDetailRequest getSubnetDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getSubnetDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getSubnetDetailRequest, true, false);
		return apiClient.call(apiRequest, GetSubnetDetailResponse.class);
	}

	/**
	 * 
	 * 서브넷상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getSubnetDetailRequest getSubnetDetailRequest (required)
	 * @return byte[]
	 *	GetSubnetDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getSubnetDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getSubnetDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서브넷상세조회
	 * @param getSubnetDetailRequest getSubnetDetailRequest (required)
	 * @return GetSubnetDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetSubnetDetailResponse> getSubnetDetailPost(GetSubnetDetailRequest getSubnetDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getSubnetDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getSubnetDetailRequest, true, false);
		return apiClient.call(apiRequest, GetSubnetDetailResponse.class);
	}

	/**
	 * 
	 * 서브넷상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getSubnetDetailRequest getSubnetDetailRequest (required)
	 * @return byte[]
	 *	GetSubnetDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getSubnetDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getSubnetDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서브넷리스트조회
	 * @param getSubnetListRequest getSubnetListRequest (required)
	 * @return GetSubnetListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetSubnetListResponse> getSubnetListGet(GetSubnetListRequest getSubnetListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getSubnetList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getSubnetListRequest, true, false);
		return apiClient.call(apiRequest, GetSubnetListResponse.class);
	}

	/**
	 * 
	 * 서브넷리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getSubnetListRequest getSubnetListRequest (required)
	 * @return byte[]
	 *	GetSubnetListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getSubnetListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getSubnetList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서브넷리스트조회
	 * @param getSubnetListRequest getSubnetListRequest (required)
	 * @return GetSubnetListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetSubnetListResponse> getSubnetListPost(GetSubnetListRequest getSubnetListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getSubnetList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getSubnetListRequest, true, false);
		return apiClient.call(apiRequest, GetSubnetListResponse.class);
	}

	/**
	 * 
	 * 서브넷리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getSubnetListRequest getSubnetListRequest (required)
	 * @return byte[]
	 *	GetSubnetListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getSubnetListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getSubnetList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPC상세조회
	 * @param getVpcDetailRequest getVpcDetailRequest (required)
	 * @return GetVpcDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetVpcDetailResponse> getVpcDetailGet(GetVpcDetailRequest getVpcDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getVpcDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getVpcDetailRequest, true, false);
		return apiClient.call(apiRequest, GetVpcDetailResponse.class);
	}

	/**
	 * 
	 * VPC상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getVpcDetailRequest getVpcDetailRequest (required)
	 * @return byte[]
	 *	GetVpcDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getVpcDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getVpcDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPC상세조회
	 * @param getVpcDetailRequest getVpcDetailRequest (required)
	 * @return GetVpcDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetVpcDetailResponse> getVpcDetailPost(GetVpcDetailRequest getVpcDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getVpcDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getVpcDetailRequest, true, false);
		return apiClient.call(apiRequest, GetVpcDetailResponse.class);
	}

	/**
	 * 
	 * VPC상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getVpcDetailRequest getVpcDetailRequest (required)
	 * @return byte[]
	 *	GetVpcDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getVpcDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getVpcDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPC리스트조회
	 * @param getVpcListRequest getVpcListRequest (required)
	 * @return GetVpcListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetVpcListResponse> getVpcListGet(GetVpcListRequest getVpcListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getVpcList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getVpcListRequest, true, false);
		return apiClient.call(apiRequest, GetVpcListResponse.class);
	}

	/**
	 * 
	 * VPC리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getVpcListRequest getVpcListRequest (required)
	 * @return byte[]
	 *	GetVpcListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getVpcListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getVpcList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPC리스트조회
	 * @param getVpcListRequest getVpcListRequest (required)
	 * @return GetVpcListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetVpcListResponse> getVpcListPost(GetVpcListRequest getVpcListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getVpcList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getVpcListRequest, true, false);
		return apiClient.call(apiRequest, GetVpcListResponse.class);
	}

	/**
	 * 
	 * VPC리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getVpcListRequest getVpcListRequest (required)
	 * @return byte[]
	 *	GetVpcListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getVpcListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getVpcList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPCPeering인스턴스상세조회
	 * @param getVpcPeeringInstanceDetailRequest getVpcPeeringInstanceDetailRequest (required)
	 * @return GetVpcPeeringInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetVpcPeeringInstanceDetailResponse> getVpcPeeringInstanceDetailGet(GetVpcPeeringInstanceDetailRequest getVpcPeeringInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getVpcPeeringInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getVpcPeeringInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetVpcPeeringInstanceDetailResponse.class);
	}

	/**
	 * 
	 * VPCPeering인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getVpcPeeringInstanceDetailRequest getVpcPeeringInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetVpcPeeringInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getVpcPeeringInstanceDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getVpcPeeringInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPCPeering인스턴스상세조회
	 * @param getVpcPeeringInstanceDetailRequest getVpcPeeringInstanceDetailRequest (required)
	 * @return GetVpcPeeringInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetVpcPeeringInstanceDetailResponse> getVpcPeeringInstanceDetailPost(GetVpcPeeringInstanceDetailRequest getVpcPeeringInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getVpcPeeringInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getVpcPeeringInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetVpcPeeringInstanceDetailResponse.class);
	}

	/**
	 * 
	 * VPCPeering인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getVpcPeeringInstanceDetailRequest getVpcPeeringInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetVpcPeeringInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getVpcPeeringInstanceDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getVpcPeeringInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPCPeering인스턴스리스트조회
	 * @param getVpcPeeringInstanceListRequest getVpcPeeringInstanceListRequest (required)
	 * @return GetVpcPeeringInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetVpcPeeringInstanceListResponse> getVpcPeeringInstanceListGet(GetVpcPeeringInstanceListRequest getVpcPeeringInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getVpcPeeringInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getVpcPeeringInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetVpcPeeringInstanceListResponse.class);
	}

	/**
	 * 
	 * VPCPeering인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getVpcPeeringInstanceListRequest getVpcPeeringInstanceListRequest (required)
	 * @return byte[]
	 *	GetVpcPeeringInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getVpcPeeringInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getVpcPeeringInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPCPeering인스턴스리스트조회
	 * @param getVpcPeeringInstanceListRequest getVpcPeeringInstanceListRequest (required)
	 * @return GetVpcPeeringInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetVpcPeeringInstanceListResponse> getVpcPeeringInstanceListPost(GetVpcPeeringInstanceListRequest getVpcPeeringInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getVpcPeeringInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getVpcPeeringInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetVpcPeeringInstanceListResponse.class);
	}

	/**
	 * 
	 * VPCPeering인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getVpcPeeringInstanceListRequest getVpcPeeringInstanceListRequest (required)
	 * @return byte[]
	 *	GetVpcPeeringInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getVpcPeeringInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getVpcPeeringInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACLInboundRule제거
	 * @param removeNetworkAclInboundRuleRequest removeNetworkAclInboundRuleRequest (required)
	 * @return RemoveNetworkAclInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveNetworkAclInboundRuleResponse> removeNetworkAclInboundRuleGet(RemoveNetworkAclInboundRuleRequest removeNetworkAclInboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeNetworkAclInboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removeNetworkAclInboundRuleRequest, true, false);
		return apiClient.call(apiRequest, RemoveNetworkAclInboundRuleResponse.class);
	}

	/**
	 * 
	 * 네트워크ACLInboundRule제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeNetworkAclInboundRuleRequest removeNetworkAclInboundRuleRequest (required)
	 * @return byte[]
	 *	RemoveNetworkAclInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeNetworkAclInboundRuleGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeNetworkAclInboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACLInboundRule제거
	 * @param removeNetworkAclInboundRuleRequest removeNetworkAclInboundRuleRequest (required)
	 * @return RemoveNetworkAclInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveNetworkAclInboundRuleResponse> removeNetworkAclInboundRulePost(RemoveNetworkAclInboundRuleRequest removeNetworkAclInboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeNetworkAclInboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removeNetworkAclInboundRuleRequest, true, false);
		return apiClient.call(apiRequest, RemoveNetworkAclInboundRuleResponse.class);
	}

	/**
	 * 
	 * 네트워크ACLInboundRule제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeNetworkAclInboundRuleRequest removeNetworkAclInboundRuleRequest (required)
	 * @return byte[]
	 *	RemoveNetworkAclInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeNetworkAclInboundRulePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeNetworkAclInboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACLOutboundRule제거
	 * @param removeNetworkAclOutboundRuleRequest removeNetworkAclOutboundRuleRequest (required)
	 * @return RemoveNetworkAclOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveNetworkAclOutboundRuleResponse> removeNetworkAclOutboundRuleGet(RemoveNetworkAclOutboundRuleRequest removeNetworkAclOutboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeNetworkAclOutboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removeNetworkAclOutboundRuleRequest, true, false);
		return apiClient.call(apiRequest, RemoveNetworkAclOutboundRuleResponse.class);
	}

	/**
	 * 
	 * 네트워크ACLOutboundRule제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeNetworkAclOutboundRuleRequest removeNetworkAclOutboundRuleRequest (required)
	 * @return byte[]
	 *	RemoveNetworkAclOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeNetworkAclOutboundRuleGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeNetworkAclOutboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACLOutboundRule제거
	 * @param removeNetworkAclOutboundRuleRequest removeNetworkAclOutboundRuleRequest (required)
	 * @return RemoveNetworkAclOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveNetworkAclOutboundRuleResponse> removeNetworkAclOutboundRulePost(RemoveNetworkAclOutboundRuleRequest removeNetworkAclOutboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeNetworkAclOutboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removeNetworkAclOutboundRuleRequest, true, false);
		return apiClient.call(apiRequest, RemoveNetworkAclOutboundRuleResponse.class);
	}

	/**
	 * 
	 * 네트워크ACLOutboundRule제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeNetworkAclOutboundRuleRequest removeNetworkAclOutboundRuleRequest (required)
	 * @return byte[]
	 *	RemoveNetworkAclOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeNetworkAclOutboundRulePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeNetworkAclOutboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트제거
	 * @param removeRouteRequest removeRouteRequest (required)
	 * @return RemoveRouteResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveRouteResponse> removeRouteGet(RemoveRouteRequest removeRouteRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeRoute";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removeRouteRequest, true, false);
		return apiClient.call(apiRequest, RemoveRouteResponse.class);
	}

	/**
	 * 
	 * 라우트제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeRouteRequest removeRouteRequest (required)
	 * @return byte[]
	 *	RemoveRouteResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeRouteGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeRoute";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트제거
	 * @param removeRouteRequest removeRouteRequest (required)
	 * @return RemoveRouteResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveRouteResponse> removeRoutePost(RemoveRouteRequest removeRouteRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeRoute";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removeRouteRequest, true, false);
		return apiClient.call(apiRequest, RemoveRouteResponse.class);
	}

	/**
	 * 
	 * 라우트제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeRouteRequest removeRouteRequest (required)
	 * @return byte[]
	 *	RemoveRouteResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeRoutePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeRoute";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블의연관서브넷제거
	 * @param removeRouteTableSubnetRequest removeRouteTableSubnetRequest (required)
	 * @return RemoveRouteTableSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveRouteTableSubnetResponse> removeRouteTableSubnetGet(RemoveRouteTableSubnetRequest removeRouteTableSubnetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeRouteTableSubnet";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removeRouteTableSubnetRequest, true, false);
		return apiClient.call(apiRequest, RemoveRouteTableSubnetResponse.class);
	}

	/**
	 * 
	 * 라우트테이블의연관서브넷제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeRouteTableSubnetRequest removeRouteTableSubnetRequest (required)
	 * @return byte[]
	 *	RemoveRouteTableSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeRouteTableSubnetGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeRouteTableSubnet";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블의연관서브넷제거
	 * @param removeRouteTableSubnetRequest removeRouteTableSubnetRequest (required)
	 * @return RemoveRouteTableSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveRouteTableSubnetResponse> removeRouteTableSubnetPost(RemoveRouteTableSubnetRequest removeRouteTableSubnetRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeRouteTableSubnet";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removeRouteTableSubnetRequest, true, false);
		return apiClient.call(apiRequest, RemoveRouteTableSubnetResponse.class);
	}

	/**
	 * 
	 * 라우트테이블의연관서브넷제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeRouteTableSubnetRequest removeRouteTableSubnetRequest (required)
	 * @return byte[]
	 *	RemoveRouteTableSubnetResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeRouteTableSubnetPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeRouteTableSubnet";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NATGateway설명설정
	 * @param setNatGatewayDescriptionRequest setNatGatewayDescriptionRequest (required)
	 * @return SetNatGatewayDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetNatGatewayDescriptionResponse> setNatGatewayDescriptionGet(SetNatGatewayDescriptionRequest setNatGatewayDescriptionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setNatGatewayDescription";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setNatGatewayDescriptionRequest, true, false);
		return apiClient.call(apiRequest, SetNatGatewayDescriptionResponse.class);
	}

	/**
	 * 
	 * NATGateway설명설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setNatGatewayDescriptionRequest setNatGatewayDescriptionRequest (required)
	 * @return byte[]
	 *	SetNatGatewayDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setNatGatewayDescriptionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setNatGatewayDescription";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NATGateway설명설정
	 * @param setNatGatewayDescriptionRequest setNatGatewayDescriptionRequest (required)
	 * @return SetNatGatewayDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetNatGatewayDescriptionResponse> setNatGatewayDescriptionPost(SetNatGatewayDescriptionRequest setNatGatewayDescriptionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setNatGatewayDescription";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setNatGatewayDescriptionRequest, true, false);
		return apiClient.call(apiRequest, SetNatGatewayDescriptionResponse.class);
	}

	/**
	 * 
	 * NATGateway설명설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setNatGatewayDescriptionRequest setNatGatewayDescriptionRequest (required)
	 * @return byte[]
	 *	SetNatGatewayDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setNatGatewayDescriptionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setNatGatewayDescription";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACL설명설정
	 * @param setNetworkAclDescriptionRequest setNetworkAclDescriptionRequest (required)
	 * @return SetNetworkAclDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetNetworkAclDescriptionResponse> setNetworkAclDescriptionGet(SetNetworkAclDescriptionRequest setNetworkAclDescriptionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setNetworkAclDescription";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setNetworkAclDescriptionRequest, true, false);
		return apiClient.call(apiRequest, SetNetworkAclDescriptionResponse.class);
	}

	/**
	 * 
	 * 네트워크ACL설명설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setNetworkAclDescriptionRequest setNetworkAclDescriptionRequest (required)
	 * @return byte[]
	 *	SetNetworkAclDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setNetworkAclDescriptionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setNetworkAclDescription";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크ACL설명설정
	 * @param setNetworkAclDescriptionRequest setNetworkAclDescriptionRequest (required)
	 * @return SetNetworkAclDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetNetworkAclDescriptionResponse> setNetworkAclDescriptionPost(SetNetworkAclDescriptionRequest setNetworkAclDescriptionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setNetworkAclDescription";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setNetworkAclDescriptionRequest, true, false);
		return apiClient.call(apiRequest, SetNetworkAclDescriptionResponse.class);
	}

	/**
	 * 
	 * 네트워크ACL설명설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setNetworkAclDescriptionRequest setNetworkAclDescriptionRequest (required)
	 * @return byte[]
	 *	SetNetworkAclDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setNetworkAclDescriptionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setNetworkAclDescription";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블설명설정
	 * @param setRouteTableDescriptionRequest setRouteTableDescriptionRequest (required)
	 * @return SetRouteTableDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetRouteTableDescriptionResponse> setRouteTableDescriptionGet(SetRouteTableDescriptionRequest setRouteTableDescriptionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setRouteTableDescription";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setRouteTableDescriptionRequest, true, false);
		return apiClient.call(apiRequest, SetRouteTableDescriptionResponse.class);
	}

	/**
	 * 
	 * 라우트테이블설명설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setRouteTableDescriptionRequest setRouteTableDescriptionRequest (required)
	 * @return byte[]
	 *	SetRouteTableDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setRouteTableDescriptionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setRouteTableDescription";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 라우트테이블설명설정
	 * @param setRouteTableDescriptionRequest setRouteTableDescriptionRequest (required)
	 * @return SetRouteTableDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetRouteTableDescriptionResponse> setRouteTableDescriptionPost(SetRouteTableDescriptionRequest setRouteTableDescriptionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setRouteTableDescription";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setRouteTableDescriptionRequest, true, false);
		return apiClient.call(apiRequest, SetRouteTableDescriptionResponse.class);
	}

	/**
	 * 
	 * 라우트테이블설명설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setRouteTableDescriptionRequest setRouteTableDescriptionRequest (required)
	 * @return byte[]
	 *	SetRouteTableDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setRouteTableDescriptionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setRouteTableDescription";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서브넷의네트워크ACL설정
	 * @param setSubnetNetworkAclRequest setSubnetNetworkAclRequest (required)
	 * @return SetSubnetNetworkAclResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetSubnetNetworkAclResponse> setSubnetNetworkAclGet(SetSubnetNetworkAclRequest setSubnetNetworkAclRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setSubnetNetworkAcl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setSubnetNetworkAclRequest, true, false);
		return apiClient.call(apiRequest, SetSubnetNetworkAclResponse.class);
	}

	/**
	 * 
	 * 서브넷의네트워크ACL설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setSubnetNetworkAclRequest setSubnetNetworkAclRequest (required)
	 * @return byte[]
	 *	SetSubnetNetworkAclResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setSubnetNetworkAclGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setSubnetNetworkAcl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서브넷의네트워크ACL설정
	 * @param setSubnetNetworkAclRequest setSubnetNetworkAclRequest (required)
	 * @return SetSubnetNetworkAclResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetSubnetNetworkAclResponse> setSubnetNetworkAclPost(SetSubnetNetworkAclRequest setSubnetNetworkAclRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setSubnetNetworkAcl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setSubnetNetworkAclRequest, true, false);
		return apiClient.call(apiRequest, SetSubnetNetworkAclResponse.class);
	}

	/**
	 * 
	 * 서브넷의네트워크ACL설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setSubnetNetworkAclRequest setSubnetNetworkAclRequest (required)
	 * @return byte[]
	 *	SetSubnetNetworkAclResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setSubnetNetworkAclPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setSubnetNetworkAcl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPCPeering설명설정
	 * @param setVpcPeeringDescriptionRequest setVpcPeeringDescriptionRequest (required)
	 * @return SetVpcPeeringDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetVpcPeeringDescriptionResponse> setVpcPeeringDescriptionGet(SetVpcPeeringDescriptionRequest setVpcPeeringDescriptionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setVpcPeeringDescription";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setVpcPeeringDescriptionRequest, true, false);
		return apiClient.call(apiRequest, SetVpcPeeringDescriptionResponse.class);
	}

	/**
	 * 
	 * VPCPeering설명설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setVpcPeeringDescriptionRequest setVpcPeeringDescriptionRequest (required)
	 * @return byte[]
	 *	SetVpcPeeringDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setVpcPeeringDescriptionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setVpcPeeringDescription";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * VPCPeering설명설정
	 * @param setVpcPeeringDescriptionRequest setVpcPeeringDescriptionRequest (required)
	 * @return SetVpcPeeringDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetVpcPeeringDescriptionResponse> setVpcPeeringDescriptionPost(SetVpcPeeringDescriptionRequest setVpcPeeringDescriptionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setVpcPeeringDescription";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setVpcPeeringDescriptionRequest, true, false);
		return apiClient.call(apiRequest, SetVpcPeeringDescriptionResponse.class);
	}

	/**
	 * 
	 * VPCPeering설명설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setVpcPeeringDescriptionRequest setVpcPeeringDescriptionRequest (required)
	 * @return byte[]
	 *	SetVpcPeeringDescriptionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setVpcPeeringDescriptionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setVpcPeeringDescription";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

}
