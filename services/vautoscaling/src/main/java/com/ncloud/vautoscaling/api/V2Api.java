/*
 * vautoscaling
 * VPC Auto Scaling 관련 API<br/>https://ncloud.apigw.ntruss.com/vautoscaling/v2
 *
 * NBP corp.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.vautoscaling.api;

import java.util.HashMap;
import java.util.Map;

import com.ncloud.ApiClient;
import com.ncloud.ApiRequest;
import com.ncloud.ApiResponse;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.vautoscaling.model.CreateAutoScalingGroupRequest;
import com.ncloud.vautoscaling.model.CreateAutoScalingGroupResponse;
import com.ncloud.vautoscaling.model.CreateLaunchConfigurationRequest;
import com.ncloud.vautoscaling.model.CreateLaunchConfigurationResponse;
import com.ncloud.vautoscaling.model.DeleteAutoScalingGroupRequest;
import com.ncloud.vautoscaling.model.DeleteAutoScalingGroupResponse;
import com.ncloud.vautoscaling.model.DeleteLaunchConfigurationRequest;
import com.ncloud.vautoscaling.model.DeleteLaunchConfigurationResponse;
import com.ncloud.vautoscaling.model.DeleteScalingPolicyRequest;
import com.ncloud.vautoscaling.model.DeleteScalingPolicyResponse;
import com.ncloud.vautoscaling.model.DeleteScheduledActionRequest;
import com.ncloud.vautoscaling.model.DeleteScheduledActionResponse;
import com.ncloud.vautoscaling.model.ExecutePolicyRequest;
import com.ncloud.vautoscaling.model.ExecutePolicyResponse;
import com.ncloud.vautoscaling.model.GetAdjustmentTypeListRequest;
import com.ncloud.vautoscaling.model.GetAdjustmentTypeListResponse;
import com.ncloud.vautoscaling.model.GetAutoScalingActivityLogListRequest;
import com.ncloud.vautoscaling.model.GetAutoScalingActivityLogListResponse;
import com.ncloud.vautoscaling.model.GetAutoScalingGroupDetailRequest;
import com.ncloud.vautoscaling.model.GetAutoScalingGroupDetailResponse;
import com.ncloud.vautoscaling.model.GetAutoScalingGroupListRequest;
import com.ncloud.vautoscaling.model.GetAutoScalingGroupListResponse;
import com.ncloud.vautoscaling.model.GetAutoScalingPolicyListRequest;
import com.ncloud.vautoscaling.model.GetAutoScalingPolicyListResponse;
import com.ncloud.vautoscaling.model.GetLaunchConfigurationDetailRequest;
import com.ncloud.vautoscaling.model.GetLaunchConfigurationDetailResponse;
import com.ncloud.vautoscaling.model.GetLaunchConfigurationListRequest;
import com.ncloud.vautoscaling.model.GetLaunchConfigurationListResponse;
import com.ncloud.vautoscaling.model.GetScalingProcessTypeListRequest;
import com.ncloud.vautoscaling.model.GetScalingProcessTypeListResponse;
import com.ncloud.vautoscaling.model.GetScheduledActionListRequest;
import com.ncloud.vautoscaling.model.GetScheduledActionListResponse;
import com.ncloud.vautoscaling.model.PutScalingPolicyRequest;
import com.ncloud.vautoscaling.model.PutScalingPolicyResponse;
import com.ncloud.vautoscaling.model.PutScheduledUpdateGroupActionRequest;
import com.ncloud.vautoscaling.model.PutScheduledUpdateGroupActionResponse;
import com.ncloud.vautoscaling.model.ResumeProcessesRequest;
import com.ncloud.vautoscaling.model.ResumeProcessesResponse;
import com.ncloud.vautoscaling.model.SetDesiredCapacityRequest;
import com.ncloud.vautoscaling.model.SetDesiredCapacityResponse;
import com.ncloud.vautoscaling.model.SuspendProcessesRequest;
import com.ncloud.vautoscaling.model.SuspendProcessesResponse;
import com.ncloud.vautoscaling.model.UpdateAutoScalingGroupRequest;
import com.ncloud.vautoscaling.model.UpdateAutoScalingGroupResponse;

public class V2Api {

	private final String basePath = "/vautoscaling/v2";

	private final ApiClient apiClient;

	public V2Api(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	/**
	 * 
	 * 오토스케일링그룹생성
	 * @param createAutoScalingGroupRequest createAutoScalingGroupRequest (required)
	 * @return CreateAutoScalingGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateAutoScalingGroupResponse> createAutoScalingGroupGet(CreateAutoScalingGroupRequest createAutoScalingGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createAutoScalingGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createAutoScalingGroupRequest, true, false);
		return apiClient.call(apiRequest, CreateAutoScalingGroupResponse.class);
	}

	/**
	 * 
	 * 오토스케일링그룹생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createAutoScalingGroupRequest createAutoScalingGroupRequest (required)
	 * @return byte[]
	 *	CreateAutoScalingGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createAutoScalingGroupGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createAutoScalingGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오토스케일링그룹생성
	 * @param createAutoScalingGroupRequest createAutoScalingGroupRequest (required)
	 * @return CreateAutoScalingGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateAutoScalingGroupResponse> createAutoScalingGroupPost(CreateAutoScalingGroupRequest createAutoScalingGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createAutoScalingGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createAutoScalingGroupRequest, true, false);
		return apiClient.call(apiRequest, CreateAutoScalingGroupResponse.class);
	}

	/**
	 * 
	 * 오토스케일링그룹생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createAutoScalingGroupRequest createAutoScalingGroupRequest (required)
	 * @return byte[]
	 *	CreateAutoScalingGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createAutoScalingGroupPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createAutoScalingGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 론치설정생성
	 * @param createLaunchConfigurationRequest createLaunchConfigurationRequest (required)
	 * @return CreateLaunchConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateLaunchConfigurationResponse> createLaunchConfigurationGet(CreateLaunchConfigurationRequest createLaunchConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createLaunchConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createLaunchConfigurationRequest, true, false);
		return apiClient.call(apiRequest, CreateLaunchConfigurationResponse.class);
	}

	/**
	 * 
	 * 론치설정생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createLaunchConfigurationRequest createLaunchConfigurationRequest (required)
	 * @return byte[]
	 *	CreateLaunchConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createLaunchConfigurationGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createLaunchConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 론치설정생성
	 * @param createLaunchConfigurationRequest createLaunchConfigurationRequest (required)
	 * @return CreateLaunchConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateLaunchConfigurationResponse> createLaunchConfigurationPost(CreateLaunchConfigurationRequest createLaunchConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createLaunchConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createLaunchConfigurationRequest, true, false);
		return apiClient.call(apiRequest, CreateLaunchConfigurationResponse.class);
	}

	/**
	 * 
	 * 론치설정생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createLaunchConfigurationRequest createLaunchConfigurationRequest (required)
	 * @return byte[]
	 *	CreateLaunchConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createLaunchConfigurationPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createLaunchConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오토스케일링그룹삭제
	 * @param deleteAutoScalingGroupRequest deleteAutoScalingGroupRequest (required)
	 * @return DeleteAutoScalingGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteAutoScalingGroupResponse> deleteAutoScalingGroupGet(DeleteAutoScalingGroupRequest deleteAutoScalingGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteAutoScalingGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteAutoScalingGroupRequest, true, false);
		return apiClient.call(apiRequest, DeleteAutoScalingGroupResponse.class);
	}

	/**
	 * 
	 * 오토스케일링그룹삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteAutoScalingGroupRequest deleteAutoScalingGroupRequest (required)
	 * @return byte[]
	 *	DeleteAutoScalingGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteAutoScalingGroupGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteAutoScalingGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오토스케일링그룹삭제
	 * @param deleteAutoScalingGroupRequest deleteAutoScalingGroupRequest (required)
	 * @return DeleteAutoScalingGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteAutoScalingGroupResponse> deleteAutoScalingGroupPost(DeleteAutoScalingGroupRequest deleteAutoScalingGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteAutoScalingGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteAutoScalingGroupRequest, true, false);
		return apiClient.call(apiRequest, DeleteAutoScalingGroupResponse.class);
	}

	/**
	 * 
	 * 오토스케일링그룹삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteAutoScalingGroupRequest deleteAutoScalingGroupRequest (required)
	 * @return byte[]
	 *	DeleteAutoScalingGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteAutoScalingGroupPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteAutoScalingGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 론치설정삭제
	 * @param deleteLaunchConfigurationRequest deleteLaunchConfigurationRequest (required)
	 * @return DeleteLaunchConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLaunchConfigurationResponse> deleteLaunchConfigurationGet(DeleteLaunchConfigurationRequest deleteLaunchConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLaunchConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteLaunchConfigurationRequest, true, false);
		return apiClient.call(apiRequest, DeleteLaunchConfigurationResponse.class);
	}

	/**
	 * 
	 * 론치설정삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLaunchConfigurationRequest deleteLaunchConfigurationRequest (required)
	 * @return byte[]
	 *	DeleteLaunchConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLaunchConfigurationGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLaunchConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 론치설정삭제
	 * @param deleteLaunchConfigurationRequest deleteLaunchConfigurationRequest (required)
	 * @return DeleteLaunchConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLaunchConfigurationResponse> deleteLaunchConfigurationPost(DeleteLaunchConfigurationRequest deleteLaunchConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLaunchConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteLaunchConfigurationRequest, true, false);
		return apiClient.call(apiRequest, DeleteLaunchConfigurationResponse.class);
	}

	/**
	 * 
	 * 론치설정삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLaunchConfigurationRequest deleteLaunchConfigurationRequest (required)
	 * @return byte[]
	 *	DeleteLaunchConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLaunchConfigurationPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLaunchConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 스케일링정책삭제
	 * @param deleteScalingPolicyRequest deleteScalingPolicyRequest (required)
	 * @return DeleteScalingPolicyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteScalingPolicyResponse> deleteScalingPolicyGet(DeleteScalingPolicyRequest deleteScalingPolicyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteScalingPolicy";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteScalingPolicyRequest, true, false);
		return apiClient.call(apiRequest, DeleteScalingPolicyResponse.class);
	}

	/**
	 * 
	 * 스케일링정책삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteScalingPolicyRequest deleteScalingPolicyRequest (required)
	 * @return byte[]
	 *	DeleteScalingPolicyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteScalingPolicyGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteScalingPolicy";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 스케일링정책삭제
	 * @param deleteScalingPolicyRequest deleteScalingPolicyRequest (required)
	 * @return DeleteScalingPolicyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteScalingPolicyResponse> deleteScalingPolicyPost(DeleteScalingPolicyRequest deleteScalingPolicyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteScalingPolicy";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteScalingPolicyRequest, true, false);
		return apiClient.call(apiRequest, DeleteScalingPolicyResponse.class);
	}

	/**
	 * 
	 * 스케일링정책삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteScalingPolicyRequest deleteScalingPolicyRequest (required)
	 * @return byte[]
	 *	DeleteScalingPolicyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteScalingPolicyPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteScalingPolicy";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 스케쥴액션삭제
	 * @param deleteScheduledActionRequest deleteScheduledActionRequest (required)
	 * @return DeleteScheduledActionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteScheduledActionResponse> deleteScheduledActionGet(DeleteScheduledActionRequest deleteScheduledActionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteScheduledAction";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteScheduledActionRequest, true, false);
		return apiClient.call(apiRequest, DeleteScheduledActionResponse.class);
	}

	/**
	 * 
	 * 스케쥴액션삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteScheduledActionRequest deleteScheduledActionRequest (required)
	 * @return byte[]
	 *	DeleteScheduledActionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteScheduledActionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteScheduledAction";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 스케쥴액션삭제
	 * @param deleteScheduledActionRequest deleteScheduledActionRequest (required)
	 * @return DeleteScheduledActionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteScheduledActionResponse> deleteScheduledActionPost(DeleteScheduledActionRequest deleteScheduledActionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteScheduledAction";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteScheduledActionRequest, true, false);
		return apiClient.call(apiRequest, DeleteScheduledActionResponse.class);
	}

	/**
	 * 
	 * 스케쥴액션삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteScheduledActionRequest deleteScheduledActionRequest (required)
	 * @return byte[]
	 *	DeleteScheduledActionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteScheduledActionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteScheduledAction";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 정책실행
	 * @param executePolicyRequest executePolicyRequest (required)
	 * @return ExecutePolicyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ExecutePolicyResponse> executePolicyGet(ExecutePolicyRequest executePolicyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/executePolicy";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, executePolicyRequest, true, false);
		return apiClient.call(apiRequest, ExecutePolicyResponse.class);
	}

	/**
	 * 
	 * 정책실행
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	executePolicyRequest executePolicyRequest (required)
	 * @return byte[]
	 *	ExecutePolicyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> executePolicyGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/executePolicy";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 정책실행
	 * @param executePolicyRequest executePolicyRequest (required)
	 * @return ExecutePolicyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ExecutePolicyResponse> executePolicyPost(ExecutePolicyRequest executePolicyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/executePolicy";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, executePolicyRequest, true, false);
		return apiClient.call(apiRequest, ExecutePolicyResponse.class);
	}

	/**
	 * 
	 * 정책실행
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	executePolicyRequest executePolicyRequest (required)
	 * @return byte[]
	 *	ExecutePolicyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> executePolicyPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/executePolicy";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 조정유형리스트조회
	 * @param getAdjustmentTypeListRequest getAdjustmentTypeListRequest (required)
	 * @return GetAdjustmentTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAdjustmentTypeListResponse> getAdjustmentTypeListGet(GetAdjustmentTypeListRequest getAdjustmentTypeListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAdjustmentTypeList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getAdjustmentTypeListRequest, true, false);
		return apiClient.call(apiRequest, GetAdjustmentTypeListResponse.class);
	}

	/**
	 * 
	 * 조정유형리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAdjustmentTypeListRequest getAdjustmentTypeListRequest (required)
	 * @return byte[]
	 *	GetAdjustmentTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAdjustmentTypeListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAdjustmentTypeList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 조정유형리스트조회
	 * @param getAdjustmentTypeListRequest getAdjustmentTypeListRequest (required)
	 * @return GetAdjustmentTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAdjustmentTypeListResponse> getAdjustmentTypeListPost(GetAdjustmentTypeListRequest getAdjustmentTypeListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAdjustmentTypeList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getAdjustmentTypeListRequest, true, false);
		return apiClient.call(apiRequest, GetAdjustmentTypeListResponse.class);
	}

	/**
	 * 
	 * 조정유형리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAdjustmentTypeListRequest getAdjustmentTypeListRequest (required)
	 * @return byte[]
	 *	GetAdjustmentTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAdjustmentTypeListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAdjustmentTypeList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 액티비티로그리스트조회
	 * @param getAutoScalingActivityLogListRequest getAutoScalingActivityLogListRequest (required)
	 * @return GetAutoScalingActivityLogListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAutoScalingActivityLogListResponse> getAutoScalingActivityLogListGet(GetAutoScalingActivityLogListRequest getAutoScalingActivityLogListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAutoScalingActivityLogList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getAutoScalingActivityLogListRequest, true, false);
		return apiClient.call(apiRequest, GetAutoScalingActivityLogListResponse.class);
	}

	/**
	 * 
	 * 액티비티로그리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAutoScalingActivityLogListRequest getAutoScalingActivityLogListRequest (required)
	 * @return byte[]
	 *	GetAutoScalingActivityLogListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAutoScalingActivityLogListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAutoScalingActivityLogList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 액티비티로그리스트조회
	 * @param getAutoScalingActivityLogListRequest getAutoScalingActivityLogListRequest (required)
	 * @return GetAutoScalingActivityLogListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAutoScalingActivityLogListResponse> getAutoScalingActivityLogListPost(GetAutoScalingActivityLogListRequest getAutoScalingActivityLogListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAutoScalingActivityLogList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getAutoScalingActivityLogListRequest, true, false);
		return apiClient.call(apiRequest, GetAutoScalingActivityLogListResponse.class);
	}

	/**
	 * 
	 * 액티비티로그리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAutoScalingActivityLogListRequest getAutoScalingActivityLogListRequest (required)
	 * @return byte[]
	 *	GetAutoScalingActivityLogListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAutoScalingActivityLogListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAutoScalingActivityLogList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오토스케일링그룹상세조회
	 * @param getAutoScalingGroupDetailRequest getAutoScalingGroupDetailRequest (required)
	 * @return GetAutoScalingGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAutoScalingGroupDetailResponse> getAutoScalingGroupDetailGet(GetAutoScalingGroupDetailRequest getAutoScalingGroupDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAutoScalingGroupDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getAutoScalingGroupDetailRequest, true, false);
		return apiClient.call(apiRequest, GetAutoScalingGroupDetailResponse.class);
	}

	/**
	 * 
	 * 오토스케일링그룹상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAutoScalingGroupDetailRequest getAutoScalingGroupDetailRequest (required)
	 * @return byte[]
	 *	GetAutoScalingGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAutoScalingGroupDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAutoScalingGroupDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오토스케일링그룹상세조회
	 * @param getAutoScalingGroupDetailRequest getAutoScalingGroupDetailRequest (required)
	 * @return GetAutoScalingGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAutoScalingGroupDetailResponse> getAutoScalingGroupDetailPost(GetAutoScalingGroupDetailRequest getAutoScalingGroupDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAutoScalingGroupDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getAutoScalingGroupDetailRequest, true, false);
		return apiClient.call(apiRequest, GetAutoScalingGroupDetailResponse.class);
	}

	/**
	 * 
	 * 오토스케일링그룹상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAutoScalingGroupDetailRequest getAutoScalingGroupDetailRequest (required)
	 * @return byte[]
	 *	GetAutoScalingGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAutoScalingGroupDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAutoScalingGroupDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오토스케일링그룹리스트조회
	 * @param getAutoScalingGroupListRequest getAutoScalingGroupListRequest (required)
	 * @return GetAutoScalingGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAutoScalingGroupListResponse> getAutoScalingGroupListGet(GetAutoScalingGroupListRequest getAutoScalingGroupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAutoScalingGroupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getAutoScalingGroupListRequest, true, false);
		return apiClient.call(apiRequest, GetAutoScalingGroupListResponse.class);
	}

	/**
	 * 
	 * 오토스케일링그룹리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAutoScalingGroupListRequest getAutoScalingGroupListRequest (required)
	 * @return byte[]
	 *	GetAutoScalingGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAutoScalingGroupListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAutoScalingGroupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오토스케일링그룹리스트조회
	 * @param getAutoScalingGroupListRequest getAutoScalingGroupListRequest (required)
	 * @return GetAutoScalingGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAutoScalingGroupListResponse> getAutoScalingGroupListPost(GetAutoScalingGroupListRequest getAutoScalingGroupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAutoScalingGroupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getAutoScalingGroupListRequest, true, false);
		return apiClient.call(apiRequest, GetAutoScalingGroupListResponse.class);
	}

	/**
	 * 
	 * 오토스케일링그룹리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAutoScalingGroupListRequest getAutoScalingGroupListRequest (required)
	 * @return byte[]
	 *	GetAutoScalingGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAutoScalingGroupListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAutoScalingGroupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오토스케일링정책리스트조회
	 * @param getAutoScalingPolicyListRequest getAutoScalingPolicyListRequest (required)
	 * @return GetAutoScalingPolicyListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAutoScalingPolicyListResponse> getAutoScalingPolicyListGet(GetAutoScalingPolicyListRequest getAutoScalingPolicyListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAutoScalingPolicyList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getAutoScalingPolicyListRequest, true, false);
		return apiClient.call(apiRequest, GetAutoScalingPolicyListResponse.class);
	}

	/**
	 * 
	 * 오토스케일링정책리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAutoScalingPolicyListRequest getAutoScalingPolicyListRequest (required)
	 * @return byte[]
	 *	GetAutoScalingPolicyListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAutoScalingPolicyListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAutoScalingPolicyList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오토스케일링정책리스트조회
	 * @param getAutoScalingPolicyListRequest getAutoScalingPolicyListRequest (required)
	 * @return GetAutoScalingPolicyListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAutoScalingPolicyListResponse> getAutoScalingPolicyListPost(GetAutoScalingPolicyListRequest getAutoScalingPolicyListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAutoScalingPolicyList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getAutoScalingPolicyListRequest, true, false);
		return apiClient.call(apiRequest, GetAutoScalingPolicyListResponse.class);
	}

	/**
	 * 
	 * 오토스케일링정책리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAutoScalingPolicyListRequest getAutoScalingPolicyListRequest (required)
	 * @return byte[]
	 *	GetAutoScalingPolicyListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAutoScalingPolicyListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAutoScalingPolicyList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 론치설정상세조회
	 * @param getLaunchConfigurationDetailRequest getLaunchConfigurationDetailRequest (required)
	 * @return GetLaunchConfigurationDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLaunchConfigurationDetailResponse> getLaunchConfigurationDetailGet(GetLaunchConfigurationDetailRequest getLaunchConfigurationDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLaunchConfigurationDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getLaunchConfigurationDetailRequest, true, false);
		return apiClient.call(apiRequest, GetLaunchConfigurationDetailResponse.class);
	}

	/**
	 * 
	 * 론치설정상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLaunchConfigurationDetailRequest getLaunchConfigurationDetailRequest (required)
	 * @return byte[]
	 *	GetLaunchConfigurationDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLaunchConfigurationDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLaunchConfigurationDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 론치설정상세조회
	 * @param getLaunchConfigurationDetailRequest getLaunchConfigurationDetailRequest (required)
	 * @return GetLaunchConfigurationDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLaunchConfigurationDetailResponse> getLaunchConfigurationDetailPost(GetLaunchConfigurationDetailRequest getLaunchConfigurationDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLaunchConfigurationDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getLaunchConfigurationDetailRequest, true, false);
		return apiClient.call(apiRequest, GetLaunchConfigurationDetailResponse.class);
	}

	/**
	 * 
	 * 론치설정상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLaunchConfigurationDetailRequest getLaunchConfigurationDetailRequest (required)
	 * @return byte[]
	 *	GetLaunchConfigurationDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLaunchConfigurationDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLaunchConfigurationDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 론치설정리스트조회
	 * @param getLaunchConfigurationListRequest getLaunchConfigurationListRequest (required)
	 * @return GetLaunchConfigurationListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLaunchConfigurationListResponse> getLaunchConfigurationListGet(GetLaunchConfigurationListRequest getLaunchConfigurationListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLaunchConfigurationList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getLaunchConfigurationListRequest, true, false);
		return apiClient.call(apiRequest, GetLaunchConfigurationListResponse.class);
	}

	/**
	 * 
	 * 론치설정리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLaunchConfigurationListRequest getLaunchConfigurationListRequest (required)
	 * @return byte[]
	 *	GetLaunchConfigurationListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLaunchConfigurationListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLaunchConfigurationList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 론치설정리스트조회
	 * @param getLaunchConfigurationListRequest getLaunchConfigurationListRequest (required)
	 * @return GetLaunchConfigurationListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLaunchConfigurationListResponse> getLaunchConfigurationListPost(GetLaunchConfigurationListRequest getLaunchConfigurationListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLaunchConfigurationList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getLaunchConfigurationListRequest, true, false);
		return apiClient.call(apiRequest, GetLaunchConfigurationListResponse.class);
	}

	/**
	 * 
	 * 론치설정리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLaunchConfigurationListRequest getLaunchConfigurationListRequest (required)
	 * @return byte[]
	 *	GetLaunchConfigurationListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLaunchConfigurationListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLaunchConfigurationList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 스케일링프로세스유형리스트조회
	 * @param getScalingProcessTypeListRequest getScalingProcessTypeListRequest (required)
	 * @return GetScalingProcessTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetScalingProcessTypeListResponse> getScalingProcessTypeListGet(GetScalingProcessTypeListRequest getScalingProcessTypeListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getScalingProcessTypeList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getScalingProcessTypeListRequest, true, false);
		return apiClient.call(apiRequest, GetScalingProcessTypeListResponse.class);
	}

	/**
	 * 
	 * 스케일링프로세스유형리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getScalingProcessTypeListRequest getScalingProcessTypeListRequest (required)
	 * @return byte[]
	 *	GetScalingProcessTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getScalingProcessTypeListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getScalingProcessTypeList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 스케일링프로세스유형리스트조회
	 * @param getScalingProcessTypeListRequest getScalingProcessTypeListRequest (required)
	 * @return GetScalingProcessTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetScalingProcessTypeListResponse> getScalingProcessTypeListPost(GetScalingProcessTypeListRequest getScalingProcessTypeListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getScalingProcessTypeList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getScalingProcessTypeListRequest, true, false);
		return apiClient.call(apiRequest, GetScalingProcessTypeListResponse.class);
	}

	/**
	 * 
	 * 스케일링프로세스유형리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getScalingProcessTypeListRequest getScalingProcessTypeListRequest (required)
	 * @return byte[]
	 *	GetScalingProcessTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getScalingProcessTypeListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getScalingProcessTypeList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 스케쥴액션리스트조회
	 * @param getScheduledActionListRequest getScheduledActionListRequest (required)
	 * @return GetScheduledActionListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetScheduledActionListResponse> getScheduledActionListGet(GetScheduledActionListRequest getScheduledActionListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getScheduledActionList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getScheduledActionListRequest, true, false);
		return apiClient.call(apiRequest, GetScheduledActionListResponse.class);
	}

	/**
	 * 
	 * 스케쥴액션리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getScheduledActionListRequest getScheduledActionListRequest (required)
	 * @return byte[]
	 *	GetScheduledActionListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getScheduledActionListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getScheduledActionList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 스케쥴액션리스트조회
	 * @param getScheduledActionListRequest getScheduledActionListRequest (required)
	 * @return GetScheduledActionListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetScheduledActionListResponse> getScheduledActionListPost(GetScheduledActionListRequest getScheduledActionListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getScheduledActionList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getScheduledActionListRequest, true, false);
		return apiClient.call(apiRequest, GetScheduledActionListResponse.class);
	}

	/**
	 * 
	 * 스케쥴액션리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getScheduledActionListRequest getScheduledActionListRequest (required)
	 * @return byte[]
	 *	GetScheduledActionListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getScheduledActionListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getScheduledActionList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 스케일링정책생성/수정
	 * @param putScalingPolicyRequest putScalingPolicyRequest (required)
	 * @return PutScalingPolicyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<PutScalingPolicyResponse> putScalingPolicyGet(PutScalingPolicyRequest putScalingPolicyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/putScalingPolicy";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, putScalingPolicyRequest, true, false);
		return apiClient.call(apiRequest, PutScalingPolicyResponse.class);
	}

	/**
	 * 
	 * 스케일링정책생성/수정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	putScalingPolicyRequest putScalingPolicyRequest (required)
	 * @return byte[]
	 *	PutScalingPolicyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> putScalingPolicyGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/putScalingPolicy";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 스케일링정책생성/수정
	 * @param putScalingPolicyRequest putScalingPolicyRequest (required)
	 * @return PutScalingPolicyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<PutScalingPolicyResponse> putScalingPolicyPost(PutScalingPolicyRequest putScalingPolicyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/putScalingPolicy";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, putScalingPolicyRequest, true, false);
		return apiClient.call(apiRequest, PutScalingPolicyResponse.class);
	}

	/**
	 * 
	 * 스케일링정책생성/수정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	putScalingPolicyRequest putScalingPolicyRequest (required)
	 * @return byte[]
	 *	PutScalingPolicyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> putScalingPolicyPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/putScalingPolicy";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 스케쥴액션생성/수정
	 * @param putScheduledUpdateGroupActionRequest putScheduledUpdateGroupActionRequest (required)
	 * @return PutScheduledUpdateGroupActionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<PutScheduledUpdateGroupActionResponse> putScheduledUpdateGroupActionGet(PutScheduledUpdateGroupActionRequest putScheduledUpdateGroupActionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/putScheduledUpdateGroupAction";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, putScheduledUpdateGroupActionRequest, true, false);
		return apiClient.call(apiRequest, PutScheduledUpdateGroupActionResponse.class);
	}

	/**
	 * 
	 * 스케쥴액션생성/수정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	putScheduledUpdateGroupActionRequest putScheduledUpdateGroupActionRequest (required)
	 * @return byte[]
	 *	PutScheduledUpdateGroupActionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> putScheduledUpdateGroupActionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/putScheduledUpdateGroupAction";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 스케쥴액션생성/수정
	 * @param putScheduledUpdateGroupActionRequest putScheduledUpdateGroupActionRequest (required)
	 * @return PutScheduledUpdateGroupActionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<PutScheduledUpdateGroupActionResponse> putScheduledUpdateGroupActionPost(PutScheduledUpdateGroupActionRequest putScheduledUpdateGroupActionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/putScheduledUpdateGroupAction";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, putScheduledUpdateGroupActionRequest, true, false);
		return apiClient.call(apiRequest, PutScheduledUpdateGroupActionResponse.class);
	}

	/**
	 * 
	 * 스케쥴액션생성/수정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	putScheduledUpdateGroupActionRequest putScheduledUpdateGroupActionRequest (required)
	 * @return byte[]
	 *	PutScheduledUpdateGroupActionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> putScheduledUpdateGroupActionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/putScheduledUpdateGroupAction";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 프로세스재시작
	 * @param resumeProcessesRequest resumeProcessesRequest (required)
	 * @return ResumeProcessesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ResumeProcessesResponse> resumeProcessesGet(ResumeProcessesRequest resumeProcessesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/resumeProcesses";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, resumeProcessesRequest, true, false);
		return apiClient.call(apiRequest, ResumeProcessesResponse.class);
	}

	/**
	 * 
	 * 프로세스재시작
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	resumeProcessesRequest resumeProcessesRequest (required)
	 * @return byte[]
	 *	ResumeProcessesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> resumeProcessesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/resumeProcesses";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 프로세스재시작
	 * @param resumeProcessesRequest resumeProcessesRequest (required)
	 * @return ResumeProcessesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ResumeProcessesResponse> resumeProcessesPost(ResumeProcessesRequest resumeProcessesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/resumeProcesses";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, resumeProcessesRequest, true, false);
		return apiClient.call(apiRequest, ResumeProcessesResponse.class);
	}

	/**
	 * 
	 * 프로세스재시작
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	resumeProcessesRequest resumeProcessesRequest (required)
	 * @return byte[]
	 *	ResumeProcessesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> resumeProcessesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/resumeProcesses";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 기대용량설정
	 * @param setDesiredCapacityRequest setDesiredCapacityRequest (required)
	 * @return SetDesiredCapacityResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetDesiredCapacityResponse> setDesiredCapacityGet(SetDesiredCapacityRequest setDesiredCapacityRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setDesiredCapacity";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setDesiredCapacityRequest, true, false);
		return apiClient.call(apiRequest, SetDesiredCapacityResponse.class);
	}

	/**
	 * 
	 * 기대용량설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setDesiredCapacityRequest setDesiredCapacityRequest (required)
	 * @return byte[]
	 *	SetDesiredCapacityResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setDesiredCapacityGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setDesiredCapacity";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 기대용량설정
	 * @param setDesiredCapacityRequest setDesiredCapacityRequest (required)
	 * @return SetDesiredCapacityResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetDesiredCapacityResponse> setDesiredCapacityPost(SetDesiredCapacityRequest setDesiredCapacityRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setDesiredCapacity";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setDesiredCapacityRequest, true, false);
		return apiClient.call(apiRequest, SetDesiredCapacityResponse.class);
	}

	/**
	 * 
	 * 기대용량설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setDesiredCapacityRequest setDesiredCapacityRequest (required)
	 * @return byte[]
	 *	SetDesiredCapacityResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setDesiredCapacityPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setDesiredCapacity";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 프로세스일시정지
	 * @param suspendProcessesRequest suspendProcessesRequest (required)
	 * @return SuspendProcessesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SuspendProcessesResponse> suspendProcessesGet(SuspendProcessesRequest suspendProcessesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/suspendProcesses";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, suspendProcessesRequest, true, false);
		return apiClient.call(apiRequest, SuspendProcessesResponse.class);
	}

	/**
	 * 
	 * 프로세스일시정지
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	suspendProcessesRequest suspendProcessesRequest (required)
	 * @return byte[]
	 *	SuspendProcessesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> suspendProcessesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/suspendProcesses";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 프로세스일시정지
	 * @param suspendProcessesRequest suspendProcessesRequest (required)
	 * @return SuspendProcessesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SuspendProcessesResponse> suspendProcessesPost(SuspendProcessesRequest suspendProcessesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/suspendProcesses";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, suspendProcessesRequest, true, false);
		return apiClient.call(apiRequest, SuspendProcessesResponse.class);
	}

	/**
	 * 
	 * 프로세스일시정지
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	suspendProcessesRequest suspendProcessesRequest (required)
	 * @return byte[]
	 *	SuspendProcessesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> suspendProcessesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/suspendProcesses";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오토스케일링그룹수정
	 * @param updateAutoScalingGroupRequest updateAutoScalingGroupRequest (required)
	 * @return UpdateAutoScalingGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<UpdateAutoScalingGroupResponse> updateAutoScalingGroupGet(UpdateAutoScalingGroupRequest updateAutoScalingGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/updateAutoScalingGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, updateAutoScalingGroupRequest, true, false);
		return apiClient.call(apiRequest, UpdateAutoScalingGroupResponse.class);
	}

	/**
	 * 
	 * 오토스케일링그룹수정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	updateAutoScalingGroupRequest updateAutoScalingGroupRequest (required)
	 * @return byte[]
	 *	UpdateAutoScalingGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> updateAutoScalingGroupGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/updateAutoScalingGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오토스케일링그룹수정
	 * @param updateAutoScalingGroupRequest updateAutoScalingGroupRequest (required)
	 * @return UpdateAutoScalingGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<UpdateAutoScalingGroupResponse> updateAutoScalingGroupPost(UpdateAutoScalingGroupRequest updateAutoScalingGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/updateAutoScalingGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, updateAutoScalingGroupRequest, true, false);
		return apiClient.call(apiRequest, UpdateAutoScalingGroupResponse.class);
	}

	/**
	 * 
	 * 오토스케일링그룹수정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	updateAutoScalingGroupRequest updateAutoScalingGroupRequest (required)
	 * @return byte[]
	 *	UpdateAutoScalingGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> updateAutoScalingGroupPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/updateAutoScalingGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

}
