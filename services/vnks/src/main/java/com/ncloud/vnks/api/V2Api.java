/*
 * vnks
 * <br/>https://nks.apigw.ntruss.com/vnks/v2
 *
 * NBP corp.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.vnks.api;

import java.util.HashMap;
import java.util.Map;

import com.ncloud.ApiClient;
import com.ncloud.ApiRequest;
import com.ncloud.ApiResponse;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.vnks.model.ClusterInputBody;
import com.ncloud.vnks.model.ClusterRes;
import com.ncloud.vnks.model.ClustersRes;
import com.ncloud.vnks.model.CreateClusterRes;
import com.ncloud.vnks.model.KubeconfigRes;
import com.ncloud.vnks.model.NodePoolCreationBody;
import com.ncloud.vnks.model.NodePoolUpdateBody;
import com.ncloud.vnks.model.NodePoolsRes;
import com.ncloud.vnks.model.OptionsRes;
import com.ncloud.vnks.model.WorkerNodeRes;

public class V2Api {

	private final String basePath = "/vnks/v2";

	private final ApiClient apiClient;

	public V2Api(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	/**
	 * 
	 * 
	 * @return ClustersRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ClustersRes> clustersGet() throws ApiException, SdkException {
		
		// path
		String path = "/clusters";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, ClustersRes.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	ClustersRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> clustersGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/clusters";

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param clusterInputBody  (required)
	 * @return CreateClusterRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateClusterRes> clustersPost(ClusterInputBody clusterInputBody) throws ApiException, SdkException {
		
		// path
		String path = "/clusters";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, clusterInputBody, false, false);
		return apiClient.call(apiRequest, CreateClusterRes.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	clusterInputBody  (required)
	 * @return byte[]
	 *	CreateClusterRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> clustersPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/clusters";

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void clustersUuidDelete(String uuid) throws ApiException, SdkException {
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidDelete");
		}
		
		// path
		String path = "/clusters/{uuid}"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "DELETE", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> clustersUuidDelete(String uuid, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidDelete");
		}
		
		// path
		String path = "/clusters/{uuid}"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "DELETE", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @return ClusterRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ClusterRes> clustersUuidGet(String uuid) throws ApiException, SdkException {
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidGet");
		}
		
		// path
		String path = "/clusters/{uuid}"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, ClusterRes.class);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	ClusterRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> clustersUuidGet(String uuid, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidGet");
		}
		
		// path
		String path = "/clusters/{uuid}"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @return KubeconfigRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<KubeconfigRes> clustersUuidKubeconfigGet(String uuid) throws ApiException, SdkException {
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidKubeconfigGet");
		}
		
		// path
		String path = "/clusters/{uuid}/kubeconfig"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, KubeconfigRes.class);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	KubeconfigRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> clustersUuidKubeconfigGet(String uuid, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidKubeconfigGet");
		}
		
		// path
		String path = "/clusters/{uuid}/kubeconfig"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void clustersUuidKubeconfigResetPatch(String uuid) throws ApiException, SdkException {
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidKubeconfigResetPatch");
		}
		
		// path
		String path = "/clusters/{uuid}/kubeconfig/reset"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "PATCH", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> clustersUuidKubeconfigResetPatch(String uuid, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidKubeconfigResetPatch");
		}
		
		// path
		String path = "/clusters/{uuid}/kubeconfig/reset"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "PATCH", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @return NodePoolsRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<NodePoolsRes> clustersUuidNodePoolGet(String uuid) throws ApiException, SdkException {
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidNodePoolGet");
		}
		
		// path
		String path = "/clusters/{uuid}/node-pool"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, NodePoolsRes.class);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	NodePoolsRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> clustersUuidNodePoolGet(String uuid, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidNodePoolGet");
		}
		
		// path
		String path = "/clusters/{uuid}/node-pool"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @param instanceNo instanceNo (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void clustersUuidNodePoolInstanceNoDelete(String uuid, String instanceNo) throws ApiException, SdkException {
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidNodePoolInstanceNoDelete");
		}
		// verify the required parameter 'instanceNo' is set
		if (instanceNo == null) {
			throw new SdkException("Missing the required parameter 'instanceNo' when calling clustersUuidNodePoolInstanceNoDelete");
		}
		
		// path
		String path = "/clusters/{uuid}/node-pool/{instanceNo}"
			.replaceAll("\\{" + "uuid" + "\\}", uuid)
			.replaceAll("\\{" + "instanceNo" + "\\}", instanceNo);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "DELETE", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @param instanceNo instanceNo (required)
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> clustersUuidNodePoolInstanceNoDelete(String uuid, String instanceNo, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidNodePoolInstanceNoDelete");
		}
		// verify the required parameter 'instanceNo' is set
		if (instanceNo == null) {
			throw new SdkException("Missing the required parameter 'instanceNo' when calling clustersUuidNodePoolInstanceNoDelete");
		}
		
		// path
		String path = "/clusters/{uuid}/node-pool/{instanceNo}"
			.replaceAll("\\{" + "uuid" + "\\}", uuid)
			.replaceAll("\\{" + "instanceNo" + "\\}", instanceNo);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "DELETE", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param nodePoolUpdateBody  (required)
	 * @param uuid uuid (required)
	 * @param instanceNo instanceNo (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void clustersUuidNodePoolInstanceNoPatch(NodePoolUpdateBody nodePoolUpdateBody, String uuid, String instanceNo) throws ApiException, SdkException {
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidNodePoolInstanceNoPatch");
		}
		// verify the required parameter 'instanceNo' is set
		if (instanceNo == null) {
			throw new SdkException("Missing the required parameter 'instanceNo' when calling clustersUuidNodePoolInstanceNoPatch");
		}
		
		// path
		String path = "/clusters/{uuid}/node-pool/{instanceNo}"
			.replaceAll("\\{" + "uuid" + "\\}", uuid)
			.replaceAll("\\{" + "instanceNo" + "\\}", instanceNo);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "PATCH", path, queryParams, formParams, httpHeaders, nodePoolUpdateBody, false, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @param instanceNo instanceNo (required)
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	nodePoolUpdateBody  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> clustersUuidNodePoolInstanceNoPatch(String uuid, String instanceNo, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidNodePoolInstanceNoPatch");
		}
		// verify the required parameter 'instanceNo' is set
		if (instanceNo == null) {
			throw new SdkException("Missing the required parameter 'instanceNo' when calling clustersUuidNodePoolInstanceNoPatch");
		}
		
		// path
		String path = "/clusters/{uuid}/node-pool/{instanceNo}"
			.replaceAll("\\{" + "uuid" + "\\}", uuid)
			.replaceAll("\\{" + "instanceNo" + "\\}", instanceNo);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "PATCH", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param nodePoolCreationBody  (required)
	 * @param uuid uuid (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void clustersUuidNodePoolPost(NodePoolCreationBody nodePoolCreationBody, String uuid) throws ApiException, SdkException {
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidNodePoolPost");
		}
		
		// path
		String path = "/clusters/{uuid}/node-pool"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, nodePoolCreationBody, false, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	nodePoolCreationBody  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> clustersUuidNodePoolPost(String uuid, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidNodePoolPost");
		}
		
		// path
		String path = "/clusters/{uuid}/node-pool"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @return WorkerNodeRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<WorkerNodeRes> clustersUuidNodesGet(String uuid) throws ApiException, SdkException {
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidNodesGet");
		}
		
		// path
		String path = "/clusters/{uuid}/nodes"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, WorkerNodeRes.class);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	WorkerNodeRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> clustersUuidNodesGet(String uuid, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidNodesGet");
		}
		
		// path
		String path = "/clusters/{uuid}/nodes"
			.replaceAll("\\{" + "uuid" + "\\}", uuid);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @param instanceNo instanceNo (required)
	 * @param nodePoolId nodePoolId (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void clustersUuidNodesInstanceNoDelete(String uuid, String instanceNo, String nodePoolId) throws ApiException, SdkException {
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidNodesInstanceNoDelete");
		}
		// verify the required parameter 'instanceNo' is set
		if (instanceNo == null) {
			throw new SdkException("Missing the required parameter 'instanceNo' when calling clustersUuidNodesInstanceNoDelete");
		}
		// verify the required parameter 'nodePoolId' is set
		if (nodePoolId == null) {
			throw new SdkException("Missing the required parameter 'nodePoolId' when calling clustersUuidNodesInstanceNoDelete");
		}
		
		// path
		String path = "/clusters/{uuid}/nodes/{instanceNo}"
			.replaceAll("\\{" + "uuid" + "\\}", uuid)
			.replaceAll("\\{" + "instanceNo" + "\\}", instanceNo);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();
		if (nodePoolId != null) {
			queryParams.put("nodePoolId", nodePoolId);
		}

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "DELETE", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param uuid uuid (required)
	 * @param instanceNo instanceNo (required)
	 * @param httpHeaders
	 * @param queryParams
	 *	nodePoolId nodePoolId (required)
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> clustersUuidNodesInstanceNoDelete(String uuid, String instanceNo, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'uuid' is set
		if (uuid == null) {
			throw new SdkException("Missing the required parameter 'uuid' when calling clustersUuidNodesInstanceNoDelete");
		}
		// verify the required parameter 'instanceNo' is set
		if (instanceNo == null) {
			throw new SdkException("Missing the required parameter 'instanceNo' when calling clustersUuidNodesInstanceNoDelete");
		}
		// verify the required parameter 'nodePoolId' is set
		if (queryParams.get("nodePoolId") == null) {
			throw new SdkException("Missing the required parameter 'queryParams.nodePoolId' when calling clustersUuidNodesInstanceNoDelete");
		}
		
		// path
		String path = "/clusters/{uuid}/nodes/{instanceNo}"
			.replaceAll("\\{" + "uuid" + "\\}", uuid)
			.replaceAll("\\{" + "instanceNo" + "\\}", instanceNo);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "DELETE", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @return OptionsRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<OptionsRes> optionVersionGet() throws ApiException, SdkException {
		
		// path
		String path = "/option/version";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, OptionsRes.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	OptionsRes
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> optionVersionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/option/version";

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void rootGet() throws ApiException, SdkException {
		
		// path
		String path = "/";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> rootGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/";

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

}
