/*
 * monitoring
 * <br/>https://ncloud.apigw.ntruss.com/monitoring/v2
 *
 * NBP corp.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.monitoring.api;

import java.util.HashMap;
import java.util.Map;

import com.ncloud.ApiClient;
import com.ncloud.ApiRequest;
import com.ncloud.ApiResponse;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.monitoring.model.GetListMetricsRequest;
import com.ncloud.monitoring.model.GetListMetricsResponse;
import com.ncloud.monitoring.model.GetMetricStatisticListRequest;
import com.ncloud.monitoring.model.GetMetricStatisticListResponse;

public class V2Api {

	private final String basePath = "/monitoring/v2";

	private final ApiClient apiClient;

	public V2Api(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	/**
	 * 
	 * B.메트릭 리스트 조회
	 * @param getListMetricsRequest getListMetricsRequest (required)
	 * @return GetListMetricsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetListMetricsResponse> getListMetricsGet(GetListMetricsRequest getListMetricsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getListMetrics";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getListMetricsRequest, true, false);
		return apiClient.call(apiRequest, GetListMetricsResponse.class);
	}

	/**
	 * 
	 * B.메트릭 리스트 조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getListMetricsRequest getListMetricsRequest (required)
	 * @return byte[]
	 *	GetListMetricsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getListMetricsGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getListMetrics";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * B.메트릭 리스트 조회
	 * @param getListMetricsRequest getListMetricsRequest (required)
	 * @return GetListMetricsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetListMetricsResponse> getListMetricsPost(GetListMetricsRequest getListMetricsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getListMetrics";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getListMetricsRequest, true, false);
		return apiClient.call(apiRequest, GetListMetricsResponse.class);
	}

	/**
	 * 
	 * B.메트릭 리스트 조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getListMetricsRequest getListMetricsRequest (required)
	 * @return byte[]
	 *	GetListMetricsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getListMetricsPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getListMetrics";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * A.메트릭 통계 조회
	 * @param getMetricStatisticListRequest getMetricStatisticListRequest (required)
	 * @return GetMetricStatisticListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetMetricStatisticListResponse> getMetricStatisticListGet(GetMetricStatisticListRequest getMetricStatisticListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getMetricStatisticList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getMetricStatisticListRequest, true, false);
		return apiClient.call(apiRequest, GetMetricStatisticListResponse.class);
	}

	/**
	 * 
	 * A.메트릭 통계 조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getMetricStatisticListRequest getMetricStatisticListRequest (required)
	 * @return byte[]
	 *	GetMetricStatisticListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getMetricStatisticListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getMetricStatisticList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * A.메트릭 통계 조회
	 * @param getMetricStatisticListRequest getMetricStatisticListRequest (required)
	 * @return GetMetricStatisticListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetMetricStatisticListResponse> getMetricStatisticListPost(GetMetricStatisticListRequest getMetricStatisticListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getMetricStatisticList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getMetricStatisticListRequest, true, false);
		return apiClient.call(apiRequest, GetMetricStatisticListResponse.class);
	}

	/**
	 * 
	 * A.메트릭 통계 조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getMetricStatisticListRequest getMetricStatisticListRequest (required)
	 * @return byte[]
	 *	GetMetricStatisticListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getMetricStatisticListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getMetricStatisticList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

}
