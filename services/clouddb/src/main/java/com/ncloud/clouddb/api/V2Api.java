/*
 * clouddb
 * Cloud DB<br/>https://ncloud.apigw.ntruss.com/clouddb/v2
 *
 * NBP corp.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.clouddb.api;

import java.util.HashMap;
import java.util.Map;

import com.ncloud.ApiClient;
import com.ncloud.ApiRequest;
import com.ncloud.ApiResponse;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.clouddb.model.CreateCloudDBInstanceRequest;
import com.ncloud.clouddb.model.CreateCloudDBInstanceResponse;
import com.ncloud.clouddb.model.DeleteCloudDBServerInstanceRequest;
import com.ncloud.clouddb.model.DeleteCloudDBServerInstanceResponse;
import com.ncloud.clouddb.model.DownloadDmsFileRequest;
import com.ncloud.clouddb.model.DownloadDmsFileResponse;
import com.ncloud.clouddb.model.FlushCloudDBInstanceRequest;
import com.ncloud.clouddb.model.FlushCloudDBInstanceResponse;
import com.ncloud.clouddb.model.GetBackupListRequest;
import com.ncloud.clouddb.model.GetBackupListResponse;
import com.ncloud.clouddb.model.GetCloudDBConfigGroupListRequest;
import com.ncloud.clouddb.model.GetCloudDBConfigGroupListResponse;
import com.ncloud.clouddb.model.GetCloudDBImageProductListRequest;
import com.ncloud.clouddb.model.GetCloudDBImageProductListResponse;
import com.ncloud.clouddb.model.GetCloudDBInstanceListRequest;
import com.ncloud.clouddb.model.GetCloudDBInstanceListResponse;
import com.ncloud.clouddb.model.GetCloudDBProductListRequest;
import com.ncloud.clouddb.model.GetCloudDBProductListResponse;
import com.ncloud.clouddb.model.GetDmsOperationRequest;
import com.ncloud.clouddb.model.GetDmsOperationResponse;
import com.ncloud.clouddb.model.GetObjectStorageBackupListRequest;
import com.ncloud.clouddb.model.GetObjectStorageBackupListResponse;
import com.ncloud.clouddb.model.RebootCloudDBServerInstanceRequest;
import com.ncloud.clouddb.model.RebootCloudDBServerInstanceResponse;
import com.ncloud.clouddb.model.RestoreDmsDatabaseRequest;
import com.ncloud.clouddb.model.RestoreDmsDatabaseResponse;
import com.ncloud.clouddb.model.RestoreDmsTransactionLogRequest;
import com.ncloud.clouddb.model.RestoreDmsTransactionLogResponse;
import com.ncloud.clouddb.model.SetObjectStorageInfoRequest;
import com.ncloud.clouddb.model.SetObjectStorageInfoResponse;
import com.ncloud.clouddb.model.UploadDmsFileRequest;
import com.ncloud.clouddb.model.UploadDmsFileResponse;

public class V2Api {

	private final String basePath = "/clouddb/v2";

	private final ApiClient apiClient;

	public V2Api(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	/**
	 * 
	 * CloudDB인스턴스생성
	 * @param createCloudDBInstanceRequest createCloudDBInstanceRequest (required)
	 * @return CreateCloudDBInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateCloudDBInstanceResponse> createCloudDBInstanceGet(CreateCloudDBInstanceRequest createCloudDBInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createCloudDBInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createCloudDBInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateCloudDBInstanceResponse.class);
	}

	/**
	 * 
	 * CloudDB인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createCloudDBInstanceRequest createCloudDBInstanceRequest (required)
	 * @return byte[]
	 *	CreateCloudDBInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createCloudDBInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createCloudDBInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB인스턴스생성
	 * @param createCloudDBInstanceRequest createCloudDBInstanceRequest (required)
	 * @return CreateCloudDBInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateCloudDBInstanceResponse> createCloudDBInstancePost(CreateCloudDBInstanceRequest createCloudDBInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createCloudDBInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createCloudDBInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateCloudDBInstanceResponse.class);
	}

	/**
	 * 
	 * CloudDB인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createCloudDBInstanceRequest createCloudDBInstanceRequest (required)
	 * @return byte[]
	 *	CreateCloudDBInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createCloudDBInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createCloudDBInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB서버인스턴스삭제
	 * @param deleteCloudDBServerInstanceRequest deleteCloudDBServerInstanceRequest (required)
	 * @return DeleteCloudDBServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteCloudDBServerInstanceResponse> deleteCloudDBServerInstanceGet(DeleteCloudDBServerInstanceRequest deleteCloudDBServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteCloudDBServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteCloudDBServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, DeleteCloudDBServerInstanceResponse.class);
	}

	/**
	 * 
	 * CloudDB서버인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteCloudDBServerInstanceRequest deleteCloudDBServerInstanceRequest (required)
	 * @return byte[]
	 *	DeleteCloudDBServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteCloudDBServerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteCloudDBServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB서버인스턴스삭제
	 * @param deleteCloudDBServerInstanceRequest deleteCloudDBServerInstanceRequest (required)
	 * @return DeleteCloudDBServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteCloudDBServerInstanceResponse> deleteCloudDBServerInstancePost(DeleteCloudDBServerInstanceRequest deleteCloudDBServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteCloudDBServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteCloudDBServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, DeleteCloudDBServerInstanceResponse.class);
	}

	/**
	 * 
	 * CloudDB서버인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteCloudDBServerInstanceRequest deleteCloudDBServerInstanceRequest (required)
	 * @return byte[]
	 *	DeleteCloudDBServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteCloudDBServerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteCloudDBServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * DMS파일다운로드
	 * @param downloadDmsFileRequest downloadDmsFileRequest (required)
	 * @return DownloadDmsFileResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DownloadDmsFileResponse> downloadDmsFileGet(DownloadDmsFileRequest downloadDmsFileRequest) throws ApiException, SdkException {
		
		// path
		String path = "/downloadDmsFile";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, downloadDmsFileRequest, true, false);
		return apiClient.call(apiRequest, DownloadDmsFileResponse.class);
	}

	/**
	 * 
	 * DMS파일다운로드
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	downloadDmsFileRequest downloadDmsFileRequest (required)
	 * @return byte[]
	 *	DownloadDmsFileResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> downloadDmsFileGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/downloadDmsFile";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * DMS파일다운로드
	 * @param downloadDmsFileRequest downloadDmsFileRequest (required)
	 * @return DownloadDmsFileResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DownloadDmsFileResponse> downloadDmsFilePost(DownloadDmsFileRequest downloadDmsFileRequest) throws ApiException, SdkException {
		
		// path
		String path = "/downloadDmsFile";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, downloadDmsFileRequest, true, false);
		return apiClient.call(apiRequest, DownloadDmsFileResponse.class);
	}

	/**
	 * 
	 * DMS파일다운로드
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	downloadDmsFileRequest downloadDmsFileRequest (required)
	 * @return byte[]
	 *	DownloadDmsFileResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> downloadDmsFilePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/downloadDmsFile";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB Flush
	 * @param flushCloudDBInstanceRequest flushCloudDBInstanceRequest (required)
	 * @return FlushCloudDBInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<FlushCloudDBInstanceResponse> flushCloudDBInstanceGet(FlushCloudDBInstanceRequest flushCloudDBInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/flushCloudDBInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, flushCloudDBInstanceRequest, true, false);
		return apiClient.call(apiRequest, FlushCloudDBInstanceResponse.class);
	}

	/**
	 * 
	 * CloudDB Flush
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	flushCloudDBInstanceRequest flushCloudDBInstanceRequest (required)
	 * @return byte[]
	 *	FlushCloudDBInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> flushCloudDBInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/flushCloudDBInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB Flush
	 * @param flushCloudDBInstanceRequest flushCloudDBInstanceRequest (required)
	 * @return FlushCloudDBInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<FlushCloudDBInstanceResponse> flushCloudDBInstancePost(FlushCloudDBInstanceRequest flushCloudDBInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/flushCloudDBInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, flushCloudDBInstanceRequest, true, false);
		return apiClient.call(apiRequest, FlushCloudDBInstanceResponse.class);
	}

	/**
	 * 
	 * CloudDB Flush
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	flushCloudDBInstanceRequest flushCloudDBInstanceRequest (required)
	 * @return byte[]
	 *	FlushCloudDBInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> flushCloudDBInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/flushCloudDBInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 백업리스트조회
	 * @param getBackupListRequest getBackupListRequest (required)
	 * @return GetBackupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBackupListResponse> getBackupListGet(GetBackupListRequest getBackupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBackupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getBackupListRequest, true, false);
		return apiClient.call(apiRequest, GetBackupListResponse.class);
	}

	/**
	 * 
	 * 백업리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBackupListRequest getBackupListRequest (required)
	 * @return byte[]
	 *	GetBackupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBackupListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBackupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 백업리스트조회
	 * @param getBackupListRequest getBackupListRequest (required)
	 * @return GetBackupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBackupListResponse> getBackupListPost(GetBackupListRequest getBackupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBackupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getBackupListRequest, true, false);
		return apiClient.call(apiRequest, GetBackupListResponse.class);
	}

	/**
	 * 
	 * 백업리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBackupListRequest getBackupListRequest (required)
	 * @return byte[]
	 *	GetBackupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBackupListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBackupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB설정그룹리스트조회
	 * @param getCloudDBConfigGroupListRequest getCloudDBConfigGroupListRequest (required)
	 * @return GetCloudDBConfigGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetCloudDBConfigGroupListResponse> getCloudDBConfigGroupListGet(GetCloudDBConfigGroupListRequest getCloudDBConfigGroupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getCloudDBConfigGroupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getCloudDBConfigGroupListRequest, true, false);
		return apiClient.call(apiRequest, GetCloudDBConfigGroupListResponse.class);
	}

	/**
	 * 
	 * CloudDB설정그룹리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getCloudDBConfigGroupListRequest getCloudDBConfigGroupListRequest (required)
	 * @return byte[]
	 *	GetCloudDBConfigGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCloudDBConfigGroupListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCloudDBConfigGroupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB설정그룹리스트조회
	 * @param getCloudDBConfigGroupListRequest getCloudDBConfigGroupListRequest (required)
	 * @return GetCloudDBConfigGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetCloudDBConfigGroupListResponse> getCloudDBConfigGroupListPost(GetCloudDBConfigGroupListRequest getCloudDBConfigGroupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getCloudDBConfigGroupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getCloudDBConfigGroupListRequest, true, false);
		return apiClient.call(apiRequest, GetCloudDBConfigGroupListResponse.class);
	}

	/**
	 * 
	 * CloudDB설정그룹리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getCloudDBConfigGroupListRequest getCloudDBConfigGroupListRequest (required)
	 * @return byte[]
	 *	GetCloudDBConfigGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCloudDBConfigGroupListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCloudDBConfigGroupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB이미지상품리스트조회
	 * @param getCloudDBImageProductListRequest getCloudDBImageProductListRequest (required)
	 * @return GetCloudDBImageProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetCloudDBImageProductListResponse> getCloudDBImageProductListGet(GetCloudDBImageProductListRequest getCloudDBImageProductListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getCloudDBImageProductList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getCloudDBImageProductListRequest, true, false);
		return apiClient.call(apiRequest, GetCloudDBImageProductListResponse.class);
	}

	/**
	 * 
	 * CloudDB이미지상품리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getCloudDBImageProductListRequest getCloudDBImageProductListRequest (required)
	 * @return byte[]
	 *	GetCloudDBImageProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCloudDBImageProductListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCloudDBImageProductList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB이미지상품리스트
	 * @param getCloudDBImageProductListRequest getCloudDBImageProductListRequest (required)
	 * @return GetCloudDBImageProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetCloudDBImageProductListResponse> getCloudDBImageProductListPost(GetCloudDBImageProductListRequest getCloudDBImageProductListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getCloudDBImageProductList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getCloudDBImageProductListRequest, true, false);
		return apiClient.call(apiRequest, GetCloudDBImageProductListResponse.class);
	}

	/**
	 * 
	 * CloudDB이미지상품리스트
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getCloudDBImageProductListRequest getCloudDBImageProductListRequest (required)
	 * @return byte[]
	 *	GetCloudDBImageProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCloudDBImageProductListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCloudDBImageProductList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB인스턴스리스트조회
	 * @param getCloudDBInstanceListRequest getCloudDBInstanceListRequest (required)
	 * @return GetCloudDBInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetCloudDBInstanceListResponse> getCloudDBInstanceListGet(GetCloudDBInstanceListRequest getCloudDBInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getCloudDBInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getCloudDBInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetCloudDBInstanceListResponse.class);
	}

	/**
	 * 
	 * CloudDB인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getCloudDBInstanceListRequest getCloudDBInstanceListRequest (required)
	 * @return byte[]
	 *	GetCloudDBInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCloudDBInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCloudDBInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB인스턴스리스트조회
	 * @param getCloudDBInstanceListRequest getCloudDBInstanceListRequest (required)
	 * @return GetCloudDBInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetCloudDBInstanceListResponse> getCloudDBInstanceListPost(GetCloudDBInstanceListRequest getCloudDBInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getCloudDBInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getCloudDBInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetCloudDBInstanceListResponse.class);
	}

	/**
	 * 
	 * CloudDB인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getCloudDBInstanceListRequest getCloudDBInstanceListRequest (required)
	 * @return byte[]
	 *	GetCloudDBInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCloudDBInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCloudDBInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB상품리스트조회
	 * @param getCloudDBProductListRequest getCloudDBProductListRequest (required)
	 * @return GetCloudDBProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetCloudDBProductListResponse> getCloudDBProductListGet(GetCloudDBProductListRequest getCloudDBProductListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getCloudDBProductList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getCloudDBProductListRequest, true, false);
		return apiClient.call(apiRequest, GetCloudDBProductListResponse.class);
	}

	/**
	 * 
	 * CloudDB상품리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getCloudDBProductListRequest getCloudDBProductListRequest (required)
	 * @return byte[]
	 *	GetCloudDBProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCloudDBProductListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCloudDBProductList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB상품리스트조회
	 * @param getCloudDBProductListRequest getCloudDBProductListRequest (required)
	 * @return GetCloudDBProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetCloudDBProductListResponse> getCloudDBProductListPost(GetCloudDBProductListRequest getCloudDBProductListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getCloudDBProductList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getCloudDBProductListRequest, true, false);
		return apiClient.call(apiRequest, GetCloudDBProductListResponse.class);
	}

	/**
	 * 
	 * CloudDB상품리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getCloudDBProductListRequest getCloudDBProductListRequest (required)
	 * @return byte[]
	 *	GetCloudDBProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCloudDBProductListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCloudDBProductList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * DMS상태조회
	 * @param getDmsOperationRequest getDmsOperationRequest (required)
	 * @return GetDmsOperationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetDmsOperationResponse> getDmsOperationGet(GetDmsOperationRequest getDmsOperationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getDmsOperation";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getDmsOperationRequest, true, false);
		return apiClient.call(apiRequest, GetDmsOperationResponse.class);
	}

	/**
	 * 
	 * DMS상태조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getDmsOperationRequest getDmsOperationRequest (required)
	 * @return byte[]
	 *	GetDmsOperationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getDmsOperationGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getDmsOperation";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * DMS상태조회
	 * @param getDmsOperationRequest getDmsOperationRequest (required)
	 * @return GetDmsOperationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetDmsOperationResponse> getDmsOperationPost(GetDmsOperationRequest getDmsOperationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getDmsOperation";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getDmsOperationRequest, true, false);
		return apiClient.call(apiRequest, GetDmsOperationResponse.class);
	}

	/**
	 * 
	 * DMS상태조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getDmsOperationRequest getDmsOperationRequest (required)
	 * @return byte[]
	 *	GetDmsOperationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getDmsOperationPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getDmsOperation";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오브젝트스토리지백업리스트조회
	 * @param getObjectStorageBackupListRequest getObjectStorageBackupListRequest (required)
	 * @return GetObjectStorageBackupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetObjectStorageBackupListResponse> getObjectStorageBackupListGet(GetObjectStorageBackupListRequest getObjectStorageBackupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getObjectStorageBackupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getObjectStorageBackupListRequest, true, false);
		return apiClient.call(apiRequest, GetObjectStorageBackupListResponse.class);
	}

	/**
	 * 
	 * 오브젝트스토리지백업리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getObjectStorageBackupListRequest getObjectStorageBackupListRequest (required)
	 * @return byte[]
	 *	GetObjectStorageBackupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getObjectStorageBackupListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getObjectStorageBackupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오브젝트스토리지백업리스트조회
	 * @param getObjectStorageBackupListRequest getObjectStorageBackupListRequest (required)
	 * @return GetObjectStorageBackupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetObjectStorageBackupListResponse> getObjectStorageBackupListPost(GetObjectStorageBackupListRequest getObjectStorageBackupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getObjectStorageBackupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getObjectStorageBackupListRequest, true, false);
		return apiClient.call(apiRequest, GetObjectStorageBackupListResponse.class);
	}

	/**
	 * 
	 * 오브젝트스토리지백업리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getObjectStorageBackupListRequest getObjectStorageBackupListRequest (required)
	 * @return byte[]
	 *	GetObjectStorageBackupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getObjectStorageBackupListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getObjectStorageBackupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB서버인스턴스재부팅
	 * @param rebootCloudDBServerInstanceRequest rebootCloudDBServerInstanceRequest (required)
	 * @return RebootCloudDBServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RebootCloudDBServerInstanceResponse> rebootCloudDBServerInstanceGet(RebootCloudDBServerInstanceRequest rebootCloudDBServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/rebootCloudDBServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, rebootCloudDBServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, RebootCloudDBServerInstanceResponse.class);
	}

	/**
	 * 
	 * CloudDB서버인스턴스재부팅
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	rebootCloudDBServerInstanceRequest rebootCloudDBServerInstanceRequest (required)
	 * @return byte[]
	 *	RebootCloudDBServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> rebootCloudDBServerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/rebootCloudDBServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CloudDB서버인스턴스재부팅
	 * @param rebootCloudDBServerInstanceRequest rebootCloudDBServerInstanceRequest (required)
	 * @return RebootCloudDBServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RebootCloudDBServerInstanceResponse> rebootCloudDBServerInstancePost(RebootCloudDBServerInstanceRequest rebootCloudDBServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/rebootCloudDBServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, rebootCloudDBServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, RebootCloudDBServerInstanceResponse.class);
	}

	/**
	 * 
	 * CloudDB서버인스턴스재부팅
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	rebootCloudDBServerInstanceRequest rebootCloudDBServerInstanceRequest (required)
	 * @return byte[]
	 *	RebootCloudDBServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> rebootCloudDBServerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/rebootCloudDBServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * DMS데이터베이스복구
	 * @param restoreDmsDatabaseRequest restoreDmsDatabaseRequest (required)
	 * @return RestoreDmsDatabaseResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RestoreDmsDatabaseResponse> restoreDmsDatabaseGet(RestoreDmsDatabaseRequest restoreDmsDatabaseRequest) throws ApiException, SdkException {
		
		// path
		String path = "/restoreDmsDatabase";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, restoreDmsDatabaseRequest, true, false);
		return apiClient.call(apiRequest, RestoreDmsDatabaseResponse.class);
	}

	/**
	 * 
	 * DMS데이터베이스복구
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	restoreDmsDatabaseRequest restoreDmsDatabaseRequest (required)
	 * @return byte[]
	 *	RestoreDmsDatabaseResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> restoreDmsDatabaseGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/restoreDmsDatabase";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * DMS데이터베이스복구
	 * @param restoreDmsDatabaseRequest restoreDmsDatabaseRequest (required)
	 * @return RestoreDmsDatabaseResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RestoreDmsDatabaseResponse> restoreDmsDatabasePost(RestoreDmsDatabaseRequest restoreDmsDatabaseRequest) throws ApiException, SdkException {
		
		// path
		String path = "/restoreDmsDatabase";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, restoreDmsDatabaseRequest, true, false);
		return apiClient.call(apiRequest, RestoreDmsDatabaseResponse.class);
	}

	/**
	 * 
	 * DMS데이터베이스복구
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	restoreDmsDatabaseRequest restoreDmsDatabaseRequest (required)
	 * @return byte[]
	 *	RestoreDmsDatabaseResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> restoreDmsDatabasePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/restoreDmsDatabase";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * DMS트랜잭션로그복구
	 * @param restoreDmsTransactionLogRequest restoreDmsTransactionLogRequest (required)
	 * @return RestoreDmsTransactionLogResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RestoreDmsTransactionLogResponse> restoreDmsTransactionLogGet(RestoreDmsTransactionLogRequest restoreDmsTransactionLogRequest) throws ApiException, SdkException {
		
		// path
		String path = "/restoreDmsTransactionLog";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, restoreDmsTransactionLogRequest, true, false);
		return apiClient.call(apiRequest, RestoreDmsTransactionLogResponse.class);
	}

	/**
	 * 
	 * DMS트랜잭션로그복구
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	restoreDmsTransactionLogRequest restoreDmsTransactionLogRequest (required)
	 * @return byte[]
	 *	RestoreDmsTransactionLogResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> restoreDmsTransactionLogGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/restoreDmsTransactionLog";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * DMS트랜잭션로그복구
	 * @param restoreDmsTransactionLogRequest restoreDmsTransactionLogRequest (required)
	 * @return RestoreDmsTransactionLogResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RestoreDmsTransactionLogResponse> restoreDmsTransactionLogPost(RestoreDmsTransactionLogRequest restoreDmsTransactionLogRequest) throws ApiException, SdkException {
		
		// path
		String path = "/restoreDmsTransactionLog";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, restoreDmsTransactionLogRequest, true, false);
		return apiClient.call(apiRequest, RestoreDmsTransactionLogResponse.class);
	}

	/**
	 * 
	 * DMS트랜잭션로그복구
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	restoreDmsTransactionLogRequest restoreDmsTransactionLogRequest (required)
	 * @return byte[]
	 *	RestoreDmsTransactionLogResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> restoreDmsTransactionLogPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/restoreDmsTransactionLog";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오브젝트스토리지정보설정
	 * @param setObjectStorageInfoRequest setObjectStorageInfoRequest (required)
	 * @return SetObjectStorageInfoResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetObjectStorageInfoResponse> setObjectStorageInfoGet(SetObjectStorageInfoRequest setObjectStorageInfoRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setObjectStorageInfo";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setObjectStorageInfoRequest, true, false);
		return apiClient.call(apiRequest, SetObjectStorageInfoResponse.class);
	}

	/**
	 * 
	 * 오브젝트스토리지정보설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setObjectStorageInfoRequest setObjectStorageInfoRequest (required)
	 * @return byte[]
	 *	SetObjectStorageInfoResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setObjectStorageInfoGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setObjectStorageInfo";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 오브젝트스토리지정보설정
	 * @param setObjectStorageInfoRequest setObjectStorageInfoRequest (required)
	 * @return SetObjectStorageInfoResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetObjectStorageInfoResponse> setObjectStorageInfoPost(SetObjectStorageInfoRequest setObjectStorageInfoRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setObjectStorageInfo";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setObjectStorageInfoRequest, true, false);
		return apiClient.call(apiRequest, SetObjectStorageInfoResponse.class);
	}

	/**
	 * 
	 * 오브젝트스토리지정보설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setObjectStorageInfoRequest setObjectStorageInfoRequest (required)
	 * @return byte[]
	 *	SetObjectStorageInfoResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setObjectStorageInfoPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setObjectStorageInfo";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * DMS파일업로드
	 * @param uploadDmsFileRequest uploadDmsFileRequest (required)
	 * @return UploadDmsFileResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<UploadDmsFileResponse> uploadDmsFileGet(UploadDmsFileRequest uploadDmsFileRequest) throws ApiException, SdkException {
		
		// path
		String path = "/uploadDmsFile";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, uploadDmsFileRequest, true, false);
		return apiClient.call(apiRequest, UploadDmsFileResponse.class);
	}

	/**
	 * 
	 * DMS파일업로드
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	uploadDmsFileRequest uploadDmsFileRequest (required)
	 * @return byte[]
	 *	UploadDmsFileResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> uploadDmsFileGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/uploadDmsFile";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * DMS파일업로드
	 * @param uploadDmsFileRequest uploadDmsFileRequest (required)
	 * @return UploadDmsFileResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<UploadDmsFileResponse> uploadDmsFilePost(UploadDmsFileRequest uploadDmsFileRequest) throws ApiException, SdkException {
		
		// path
		String path = "/uploadDmsFile";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, uploadDmsFileRequest, true, false);
		return apiClient.call(apiRequest, UploadDmsFileResponse.class);
	}

	/**
	 * 
	 * DMS파일업로드
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	uploadDmsFileRequest uploadDmsFileRequest (required)
	 * @return byte[]
	 *	UploadDmsFileResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> uploadDmsFilePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/uploadDmsFile";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

}
