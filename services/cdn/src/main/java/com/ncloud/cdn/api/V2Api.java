/*
 * cdn
 * <br/>https://ncloud.apigw.ntruss.com/cdn/v2
 *
 * NBP corp.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.cdn.api;

import java.util.HashMap;
import java.util.Map;

import com.ncloud.ApiClient;
import com.ncloud.ApiRequest;
import com.ncloud.ApiResponse;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.cdn.model.GetCdnPlusInstanceListRequest;
import com.ncloud.cdn.model.GetCdnPlusInstanceListResponse;
import com.ncloud.cdn.model.GetCdnPlusPurgeHistoryListRequest;
import com.ncloud.cdn.model.GetCdnPlusPurgeHistoryListResponse;
import com.ncloud.cdn.model.GetGlobalCdnInstanceListRequest;
import com.ncloud.cdn.model.GetGlobalCdnInstanceListResponse;
import com.ncloud.cdn.model.GetGlobalCdnPurgeHistoryListRequest;
import com.ncloud.cdn.model.GetGlobalCdnPurgeHistoryListResponse;
import com.ncloud.cdn.model.RequestCdnPlusPurgeRequest;
import com.ncloud.cdn.model.RequestCdnPlusPurgeResponse;
import com.ncloud.cdn.model.RequestGlobalCdnPurgeRequest;
import com.ncloud.cdn.model.RequestGlobalCdnPurgeResponse;

public class V2Api {

	private final String basePath = "/cdn/v2";

	private final ApiClient apiClient;

	public V2Api(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	/**
	 * 
	 * CDN+인스턴스리스트조회
	 * @param getCdnPlusInstanceListRequest getCdnPlusInstanceListRequest (required)
	 * @return GetCdnPlusInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetCdnPlusInstanceListResponse> getCdnPlusInstanceListGet(GetCdnPlusInstanceListRequest getCdnPlusInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getCdnPlusInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getCdnPlusInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetCdnPlusInstanceListResponse.class);
	}

	/**
	 * 
	 * CDN+인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getCdnPlusInstanceListRequest getCdnPlusInstanceListRequest (required)
	 * @return byte[]
	 *	GetCdnPlusInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCdnPlusInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCdnPlusInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CDN+인스턴스리스트조회
	 * @param getCdnPlusInstanceListRequest getCdnPlusInstanceListRequest (required)
	 * @return GetCdnPlusInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetCdnPlusInstanceListResponse> getCdnPlusInstanceListPost(GetCdnPlusInstanceListRequest getCdnPlusInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getCdnPlusInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getCdnPlusInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetCdnPlusInstanceListResponse.class);
	}

	/**
	 * 
	 * CDN+인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getCdnPlusInstanceListRequest getCdnPlusInstanceListRequest (required)
	 * @return byte[]
	 *	GetCdnPlusInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCdnPlusInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCdnPlusInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getCdnPlusMonitoringDataGet() throws ApiException, SdkException {
		
		// path
		String path = "/getCdnPlusMonitoringData";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCdnPlusMonitoringDataGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCdnPlusMonitoringData";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getCdnPlusMonitoringDataPost() throws ApiException, SdkException {
		
		// path
		String path = "/getCdnPlusMonitoringData";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCdnPlusMonitoringDataPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCdnPlusMonitoringData";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CDN+퍼지기록조회
	 * @param getCdnPlusPurgeHistoryListRequest getCdnPlusPurgeHistoryListRequest (required)
	 * @return GetCdnPlusPurgeHistoryListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetCdnPlusPurgeHistoryListResponse> getCdnPlusPurgeHistoryListGet(GetCdnPlusPurgeHistoryListRequest getCdnPlusPurgeHistoryListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getCdnPlusPurgeHistoryList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getCdnPlusPurgeHistoryListRequest, true, false);
		return apiClient.call(apiRequest, GetCdnPlusPurgeHistoryListResponse.class);
	}

	/**
	 * 
	 * CDN+퍼지기록조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getCdnPlusPurgeHistoryListRequest getCdnPlusPurgeHistoryListRequest (required)
	 * @return byte[]
	 *	GetCdnPlusPurgeHistoryListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCdnPlusPurgeHistoryListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCdnPlusPurgeHistoryList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CDN+퍼지기록조회
	 * @param getCdnPlusPurgeHistoryListRequest getCdnPlusPurgeHistoryListRequest (required)
	 * @return GetCdnPlusPurgeHistoryListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetCdnPlusPurgeHistoryListResponse> getCdnPlusPurgeHistoryListPost(GetCdnPlusPurgeHistoryListRequest getCdnPlusPurgeHistoryListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getCdnPlusPurgeHistoryList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getCdnPlusPurgeHistoryListRequest, true, false);
		return apiClient.call(apiRequest, GetCdnPlusPurgeHistoryListResponse.class);
	}

	/**
	 * 
	 * CDN+퍼지기록조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getCdnPlusPurgeHistoryListRequest getCdnPlusPurgeHistoryListRequest (required)
	 * @return byte[]
	 *	GetCdnPlusPurgeHistoryListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCdnPlusPurgeHistoryListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCdnPlusPurgeHistoryList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getCdnPlusUsageDataGet() throws ApiException, SdkException {
		
		// path
		String path = "/getCdnPlusUsageData";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCdnPlusUsageDataGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCdnPlusUsageData";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getCdnPlusUsageDataPost() throws ApiException, SdkException {
		
		// path
		String path = "/getCdnPlusUsageData";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getCdnPlusUsageDataPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getCdnPlusUsageData";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * Global CDN인스턴스리스트조회
	 * @param getGlobalCdnInstanceListRequest getGlobalCdnInstanceListRequest (required)
	 * @return GetGlobalCdnInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetGlobalCdnInstanceListResponse> getGlobalCdnInstanceListGet(GetGlobalCdnInstanceListRequest getGlobalCdnInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getGlobalCdnInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getGlobalCdnInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetGlobalCdnInstanceListResponse.class);
	}

	/**
	 * 
	 * Global CDN인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getGlobalCdnInstanceListRequest getGlobalCdnInstanceListRequest (required)
	 * @return byte[]
	 *	GetGlobalCdnInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getGlobalCdnInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getGlobalCdnInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * Global CDN 인스턴스리스트조회
	 * @param getGlobalCdnInstanceListRequest getGlobalCdnInstanceListRequest (required)
	 * @return GetGlobalCdnInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetGlobalCdnInstanceListResponse> getGlobalCdnInstanceListPost(GetGlobalCdnInstanceListRequest getGlobalCdnInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getGlobalCdnInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getGlobalCdnInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetGlobalCdnInstanceListResponse.class);
	}

	/**
	 * 
	 * Global CDN 인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getGlobalCdnInstanceListRequest getGlobalCdnInstanceListRequest (required)
	 * @return byte[]
	 *	GetGlobalCdnInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getGlobalCdnInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getGlobalCdnInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getGlobalCdnMonitoringDataGet() throws ApiException, SdkException {
		
		// path
		String path = "/getGlobalCdnMonitoringData";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getGlobalCdnMonitoringDataGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getGlobalCdnMonitoringData";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getGlobalCdnMonitoringDataPost() throws ApiException, SdkException {
		
		// path
		String path = "/getGlobalCdnMonitoringData";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getGlobalCdnMonitoringDataPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getGlobalCdnMonitoringData";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * Global CDN퍼지기록조회
	 * @param getGlobalCdnPurgeHistoryListRequest getGlobalCdnPurgeHistoryListRequest (required)
	 * @return GetGlobalCdnPurgeHistoryListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetGlobalCdnPurgeHistoryListResponse> getGlobalCdnPurgeHistoryListGet(GetGlobalCdnPurgeHistoryListRequest getGlobalCdnPurgeHistoryListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getGlobalCdnPurgeHistoryList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getGlobalCdnPurgeHistoryListRequest, true, false);
		return apiClient.call(apiRequest, GetGlobalCdnPurgeHistoryListResponse.class);
	}

	/**
	 * 
	 * Global CDN퍼지기록조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getGlobalCdnPurgeHistoryListRequest getGlobalCdnPurgeHistoryListRequest (required)
	 * @return byte[]
	 *	GetGlobalCdnPurgeHistoryListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getGlobalCdnPurgeHistoryListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getGlobalCdnPurgeHistoryList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * Global CDN퍼지기록조회
	 * @param getGlobalCdnPurgeHistoryListRequest getGlobalCdnPurgeHistoryListRequest (required)
	 * @return GetGlobalCdnPurgeHistoryListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetGlobalCdnPurgeHistoryListResponse> getGlobalCdnPurgeHistoryListPost(GetGlobalCdnPurgeHistoryListRequest getGlobalCdnPurgeHistoryListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getGlobalCdnPurgeHistoryList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getGlobalCdnPurgeHistoryListRequest, true, false);
		return apiClient.call(apiRequest, GetGlobalCdnPurgeHistoryListResponse.class);
	}

	/**
	 * 
	 * Global CDN퍼지기록조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getGlobalCdnPurgeHistoryListRequest getGlobalCdnPurgeHistoryListRequest (required)
	 * @return byte[]
	 *	GetGlobalCdnPurgeHistoryListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getGlobalCdnPurgeHistoryListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getGlobalCdnPurgeHistoryList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getGlobalCdnUsageDataGet() throws ApiException, SdkException {
		
		// path
		String path = "/getGlobalCdnUsageData";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getGlobalCdnUsageDataGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getGlobalCdnUsageData";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getGlobalCdnUsageDataPost() throws ApiException, SdkException {
		
		// path
		String path = "/getGlobalCdnUsageData";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getGlobalCdnUsageDataPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getGlobalCdnUsageData";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CDN+퍼지요청
	 * @param requestCdnPlusPurgeRequest requestCdnPlusPurgeRequest (required)
	 * @return RequestCdnPlusPurgeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RequestCdnPlusPurgeResponse> requestCdnPlusPurgeGet(RequestCdnPlusPurgeRequest requestCdnPlusPurgeRequest) throws ApiException, SdkException {
		
		// path
		String path = "/requestCdnPlusPurge";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, requestCdnPlusPurgeRequest, true, false);
		return apiClient.call(apiRequest, RequestCdnPlusPurgeResponse.class);
	}

	/**
	 * 
	 * CDN+퍼지요청
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	requestCdnPlusPurgeRequest requestCdnPlusPurgeRequest (required)
	 * @return byte[]
	 *	RequestCdnPlusPurgeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> requestCdnPlusPurgeGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/requestCdnPlusPurge";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * CDN+퍼지요청
	 * @param requestCdnPlusPurgeRequest requestCdnPlusPurgeRequest (required)
	 * @return RequestCdnPlusPurgeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RequestCdnPlusPurgeResponse> requestCdnPlusPurgePost(RequestCdnPlusPurgeRequest requestCdnPlusPurgeRequest) throws ApiException, SdkException {
		
		// path
		String path = "/requestCdnPlusPurge";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, requestCdnPlusPurgeRequest, true, false);
		return apiClient.call(apiRequest, RequestCdnPlusPurgeResponse.class);
	}

	/**
	 * 
	 * CDN+퍼지요청
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	requestCdnPlusPurgeRequest requestCdnPlusPurgeRequest (required)
	 * @return byte[]
	 *	RequestCdnPlusPurgeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> requestCdnPlusPurgePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/requestCdnPlusPurge";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * Global CDN퍼지요청
	 * @param requestGlobalCdnPurgeRequest requestGlobalCdnPurgeRequest (required)
	 * @return RequestGlobalCdnPurgeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RequestGlobalCdnPurgeResponse> requestGlobalCdnPurgeGet(RequestGlobalCdnPurgeRequest requestGlobalCdnPurgeRequest) throws ApiException, SdkException {
		
		// path
		String path = "/requestGlobalCdnPurge";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, requestGlobalCdnPurgeRequest, true, false);
		return apiClient.call(apiRequest, RequestGlobalCdnPurgeResponse.class);
	}

	/**
	 * 
	 * Global CDN퍼지요청
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	requestGlobalCdnPurgeRequest requestGlobalCdnPurgeRequest (required)
	 * @return byte[]
	 *	RequestGlobalCdnPurgeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> requestGlobalCdnPurgeGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/requestGlobalCdnPurge";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * Global CDN퍼지요청
	 * @param requestGlobalCdnPurgeRequest requestGlobalCdnPurgeRequest (required)
	 * @return RequestGlobalCdnPurgeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RequestGlobalCdnPurgeResponse> requestGlobalCdnPurgePost(RequestGlobalCdnPurgeRequest requestGlobalCdnPurgeRequest) throws ApiException, SdkException {
		
		// path
		String path = "/requestGlobalCdnPurge";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, requestGlobalCdnPurgeRequest, true, false);
		return apiClient.call(apiRequest, RequestGlobalCdnPurgeResponse.class);
	}

	/**
	 * 
	 * Global CDN퍼지요청
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	requestGlobalCdnPurgeRequest requestGlobalCdnPurgeRequest (required)
	 * @return byte[]
	 *	RequestGlobalCdnPurgeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> requestGlobalCdnPurgePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/requestGlobalCdnPurge";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

}
