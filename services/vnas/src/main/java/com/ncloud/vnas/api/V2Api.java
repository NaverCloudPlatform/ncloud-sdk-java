/*
 * vnas
 * VPC NAS 관련 API<br/>https://ncloud.apigw.ntruss.com/vnas/v2
 *
 * NBP corp.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.vnas.api;

import java.util.HashMap;
import java.util.Map;

import com.ncloud.ApiClient;
import com.ncloud.ApiRequest;
import com.ncloud.ApiResponse;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.vnas.model.AddNasVolumeAccessControlRequest;
import com.ncloud.vnas.model.AddNasVolumeAccessControlResponse;
import com.ncloud.vnas.model.ChangeNasVolumeSizeRequest;
import com.ncloud.vnas.model.ChangeNasVolumeSizeResponse;
import com.ncloud.vnas.model.CreateNasVolumeInstanceRequest;
import com.ncloud.vnas.model.CreateNasVolumeInstanceResponse;
import com.ncloud.vnas.model.DeleteNasVolumeInstancesRequest;
import com.ncloud.vnas.model.DeleteNasVolumeInstancesResponse;
import com.ncloud.vnas.model.GetNasVolumeInstanceDetailRequest;
import com.ncloud.vnas.model.GetNasVolumeInstanceDetailResponse;
import com.ncloud.vnas.model.GetNasVolumeInstanceListRequest;
import com.ncloud.vnas.model.GetNasVolumeInstanceListResponse;
import com.ncloud.vnas.model.RemoveNasVolumeAccessControlRequest;
import com.ncloud.vnas.model.RemoveNasVolumeAccessControlResponse;
import com.ncloud.vnas.model.SetNasVolumeAccessControlRequest;
import com.ncloud.vnas.model.SetNasVolumeAccessControlResponse;

public class V2Api {

	private final String basePath = "/vnas/v2";

	private final ApiClient apiClient;

	public V2Api(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	/**
	 * 
	 * NAS볼륨접근제어추가
	 * @param addNasVolumeAccessControlRequest addNasVolumeAccessControlRequest (required)
	 * @return AddNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddNasVolumeAccessControlResponse> addNasVolumeAccessControlGet(AddNasVolumeAccessControlRequest addNasVolumeAccessControlRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addNasVolumeAccessControl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addNasVolumeAccessControlRequest, true, false);
		return apiClient.call(apiRequest, AddNasVolumeAccessControlResponse.class);
	}

	/**
	 * 
	 * NAS볼륨접근제어추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addNasVolumeAccessControlRequest addNasVolumeAccessControlRequest (required)
	 * @return byte[]
	 *	AddNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addNasVolumeAccessControlGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addNasVolumeAccessControl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨접근제어추가
	 * @param addNasVolumeAccessControlRequest addNasVolumeAccessControlRequest (required)
	 * @return AddNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddNasVolumeAccessControlResponse> addNasVolumeAccessControlPost(AddNasVolumeAccessControlRequest addNasVolumeAccessControlRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addNasVolumeAccessControl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addNasVolumeAccessControlRequest, true, false);
		return apiClient.call(apiRequest, AddNasVolumeAccessControlResponse.class);
	}

	/**
	 * 
	 * NAS볼륨접근제어추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addNasVolumeAccessControlRequest addNasVolumeAccessControlRequest (required)
	 * @return byte[]
	 *	AddNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addNasVolumeAccessControlPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addNasVolumeAccessControl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨사이즈변경
	 * @param changeNasVolumeSizeRequest changeNasVolumeSizeRequest (required)
	 * @return ChangeNasVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeNasVolumeSizeResponse> changeNasVolumeSizeGet(ChangeNasVolumeSizeRequest changeNasVolumeSizeRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeNasVolumeSize";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, changeNasVolumeSizeRequest, true, false);
		return apiClient.call(apiRequest, ChangeNasVolumeSizeResponse.class);
	}

	/**
	 * 
	 * NAS볼륨사이즈변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeNasVolumeSizeRequest changeNasVolumeSizeRequest (required)
	 * @return byte[]
	 *	ChangeNasVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeNasVolumeSizeGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeNasVolumeSize";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨사이즈변경
	 * @param changeNasVolumeSizeRequest changeNasVolumeSizeRequest (required)
	 * @return ChangeNasVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeNasVolumeSizeResponse> changeNasVolumeSizePost(ChangeNasVolumeSizeRequest changeNasVolumeSizeRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeNasVolumeSize";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, changeNasVolumeSizeRequest, true, false);
		return apiClient.call(apiRequest, ChangeNasVolumeSizeResponse.class);
	}

	/**
	 * 
	 * NAS볼륨사이즈변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeNasVolumeSizeRequest changeNasVolumeSizeRequest (required)
	 * @return byte[]
	 *	ChangeNasVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeNasVolumeSizePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeNasVolumeSize";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스생성
	 * @param createNasVolumeInstanceRequest createNasVolumeInstanceRequest (required)
	 * @return CreateNasVolumeInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNasVolumeInstanceResponse> createNasVolumeInstanceGet(CreateNasVolumeInstanceRequest createNasVolumeInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNasVolumeInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createNasVolumeInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateNasVolumeInstanceResponse.class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNasVolumeInstanceRequest createNasVolumeInstanceRequest (required)
	 * @return byte[]
	 *	CreateNasVolumeInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNasVolumeInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNasVolumeInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스생성
	 * @param createNasVolumeInstanceRequest createNasVolumeInstanceRequest (required)
	 * @return CreateNasVolumeInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNasVolumeInstanceResponse> createNasVolumeInstancePost(CreateNasVolumeInstanceRequest createNasVolumeInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNasVolumeInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createNasVolumeInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateNasVolumeInstanceResponse.class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNasVolumeInstanceRequest createNasVolumeInstanceRequest (required)
	 * @return byte[]
	 *	CreateNasVolumeInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNasVolumeInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNasVolumeInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스제거
	 * @param deleteNasVolumeInstancesRequest deleteNasVolumeInstancesRequest (required)
	 * @return DeleteNasVolumeInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNasVolumeInstancesResponse> deleteNasVolumeInstancesGet(DeleteNasVolumeInstancesRequest deleteNasVolumeInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNasVolumeInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteNasVolumeInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteNasVolumeInstancesResponse.class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNasVolumeInstancesRequest deleteNasVolumeInstancesRequest (required)
	 * @return byte[]
	 *	DeleteNasVolumeInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNasVolumeInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNasVolumeInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스제거
	 * @param deleteNasVolumeInstancesRequest deleteNasVolumeInstancesRequest (required)
	 * @return DeleteNasVolumeInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNasVolumeInstancesResponse> deleteNasVolumeInstancesPost(DeleteNasVolumeInstancesRequest deleteNasVolumeInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNasVolumeInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteNasVolumeInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteNasVolumeInstancesResponse.class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNasVolumeInstancesRequest deleteNasVolumeInstancesRequest (required)
	 * @return byte[]
	 *	DeleteNasVolumeInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNasVolumeInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNasVolumeInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스상세조회
	 * @param getNasVolumeInstanceDetailRequest getNasVolumeInstanceDetailRequest (required)
	 * @return GetNasVolumeInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeInstanceDetailResponse> getNasVolumeInstanceDetailGet(GetNasVolumeInstanceDetailRequest getNasVolumeInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNasVolumeInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeInstanceDetailResponse.class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeInstanceDetailRequest getNasVolumeInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetNasVolumeInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeInstanceDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스상세조회
	 * @param getNasVolumeInstanceDetailRequest getNasVolumeInstanceDetailRequest (required)
	 * @return GetNasVolumeInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeInstanceDetailResponse> getNasVolumeInstanceDetailPost(GetNasVolumeInstanceDetailRequest getNasVolumeInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNasVolumeInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeInstanceDetailResponse.class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeInstanceDetailRequest getNasVolumeInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetNasVolumeInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeInstanceDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스리스트조회
	 * @param getNasVolumeInstanceListRequest getNasVolumeInstanceListRequest (required)
	 * @return GetNasVolumeInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeInstanceListResponse> getNasVolumeInstanceListGet(GetNasVolumeInstanceListRequest getNasVolumeInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNasVolumeInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeInstanceListResponse.class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeInstanceListRequest getNasVolumeInstanceListRequest (required)
	 * @return byte[]
	 *	GetNasVolumeInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스리스트조회
	 * @param getNasVolumeInstanceListRequest getNasVolumeInstanceListRequest (required)
	 * @return GetNasVolumeInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeInstanceListResponse> getNasVolumeInstanceListPost(GetNasVolumeInstanceListRequest getNasVolumeInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNasVolumeInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeInstanceListResponse.class);
	}

	/**
	 * 
	 * NAS볼륨인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeInstanceListRequest getNasVolumeInstanceListRequest (required)
	 * @return byte[]
	 *	GetNasVolumeInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨접근제어삭제
	 * @param removeNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest (required)
	 * @return RemoveNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveNasVolumeAccessControlResponse> removeNasVolumeAccessControlGet(RemoveNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeNasVolumeAccessControl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removeNasVolumeAccessControlRequest, true, false);
		return apiClient.call(apiRequest, RemoveNasVolumeAccessControlResponse.class);
	}

	/**
	 * 
	 * NAS볼륨접근제어삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest (required)
	 * @return byte[]
	 *	RemoveNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeNasVolumeAccessControlGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeNasVolumeAccessControl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨접근제어삭제
	 * @param removeNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest (required)
	 * @return RemoveNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveNasVolumeAccessControlResponse> removeNasVolumeAccessControlPost(RemoveNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeNasVolumeAccessControl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removeNasVolumeAccessControlRequest, true, false);
		return apiClient.call(apiRequest, RemoveNasVolumeAccessControlResponse.class);
	}

	/**
	 * 
	 * NAS볼륨접근제어삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest (required)
	 * @return byte[]
	 *	RemoveNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeNasVolumeAccessControlPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeNasVolumeAccessControl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨접근제어설정
	 * @param setNasVolumeAccessControlRequest setNasVolumeAccessControlRequest (required)
	 * @return SetNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetNasVolumeAccessControlResponse> setNasVolumeAccessControlGet(SetNasVolumeAccessControlRequest setNasVolumeAccessControlRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setNasVolumeAccessControl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setNasVolumeAccessControlRequest, true, false);
		return apiClient.call(apiRequest, SetNasVolumeAccessControlResponse.class);
	}

	/**
	 * 
	 * NAS볼륨접근제어설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setNasVolumeAccessControlRequest setNasVolumeAccessControlRequest (required)
	 * @return byte[]
	 *	SetNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setNasVolumeAccessControlGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setNasVolumeAccessControl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * NAS볼륨접근제어설정
	 * @param setNasVolumeAccessControlRequest setNasVolumeAccessControlRequest (required)
	 * @return SetNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetNasVolumeAccessControlResponse> setNasVolumeAccessControlPost(SetNasVolumeAccessControlRequest setNasVolumeAccessControlRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setNasVolumeAccessControl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setNasVolumeAccessControlRequest, true, false);
		return apiClient.call(apiRequest, SetNasVolumeAccessControlResponse.class);
	}

	/**
	 * 
	 * NAS볼륨접근제어설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setNasVolumeAccessControlRequest setNasVolumeAccessControlRequest (required)
	 * @return byte[]
	 *	SetNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setNasVolumeAccessControlPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setNasVolumeAccessControl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

}
