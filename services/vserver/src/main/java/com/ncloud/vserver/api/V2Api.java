/*
 * vserver
 * VPC Compute 관련 API<br/>https://ncloud.apigw.ntruss.com/vserver/v2
 *
 * NBP corp.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.vserver.api;

import java.util.HashMap;
import java.util.Map;

import com.ncloud.ApiClient;
import com.ncloud.ApiRequest;
import com.ncloud.ApiResponse;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.vserver.model.AddAccessControlGroupInboundRuleRequest;
import com.ncloud.vserver.model.AddAccessControlGroupInboundRuleResponse;
import com.ncloud.vserver.model.AddAccessControlGroupOutboundRuleRequest;
import com.ncloud.vserver.model.AddAccessControlGroupOutboundRuleResponse;
import com.ncloud.vserver.model.AddMemberServerImageSharingPermissionRequest;
import com.ncloud.vserver.model.AddMemberServerImageSharingPermissionResponse;
import com.ncloud.vserver.model.AddNetworkInterfaceAccessControlGroupRequest;
import com.ncloud.vserver.model.AddNetworkInterfaceAccessControlGroupResponse;
import com.ncloud.vserver.model.AddPlacementGroupServerInstanceRequest;
import com.ncloud.vserver.model.AddPlacementGroupServerInstanceResponse;
import com.ncloud.vserver.model.AddServerImageSharingPermissionReqeuset;
import com.ncloud.vserver.model.AssignSecondaryIpsRequest;
import com.ncloud.vserver.model.AssignSecondaryIpsResponse;
import com.ncloud.vserver.model.AssociatePublicIpWithServerInstanceRequest;
import com.ncloud.vserver.model.AssociatePublicIpWithServerInstanceResponse;
import com.ncloud.vserver.model.AttachBlockStorageInstanceRequest;
import com.ncloud.vserver.model.AttachBlockStorageInstanceResponse;
import com.ncloud.vserver.model.AttachNetworkInterfaceRequest;
import com.ncloud.vserver.model.AttachNetworkInterfaceResponse;
import com.ncloud.vserver.model.ChangeBlockStorageInstanceRequest;
import com.ncloud.vserver.model.ChangeBlockStorageInstanceResponse;
import com.ncloud.vserver.model.ChangeBlockStorageVolumeSizeRequest;
import com.ncloud.vserver.model.ChangeBlockStorageVolumeSizeResponse;
import com.ncloud.vserver.model.ChangeServerInstanceSpecRequest;
import com.ncloud.vserver.model.ChangeServerInstanceSpecResponse;
import com.ncloud.vserver.model.CreateAccessControlGroupRequest;
import com.ncloud.vserver.model.CreateAccessControlGroupResponse;
import com.ncloud.vserver.model.CreateBlockStorageInstanceRequest;
import com.ncloud.vserver.model.CreateBlockStorageInstanceResponse;
import com.ncloud.vserver.model.CreateBlockStorageSnapshotInstanceRequest;
import com.ncloud.vserver.model.CreateBlockStorageSnapshotInstanceResponse;
import com.ncloud.vserver.model.CreateInitScriptRequest;
import com.ncloud.vserver.model.CreateInitScriptResponse;
import com.ncloud.vserver.model.CreateLoginKeyRequest;
import com.ncloud.vserver.model.CreateLoginKeyResponse;
import com.ncloud.vserver.model.CreateMemberServerImageInstanceRequest;
import com.ncloud.vserver.model.CreateMemberServerImageInstanceResponse;
import com.ncloud.vserver.model.CreateNetworkInterfaceRequest;
import com.ncloud.vserver.model.CreateNetworkInterfaceResponse;
import com.ncloud.vserver.model.CreatePlacementGroupRequest;
import com.ncloud.vserver.model.CreatePlacementGroupResponse;
import com.ncloud.vserver.model.CreatePublicIpInstanceRequest;
import com.ncloud.vserver.model.CreatePublicIpInstanceResponse;
import com.ncloud.vserver.model.CreateServerImageFromSnapshotRequest;
import com.ncloud.vserver.model.CreateServerImageRequest;
import com.ncloud.vserver.model.CreateServerInstancesRequest;
import com.ncloud.vserver.model.CreateServerInstancesResponse;
import com.ncloud.vserver.model.DeleteAccessControlGroupRequest;
import com.ncloud.vserver.model.DeleteAccessControlGroupResponse;
import com.ncloud.vserver.model.DeleteBlockStorageInstancesRequest;
import com.ncloud.vserver.model.DeleteBlockStorageInstancesResponse;
import com.ncloud.vserver.model.DeleteBlockStorageSnapshotInstancesRequest;
import com.ncloud.vserver.model.DeleteBlockStorageSnapshotInstancesResponse;
import com.ncloud.vserver.model.DeleteInitScriptsRequest;
import com.ncloud.vserver.model.DeleteInitScriptsResponse;
import com.ncloud.vserver.model.DeleteLoginKeysRequest;
import com.ncloud.vserver.model.DeleteLoginKeysResponse;
import com.ncloud.vserver.model.DeleteMemberServerImageInstancesRequest;
import com.ncloud.vserver.model.DeleteMemberServerImageInstancesResponse;
import com.ncloud.vserver.model.DeleteNetworkInterfaceRequest;
import com.ncloud.vserver.model.DeleteNetworkInterfaceResponse;
import com.ncloud.vserver.model.DeletePlacementGroupRequest;
import com.ncloud.vserver.model.DeletePlacementGroupResponse;
import com.ncloud.vserver.model.DeletePublicIpInstanceRequest;
import com.ncloud.vserver.model.DeletePublicIpInstanceResponse;
import com.ncloud.vserver.model.DeleteServerImageRequest;
import com.ncloud.vserver.model.DetachBlockStorageInstancesRequest;
import com.ncloud.vserver.model.DetachBlockStorageInstancesResponse;
import com.ncloud.vserver.model.DetachNetworkInterfaceRequest;
import com.ncloud.vserver.model.DetachNetworkInterfaceResponse;
import com.ncloud.vserver.model.DisableFlowLogRequest;
import com.ncloud.vserver.model.DisassociatePublicIpFromServerInstanceRequest;
import com.ncloud.vserver.model.DisassociatePublicIpFromServerInstanceResponse;
import com.ncloud.vserver.model.EnableFlowLogRequest;
import com.ncloud.vserver.model.FlowLogConfigurationList;
import com.ncloud.vserver.model.GetAccessControlGroupDetailRequest;
import com.ncloud.vserver.model.GetAccessControlGroupDetailResponse;
import com.ncloud.vserver.model.GetAccessControlGroupListRequest;
import com.ncloud.vserver.model.GetAccessControlGroupListResponse;
import com.ncloud.vserver.model.GetAccessControlGroupRuleListRequest;
import com.ncloud.vserver.model.GetAccessControlGroupRuleListResponse;
import com.ncloud.vserver.model.GetBlockStorageInstanceDetailRequest;
import com.ncloud.vserver.model.GetBlockStorageInstanceDetailResponse;
import com.ncloud.vserver.model.GetBlockStorageInstanceListRequest;
import com.ncloud.vserver.model.GetBlockStorageInstanceListResponse;
import com.ncloud.vserver.model.GetBlockStorageSnapshotInstanceDetailRequest;
import com.ncloud.vserver.model.GetBlockStorageSnapshotInstanceDetailResponse;
import com.ncloud.vserver.model.GetBlockStorageSnapshotInstanceListRequest;
import com.ncloud.vserver.model.GetBlockStorageSnapshotInstanceListResponse;
import com.ncloud.vserver.model.GetBlockStorageVolumeTypeListRequest;
import com.ncloud.vserver.model.GetBlockStorageVolumeTypeListResponse;
import com.ncloud.vserver.model.GetFlowLogConfigurationListRequest;
import com.ncloud.vserver.model.GetHypervisorTypeListRequest;
import com.ncloud.vserver.model.GetHypervisorTypeListResponse;
import com.ncloud.vserver.model.GetInitScriptDetailRequest;
import com.ncloud.vserver.model.GetInitScriptDetailResponse;
import com.ncloud.vserver.model.GetInitScriptListRequest;
import com.ncloud.vserver.model.GetInitScriptListResponse;
import com.ncloud.vserver.model.GetLoginKeyListRequest;
import com.ncloud.vserver.model.GetLoginKeyListResponse;
import com.ncloud.vserver.model.GetMemberServerImageInstanceDetailRequest;
import com.ncloud.vserver.model.GetMemberServerImageInstanceDetailResponse;
import com.ncloud.vserver.model.GetMemberServerImageInstanceListRequest;
import com.ncloud.vserver.model.GetMemberServerImageInstanceListResponse;
import com.ncloud.vserver.model.GetNetworkInterfaceDetailRequest;
import com.ncloud.vserver.model.GetNetworkInterfaceDetailResponse;
import com.ncloud.vserver.model.GetNetworkInterfaceListRequest;
import com.ncloud.vserver.model.GetNetworkInterfaceListResponse;
import com.ncloud.vserver.model.GetPlacementGroupDetailRequest;
import com.ncloud.vserver.model.GetPlacementGroupDetailResponse;
import com.ncloud.vserver.model.GetPlacementGroupListRequest;
import com.ncloud.vserver.model.GetPlacementGroupListResponse;
import com.ncloud.vserver.model.GetPublicIpInstanceDetailRequest;
import com.ncloud.vserver.model.GetPublicIpInstanceDetailResponse;
import com.ncloud.vserver.model.GetPublicIpInstanceListRequest;
import com.ncloud.vserver.model.GetPublicIpInstanceListResponse;
import com.ncloud.vserver.model.GetPublicIpTargetServerInstanceListRequest;
import com.ncloud.vserver.model.GetPublicIpTargetServerInstanceListResponse;
import com.ncloud.vserver.model.GetRaidListRequest;
import com.ncloud.vserver.model.GetRaidListResponse;
import com.ncloud.vserver.model.GetRegionListRequest;
import com.ncloud.vserver.model.GetRegionListResponse;
import com.ncloud.vserver.model.GetRootPasswordRequest;
import com.ncloud.vserver.model.GetRootPasswordResponse;
import com.ncloud.vserver.model.GetRootPasswordServerInstanceListRequest;
import com.ncloud.vserver.model.GetRootPasswordServerInstanceListResponse;
import com.ncloud.vserver.model.GetServerImageDetailRequest;
import com.ncloud.vserver.model.GetServerImageListRequest;
import com.ncloud.vserver.model.GetServerImageProductListRequest;
import com.ncloud.vserver.model.GetServerImageProductListResponse;
import com.ncloud.vserver.model.GetServerInstanceDetailRequest;
import com.ncloud.vserver.model.GetServerInstanceDetailResponse;
import com.ncloud.vserver.model.GetServerInstanceListRequest;
import com.ncloud.vserver.model.GetServerInstanceListResponse;
import com.ncloud.vserver.model.GetServerProductListRequest;
import com.ncloud.vserver.model.GetServerProductListResponse;
import com.ncloud.vserver.model.GetServerSpecDetailRequest;
import com.ncloud.vserver.model.GetServerSpecListRequest;
import com.ncloud.vserver.model.GetZoneListRequest;
import com.ncloud.vserver.model.GetZoneListResponse;
import com.ncloud.vserver.model.ImportLoginKeyRequest;
import com.ncloud.vserver.model.ImportLoginKeyResponse;
import com.ncloud.vserver.model.InterruptServerInstanceRequest;
import com.ncloud.vserver.model.InterruptServerInstanceResponse;
import com.ncloud.vserver.model.RebootServerInstancesRequest;
import com.ncloud.vserver.model.RebootServerInstancesResponse;
import com.ncloud.vserver.model.RemoveAccessControlGroupInboundRuleRequest;
import com.ncloud.vserver.model.RemoveAccessControlGroupInboundRuleResponse;
import com.ncloud.vserver.model.RemoveAccessControlGroupOutboundRuleRequest;
import com.ncloud.vserver.model.RemoveAccessControlGroupOutboundRuleResponse;
import com.ncloud.vserver.model.RemoveMemberServerImageSharingPermissionRequest;
import com.ncloud.vserver.model.RemoveMemberServerImageSharingPermissionResponse;
import com.ncloud.vserver.model.RemoveNetworkInterfaceAccessControlGroupRequest;
import com.ncloud.vserver.model.RemoveNetworkInterfaceAccessControlGroupResponse;
import com.ncloud.vserver.model.RemovePlacementGroupServerInstanceRequest;
import com.ncloud.vserver.model.RemovePlacementGroupServerInstanceResponse;
import com.ncloud.vserver.model.RemoveServerImageSharingPermissionRequest;
import com.ncloud.vserver.model.SetBlockStorageReturnProtectionRequest;
import com.ncloud.vserver.model.SetBlockStorageReturnProtectionResponse;
import com.ncloud.vserver.model.SetMemberServerImageSharingPermissionRequest;
import com.ncloud.vserver.model.SetMemberServerImageSharingPermissionResponse;
import com.ncloud.vserver.model.SetProtectServerTerminationRequest;
import com.ncloud.vserver.model.SetProtectServerTerminationResponse;
import com.ncloud.vserver.model.StartServerInstancesRequest;
import com.ncloud.vserver.model.StartServerInstancesResponse;
import com.ncloud.vserver.model.StopServerInstancesRequest;
import com.ncloud.vserver.model.StopServerInstancesResponse;
import com.ncloud.vserver.model.TerminateServerInstancesRequest;
import com.ncloud.vserver.model.TerminateServerInstancesResponse;
import com.ncloud.vserver.model.UnassignSecondaryIpsRequest;
import com.ncloud.vserver.model.UnassignSecondaryIpsResponse;

public class V2Api {

	private final String basePath = "/vserver/v2";

	private final ApiClient apiClient;

	public V2Api(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	/**
	 * 
	 * ACGInboundRule추가
	 * @param addAccessControlGroupInboundRuleRequest addAccessControlGroupInboundRuleRequest (required)
	 * @return AddAccessControlGroupInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddAccessControlGroupInboundRuleResponse> addAccessControlGroupInboundRuleGet(AddAccessControlGroupInboundRuleRequest addAccessControlGroupInboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addAccessControlGroupInboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addAccessControlGroupInboundRuleRequest, true, false);
		return apiClient.call(apiRequest, AddAccessControlGroupInboundRuleResponse.class);
	}

	/**
	 * 
	 * ACGInboundRule추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addAccessControlGroupInboundRuleRequest addAccessControlGroupInboundRuleRequest (required)
	 * @return byte[]
	 *	AddAccessControlGroupInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addAccessControlGroupInboundRuleGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addAccessControlGroupInboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACGInboundRule추가
	 * @param addAccessControlGroupInboundRuleRequest addAccessControlGroupInboundRuleRequest (required)
	 * @return AddAccessControlGroupInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddAccessControlGroupInboundRuleResponse> addAccessControlGroupInboundRulePost(AddAccessControlGroupInboundRuleRequest addAccessControlGroupInboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addAccessControlGroupInboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addAccessControlGroupInboundRuleRequest, true, false);
		return apiClient.call(apiRequest, AddAccessControlGroupInboundRuleResponse.class);
	}

	/**
	 * 
	 * ACGInboundRule추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addAccessControlGroupInboundRuleRequest addAccessControlGroupInboundRuleRequest (required)
	 * @return byte[]
	 *	AddAccessControlGroupInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addAccessControlGroupInboundRulePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addAccessControlGroupInboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACGOutboundRule추가
	 * @param addAccessControlGroupOutboundRuleRequest addAccessControlGroupOutboundRuleRequest (required)
	 * @return AddAccessControlGroupOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddAccessControlGroupOutboundRuleResponse> addAccessControlGroupOutboundRuleGet(AddAccessControlGroupOutboundRuleRequest addAccessControlGroupOutboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addAccessControlGroupOutboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addAccessControlGroupOutboundRuleRequest, true, false);
		return apiClient.call(apiRequest, AddAccessControlGroupOutboundRuleResponse.class);
	}

	/**
	 * 
	 * ACGOutboundRule추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addAccessControlGroupOutboundRuleRequest addAccessControlGroupOutboundRuleRequest (required)
	 * @return byte[]
	 *	AddAccessControlGroupOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addAccessControlGroupOutboundRuleGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addAccessControlGroupOutboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACGOutboundRule추가
	 * @param addAccessControlGroupOutboundRuleRequest addAccessControlGroupOutboundRuleRequest (required)
	 * @return AddAccessControlGroupOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddAccessControlGroupOutboundRuleResponse> addAccessControlGroupOutboundRulePost(AddAccessControlGroupOutboundRuleRequest addAccessControlGroupOutboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addAccessControlGroupOutboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addAccessControlGroupOutboundRuleRequest, true, false);
		return apiClient.call(apiRequest, AddAccessControlGroupOutboundRuleResponse.class);
	}

	/**
	 * 
	 * ACGOutboundRule추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addAccessControlGroupOutboundRuleRequest addAccessControlGroupOutboundRuleRequest (required)
	 * @return byte[]
	 *	AddAccessControlGroupOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addAccessControlGroupOutboundRulePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addAccessControlGroupOutboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지공유권한추가
	 * @param addMemberServerImageSharingPermissionRequest addMemberServerImageSharingPermissionRequest (required)
	 * @return AddMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddMemberServerImageSharingPermissionResponse> addMemberServerImageSharingPermissionGet(AddMemberServerImageSharingPermissionRequest addMemberServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addMemberServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addMemberServerImageSharingPermissionRequest, true, false);
		return apiClient.call(apiRequest, AddMemberServerImageSharingPermissionResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지공유권한추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addMemberServerImageSharingPermissionRequest addMemberServerImageSharingPermissionRequest (required)
	 * @return byte[]
	 *	AddMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addMemberServerImageSharingPermissionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addMemberServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지공유권한추가
	 * @param addMemberServerImageSharingPermissionRequest addMemberServerImageSharingPermissionRequest (required)
	 * @return AddMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddMemberServerImageSharingPermissionResponse> addMemberServerImageSharingPermissionPost(AddMemberServerImageSharingPermissionRequest addMemberServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addMemberServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addMemberServerImageSharingPermissionRequest, true, false);
		return apiClient.call(apiRequest, AddMemberServerImageSharingPermissionResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지공유권한추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addMemberServerImageSharingPermissionRequest addMemberServerImageSharingPermissionRequest (required)
	 * @return byte[]
	 *	AddMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addMemberServerImageSharingPermissionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addMemberServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스의ACG추가
	 * @param addNetworkInterfaceAccessControlGroupRequest addNetworkInterfaceAccessControlGroupRequest (required)
	 * @return AddNetworkInterfaceAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddNetworkInterfaceAccessControlGroupResponse> addNetworkInterfaceAccessControlGroupGet(AddNetworkInterfaceAccessControlGroupRequest addNetworkInterfaceAccessControlGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addNetworkInterfaceAccessControlGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addNetworkInterfaceAccessControlGroupRequest, true, false);
		return apiClient.call(apiRequest, AddNetworkInterfaceAccessControlGroupResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스의ACG추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addNetworkInterfaceAccessControlGroupRequest addNetworkInterfaceAccessControlGroupRequest (required)
	 * @return byte[]
	 *	AddNetworkInterfaceAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addNetworkInterfaceAccessControlGroupGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addNetworkInterfaceAccessControlGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스의ACG추가
	 * @param addNetworkInterfaceAccessControlGroupRequest addNetworkInterfaceAccessControlGroupRequest (required)
	 * @return AddNetworkInterfaceAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddNetworkInterfaceAccessControlGroupResponse> addNetworkInterfaceAccessControlGroupPost(AddNetworkInterfaceAccessControlGroupRequest addNetworkInterfaceAccessControlGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addNetworkInterfaceAccessControlGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addNetworkInterfaceAccessControlGroupRequest, true, false);
		return apiClient.call(apiRequest, AddNetworkInterfaceAccessControlGroupResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스의ACG추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addNetworkInterfaceAccessControlGroupRequest addNetworkInterfaceAccessControlGroupRequest (required)
	 * @return byte[]
	 *	AddNetworkInterfaceAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addNetworkInterfaceAccessControlGroupPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addNetworkInterfaceAccessControlGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 물리배치그룹에서버인스턴스추가
	 * @param addPlacementGroupServerInstanceRequest addPlacementGroupServerInstanceRequest (required)
	 * @return AddPlacementGroupServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddPlacementGroupServerInstanceResponse> addPlacementGroupServerInstanceGet(AddPlacementGroupServerInstanceRequest addPlacementGroupServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addPlacementGroupServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addPlacementGroupServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, AddPlacementGroupServerInstanceResponse.class);
	}

	/**
	 * 
	 * 물리배치그룹에서버인스턴스추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addPlacementGroupServerInstanceRequest addPlacementGroupServerInstanceRequest (required)
	 * @return byte[]
	 *	AddPlacementGroupServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addPlacementGroupServerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addPlacementGroupServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 물리배치그룹에서버인스턴스추가
	 * @param addPlacementGroupServerInstanceRequest addPlacementGroupServerInstanceRequest (required)
	 * @return AddPlacementGroupServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddPlacementGroupServerInstanceResponse> addPlacementGroupServerInstancePost(AddPlacementGroupServerInstanceRequest addPlacementGroupServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addPlacementGroupServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addPlacementGroupServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, AddPlacementGroupServerInstanceResponse.class);
	}

	/**
	 * 
	 * 물리배치그룹에서버인스턴스추가
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addPlacementGroupServerInstanceRequest addPlacementGroupServerInstanceRequest (required)
	 * @return byte[]
	 *	AddPlacementGroupServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addPlacementGroupServerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addPlacementGroupServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param addServerImageSharingPermissionRequest  (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void addServerImageSharingPermissionGet(AddServerImageSharingPermissionReqeuset addServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addServerImageSharingPermissionRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addServerImageSharingPermissionRequest  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addServerImageSharingPermissionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param addServerImageSharingPermissionRequest  (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void addServerImageSharingPermissionPost(AddServerImageSharingPermissionReqeuset addServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addServerImageSharingPermissionRequest, false, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addServerImageSharingPermissionRequest  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addServerImageSharingPermissionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 보조IP할당
	 * @param assignSecondaryIpsRequest assignSecondaryIpsRequest (required)
	 * @return AssignSecondaryIpsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AssignSecondaryIpsResponse> assignSecondaryIpsGet(AssignSecondaryIpsRequest assignSecondaryIpsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/assignSecondaryIps";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, assignSecondaryIpsRequest, true, false);
		return apiClient.call(apiRequest, AssignSecondaryIpsResponse.class);
	}

	/**
	 * 
	 * 보조IP할당
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	assignSecondaryIpsRequest assignSecondaryIpsRequest (required)
	 * @return byte[]
	 *	AssignSecondaryIpsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> assignSecondaryIpsGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/assignSecondaryIps";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 보조IP할당
	 * @param assignSecondaryIpsRequest assignSecondaryIpsRequest (required)
	 * @return AssignSecondaryIpsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AssignSecondaryIpsResponse> assignSecondaryIpsPost(AssignSecondaryIpsRequest assignSecondaryIpsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/assignSecondaryIps";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, assignSecondaryIpsRequest, true, false);
		return apiClient.call(apiRequest, AssignSecondaryIpsResponse.class);
	}

	/**
	 * 
	 * 보조IP할당
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	assignSecondaryIpsRequest assignSecondaryIpsRequest (required)
	 * @return byte[]
	 *	AssignSecondaryIpsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> assignSecondaryIpsPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/assignSecondaryIps";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP를서버인스턴스에할당
	 * @param associatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest (required)
	 * @return AssociatePublicIpWithServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AssociatePublicIpWithServerInstanceResponse> associatePublicIpWithServerInstanceGet(AssociatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/associatePublicIpWithServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, associatePublicIpWithServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, AssociatePublicIpWithServerInstanceResponse.class);
	}

	/**
	 * 
	 * 공인IP를서버인스턴스에할당
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	associatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest (required)
	 * @return byte[]
	 *	AssociatePublicIpWithServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> associatePublicIpWithServerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/associatePublicIpWithServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP를서버인스턴스에할당
	 * @param associatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest (required)
	 * @return AssociatePublicIpWithServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AssociatePublicIpWithServerInstanceResponse> associatePublicIpWithServerInstancePost(AssociatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/associatePublicIpWithServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, associatePublicIpWithServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, AssociatePublicIpWithServerInstanceResponse.class);
	}

	/**
	 * 
	 * 공인IP를서버인스턴스에할당
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	associatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest (required)
	 * @return byte[]
	 *	AssociatePublicIpWithServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> associatePublicIpWithServerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/associatePublicIpWithServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스할당
	 * @param attachBlockStorageInstanceRequest attachBlockStorageInstanceRequest (required)
	 * @return AttachBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AttachBlockStorageInstanceResponse> attachBlockStorageInstanceGet(AttachBlockStorageInstanceRequest attachBlockStorageInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/attachBlockStorageInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, attachBlockStorageInstanceRequest, true, false);
		return apiClient.call(apiRequest, AttachBlockStorageInstanceResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스할당
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	attachBlockStorageInstanceRequest attachBlockStorageInstanceRequest (required)
	 * @return byte[]
	 *	AttachBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> attachBlockStorageInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/attachBlockStorageInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스할당
	 * @param attachBlockStorageInstanceRequest attachBlockStorageInstanceRequest (required)
	 * @return AttachBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AttachBlockStorageInstanceResponse> attachBlockStorageInstancePost(AttachBlockStorageInstanceRequest attachBlockStorageInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/attachBlockStorageInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, attachBlockStorageInstanceRequest, true, false);
		return apiClient.call(apiRequest, AttachBlockStorageInstanceResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스할당
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	attachBlockStorageInstanceRequest attachBlockStorageInstanceRequest (required)
	 * @return byte[]
	 *	AttachBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> attachBlockStorageInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/attachBlockStorageInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스할당
	 * @param attachNetworkInterfaceRequest attachNetworkInterfaceRequest (required)
	 * @return AttachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AttachNetworkInterfaceResponse> attachNetworkInterfaceGet(AttachNetworkInterfaceRequest attachNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/attachNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, attachNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, AttachNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스할당
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	attachNetworkInterfaceRequest attachNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	AttachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> attachNetworkInterfaceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/attachNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스할당
	 * @param attachNetworkInterfaceRequest attachNetworkInterfaceRequest (required)
	 * @return AttachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AttachNetworkInterfaceResponse> attachNetworkInterfacePost(AttachNetworkInterfaceRequest attachNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/attachNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, attachNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, AttachNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스할당
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	attachNetworkInterfaceRequest attachNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	AttachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> attachNetworkInterfacePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/attachNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스변경
	 * @param changeBlockStorageInstanceRequest changeBlockStorageInstanceRequest (required)
	 * @return ChangeBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeBlockStorageInstanceResponse> changeBlockStorageInstanceGet(ChangeBlockStorageInstanceRequest changeBlockStorageInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeBlockStorageInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, changeBlockStorageInstanceRequest, true, false);
		return apiClient.call(apiRequest, ChangeBlockStorageInstanceResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeBlockStorageInstanceRequest changeBlockStorageInstanceRequest (required)
	 * @return byte[]
	 *	ChangeBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeBlockStorageInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeBlockStorageInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스변경
	 * @param changeBlockStorageInstanceRequest changeBlockStorageInstanceRequest (required)
	 * @return ChangeBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeBlockStorageInstanceResponse> changeBlockStorageInstancePost(ChangeBlockStorageInstanceRequest changeBlockStorageInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeBlockStorageInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, changeBlockStorageInstanceRequest, true, false);
		return apiClient.call(apiRequest, ChangeBlockStorageInstanceResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeBlockStorageInstanceRequest changeBlockStorageInstanceRequest (required)
	 * @return byte[]
	 *	ChangeBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeBlockStorageInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeBlockStorageInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지볼륨사이즈변경
	 * @param changeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest (required)
	 * @return ChangeBlockStorageVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeBlockStorageVolumeSizeResponse> changeBlockStorageVolumeSizeGet(ChangeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeBlockStorageVolumeSize";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, changeBlockStorageVolumeSizeRequest, true, false);
		return apiClient.call(apiRequest, ChangeBlockStorageVolumeSizeResponse.class);
	}

	/**
	 * 
	 * 블록스토리지볼륨사이즈변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest (required)
	 * @return byte[]
	 *	ChangeBlockStorageVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeBlockStorageVolumeSizeGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeBlockStorageVolumeSize";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지볼륨사이즈변경
	 * @param changeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest (required)
	 * @return ChangeBlockStorageVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeBlockStorageVolumeSizeResponse> changeBlockStorageVolumeSizePost(ChangeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeBlockStorageVolumeSize";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, changeBlockStorageVolumeSizeRequest, true, false);
		return apiClient.call(apiRequest, ChangeBlockStorageVolumeSizeResponse.class);
	}

	/**
	 * 
	 * 블록스토리지볼륨사이즈변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest (required)
	 * @return byte[]
	 *	ChangeBlockStorageVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeBlockStorageVolumeSizePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeBlockStorageVolumeSize";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스스펙변경
	 * @param changeServerInstanceSpecRequest changeServerInstanceSpecRequest (required)
	 * @return ChangeServerInstanceSpecResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeServerInstanceSpecResponse> changeServerInstanceSpecGet(ChangeServerInstanceSpecRequest changeServerInstanceSpecRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeServerInstanceSpec";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, changeServerInstanceSpecRequest, true, false);
		return apiClient.call(apiRequest, ChangeServerInstanceSpecResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스스펙변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeServerInstanceSpecRequest changeServerInstanceSpecRequest (required)
	 * @return byte[]
	 *	ChangeServerInstanceSpecResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeServerInstanceSpecGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeServerInstanceSpec";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스스펙변경
	 * @param changeServerInstanceSpecRequest changeServerInstanceSpecRequest (required)
	 * @return ChangeServerInstanceSpecResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeServerInstanceSpecResponse> changeServerInstanceSpecPost(ChangeServerInstanceSpecRequest changeServerInstanceSpecRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeServerInstanceSpec";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, changeServerInstanceSpecRequest, true, false);
		return apiClient.call(apiRequest, ChangeServerInstanceSpecResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스스펙변경
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeServerInstanceSpecRequest changeServerInstanceSpecRequest (required)
	 * @return byte[]
	 *	ChangeServerInstanceSpecResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeServerInstanceSpecPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeServerInstanceSpec";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACG생성
	 * @param createAccessControlGroupRequest createAccessControlGroupRequest (required)
	 * @return CreateAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateAccessControlGroupResponse> createAccessControlGroupGet(CreateAccessControlGroupRequest createAccessControlGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createAccessControlGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createAccessControlGroupRequest, true, false);
		return apiClient.call(apiRequest, CreateAccessControlGroupResponse.class);
	}

	/**
	 * 
	 * ACG생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createAccessControlGroupRequest createAccessControlGroupRequest (required)
	 * @return byte[]
	 *	CreateAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createAccessControlGroupGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createAccessControlGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACG생성
	 * @param createAccessControlGroupRequest createAccessControlGroupRequest (required)
	 * @return CreateAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateAccessControlGroupResponse> createAccessControlGroupPost(CreateAccessControlGroupRequest createAccessControlGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createAccessControlGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createAccessControlGroupRequest, true, false);
		return apiClient.call(apiRequest, CreateAccessControlGroupResponse.class);
	}

	/**
	 * 
	 * ACG생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createAccessControlGroupRequest createAccessControlGroupRequest (required)
	 * @return byte[]
	 *	CreateAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createAccessControlGroupPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createAccessControlGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스생성
	 * @param createBlockStorageInstanceRequest createBlockStorageInstanceRequest (required)
	 * @return CreateBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateBlockStorageInstanceResponse> createBlockStorageInstanceGet(CreateBlockStorageInstanceRequest createBlockStorageInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createBlockStorageInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createBlockStorageInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateBlockStorageInstanceResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createBlockStorageInstanceRequest createBlockStorageInstanceRequest (required)
	 * @return byte[]
	 *	CreateBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createBlockStorageInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createBlockStorageInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스생성
	 * @param createBlockStorageInstanceRequest createBlockStorageInstanceRequest (required)
	 * @return CreateBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateBlockStorageInstanceResponse> createBlockStorageInstancePost(CreateBlockStorageInstanceRequest createBlockStorageInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createBlockStorageInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createBlockStorageInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateBlockStorageInstanceResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createBlockStorageInstanceRequest createBlockStorageInstanceRequest (required)
	 * @return byte[]
	 *	CreateBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createBlockStorageInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createBlockStorageInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스생성
	 * @param createBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest (required)
	 * @return CreateBlockStorageSnapshotInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateBlockStorageSnapshotInstanceResponse> createBlockStorageSnapshotInstanceGet(CreateBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createBlockStorageSnapshotInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createBlockStorageSnapshotInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateBlockStorageSnapshotInstanceResponse.class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest (required)
	 * @return byte[]
	 *	CreateBlockStorageSnapshotInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createBlockStorageSnapshotInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createBlockStorageSnapshotInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스생성
	 * @param createBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest (required)
	 * @return CreateBlockStorageSnapshotInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateBlockStorageSnapshotInstanceResponse> createBlockStorageSnapshotInstancePost(CreateBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createBlockStorageSnapshotInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createBlockStorageSnapshotInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateBlockStorageSnapshotInstanceResponse.class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest (required)
	 * @return byte[]
	 *	CreateBlockStorageSnapshotInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createBlockStorageSnapshotInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createBlockStorageSnapshotInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 초기화스크립트생성
	 * @param createInitScriptRequest createInitScriptRequest (required)
	 * @return CreateInitScriptResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateInitScriptResponse> createInitScriptGet(CreateInitScriptRequest createInitScriptRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createInitScript";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createInitScriptRequest, true, false);
		return apiClient.call(apiRequest, CreateInitScriptResponse.class);
	}

	/**
	 * 
	 * 초기화스크립트생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createInitScriptRequest createInitScriptRequest (required)
	 * @return byte[]
	 *	CreateInitScriptResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createInitScriptGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createInitScript";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 초기화스크립트생성
	 * @param createInitScriptRequest createInitScriptRequest (required)
	 * @return CreateInitScriptResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateInitScriptResponse> createInitScriptPost(CreateInitScriptRequest createInitScriptRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createInitScript";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createInitScriptRequest, true, false);
		return apiClient.call(apiRequest, CreateInitScriptResponse.class);
	}

	/**
	 * 
	 * 초기화스크립트생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createInitScriptRequest createInitScriptRequest (required)
	 * @return byte[]
	 *	CreateInitScriptResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createInitScriptPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createInitScript";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로그인키생성
	 * @param createLoginKeyRequest createLoginKeyRequest (required)
	 * @return CreateLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateLoginKeyResponse> createLoginKeyGet(CreateLoginKeyRequest createLoginKeyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createLoginKey";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createLoginKeyRequest, true, false);
		return apiClient.call(apiRequest, CreateLoginKeyResponse.class);
	}

	/**
	 * 
	 * 로그인키생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createLoginKeyRequest createLoginKeyRequest (required)
	 * @return byte[]
	 *	CreateLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createLoginKeyGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createLoginKey";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로그인키생성
	 * @param createLoginKeyRequest createLoginKeyRequest (required)
	 * @return CreateLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateLoginKeyResponse> createLoginKeyPost(CreateLoginKeyRequest createLoginKeyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createLoginKey";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createLoginKeyRequest, true, false);
		return apiClient.call(apiRequest, CreateLoginKeyResponse.class);
	}

	/**
	 * 
	 * 로그인키생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createLoginKeyRequest createLoginKeyRequest (required)
	 * @return byte[]
	 *	CreateLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createLoginKeyPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createLoginKey";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스생성
	 * @param createMemberServerImageInstanceRequest createMemberServerImageInstanceRequest (required)
	 * @return CreateMemberServerImageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateMemberServerImageInstanceResponse> createMemberServerImageInstanceGet(CreateMemberServerImageInstanceRequest createMemberServerImageInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createMemberServerImageInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createMemberServerImageInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateMemberServerImageInstanceResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createMemberServerImageInstanceRequest createMemberServerImageInstanceRequest (required)
	 * @return byte[]
	 *	CreateMemberServerImageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createMemberServerImageInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createMemberServerImageInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스생성
	 * @param createMemberServerImageInstanceRequest createMemberServerImageInstanceRequest (required)
	 * @return CreateMemberServerImageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateMemberServerImageInstanceResponse> createMemberServerImageInstancePost(CreateMemberServerImageInstanceRequest createMemberServerImageInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createMemberServerImageInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createMemberServerImageInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateMemberServerImageInstanceResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createMemberServerImageInstanceRequest createMemberServerImageInstanceRequest (required)
	 * @return byte[]
	 *	CreateMemberServerImageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createMemberServerImageInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createMemberServerImageInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스생성
	 * @param createNetworkInterfaceRequest createNetworkInterfaceRequest (required)
	 * @return CreateNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNetworkInterfaceResponse> createNetworkInterfaceGet(CreateNetworkInterfaceRequest createNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, CreateNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNetworkInterfaceRequest createNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	CreateNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNetworkInterfaceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스생성
	 * @param createNetworkInterfaceRequest createNetworkInterfaceRequest (required)
	 * @return CreateNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNetworkInterfaceResponse> createNetworkInterfacePost(CreateNetworkInterfaceRequest createNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, CreateNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNetworkInterfaceRequest createNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	CreateNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNetworkInterfacePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 물리배치그룹생성
	 * @param createPlacementGroupRequest createPlacementGroupRequest (required)
	 * @return CreatePlacementGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreatePlacementGroupResponse> createPlacementGroupGet(CreatePlacementGroupRequest createPlacementGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createPlacementGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createPlacementGroupRequest, true, false);
		return apiClient.call(apiRequest, CreatePlacementGroupResponse.class);
	}

	/**
	 * 
	 * 물리배치그룹생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createPlacementGroupRequest createPlacementGroupRequest (required)
	 * @return byte[]
	 *	CreatePlacementGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createPlacementGroupGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createPlacementGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 물리배치그룹생성
	 * @param createPlacementGroupRequest createPlacementGroupRequest (required)
	 * @return CreatePlacementGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreatePlacementGroupResponse> createPlacementGroupPost(CreatePlacementGroupRequest createPlacementGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createPlacementGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createPlacementGroupRequest, true, false);
		return apiClient.call(apiRequest, CreatePlacementGroupResponse.class);
	}

	/**
	 * 
	 * 물리배치그룹생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createPlacementGroupRequest createPlacementGroupRequest (required)
	 * @return byte[]
	 *	CreatePlacementGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createPlacementGroupPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createPlacementGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP인스턴스생성
	 * @param createPublicIpInstanceRequest createPublicIpInstanceRequest (required)
	 * @return CreatePublicIpInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreatePublicIpInstanceResponse> createPublicIpInstanceGet(CreatePublicIpInstanceRequest createPublicIpInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createPublicIpInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createPublicIpInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreatePublicIpInstanceResponse.class);
	}

	/**
	 * 
	 * 공인IP인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createPublicIpInstanceRequest createPublicIpInstanceRequest (required)
	 * @return byte[]
	 *	CreatePublicIpInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createPublicIpInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createPublicIpInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP인스턴스생성
	 * @param createPublicIpInstanceRequest createPublicIpInstanceRequest (required)
	 * @return CreatePublicIpInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreatePublicIpInstanceResponse> createPublicIpInstancePost(CreatePublicIpInstanceRequest createPublicIpInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createPublicIpInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createPublicIpInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreatePublicIpInstanceResponse.class);
	}

	/**
	 * 
	 * 공인IP인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createPublicIpInstanceRequest createPublicIpInstanceRequest (required)
	 * @return byte[]
	 *	CreatePublicIpInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createPublicIpInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createPublicIpInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * createServerImageFromSnapshot
	 * @param createServerImageFromSnapshotRequest createServerImageFromSnapshotRequest (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void createServerImageFromSnapshotGet(CreateServerImageFromSnapshotRequest createServerImageFromSnapshotRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createServerImageFromSnapshot";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createServerImageFromSnapshotRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * createServerImageFromSnapshot
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createServerImageFromSnapshotRequest createServerImageFromSnapshotRequest (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createServerImageFromSnapshotGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createServerImageFromSnapshot";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * createServerImageFromSnapshot
	 * @param createServerImageFromSnapshotRequest createServerImageFromSnapshotRequest (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void createServerImageFromSnapshotPost(CreateServerImageFromSnapshotRequest createServerImageFromSnapshotRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createServerImageFromSnapshot";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createServerImageFromSnapshotRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * createServerImageFromSnapshot
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createServerImageFromSnapshotRequest createServerImageFromSnapshotRequest (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createServerImageFromSnapshotPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createServerImageFromSnapshot";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * createServerImage
	 * @param createServerImageRequest createServerImageRequest (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void createServerImageGet(CreateServerImageRequest createServerImageRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createServerImage";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createServerImageRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * createServerImage
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createServerImageRequest createServerImageRequest (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createServerImageGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createServerImage";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * createServerImage
	 * @param createServerImageRequest createServerImageRequest (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void createServerImagePost(CreateServerImageRequest createServerImageRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createServerImage";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createServerImageRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * createServerImage
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createServerImageRequest createServerImageRequest (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createServerImagePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createServerImage";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스생성
	 * @param createServerInstancesRequest createServerInstancesRequest (required)
	 * @return CreateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateServerInstancesResponse> createServerInstancesGet(CreateServerInstancesRequest createServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, CreateServerInstancesResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createServerInstancesRequest createServerInstancesRequest (required)
	 * @return byte[]
	 *	CreateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createServerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스생성
	 * @param createServerInstancesRequest createServerInstancesRequest (required)
	 * @return CreateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateServerInstancesResponse> createServerInstancesPost(CreateServerInstancesRequest createServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, CreateServerInstancesResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스생성
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createServerInstancesRequest createServerInstancesRequest (required)
	 * @return byte[]
	 *	CreateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createServerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACG삭제
	 * @param deleteAccessControlGroupRequest deleteAccessControlGroupRequest (required)
	 * @return DeleteAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteAccessControlGroupResponse> deleteAccessControlGroupGet(DeleteAccessControlGroupRequest deleteAccessControlGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteAccessControlGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteAccessControlGroupRequest, true, false);
		return apiClient.call(apiRequest, DeleteAccessControlGroupResponse.class);
	}

	/**
	 * 
	 * ACG삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteAccessControlGroupRequest deleteAccessControlGroupRequest (required)
	 * @return byte[]
	 *	DeleteAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteAccessControlGroupGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteAccessControlGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACG삭제
	 * @param deleteAccessControlGroupRequest deleteAccessControlGroupRequest (required)
	 * @return DeleteAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteAccessControlGroupResponse> deleteAccessControlGroupPost(DeleteAccessControlGroupRequest deleteAccessControlGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteAccessControlGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteAccessControlGroupRequest, true, false);
		return apiClient.call(apiRequest, DeleteAccessControlGroupResponse.class);
	}

	/**
	 * 
	 * ACG삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteAccessControlGroupRequest deleteAccessControlGroupRequest (required)
	 * @return byte[]
	 *	DeleteAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteAccessControlGroupPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteAccessControlGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스삭제
	 * @param deleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest (required)
	 * @return DeleteBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteBlockStorageInstancesResponse> deleteBlockStorageInstancesGet(DeleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteBlockStorageInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteBlockStorageInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteBlockStorageInstancesResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest (required)
	 * @return byte[]
	 *	DeleteBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteBlockStorageInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteBlockStorageInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스삭제
	 * @param deleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest (required)
	 * @return DeleteBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteBlockStorageInstancesResponse> deleteBlockStorageInstancesPost(DeleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteBlockStorageInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteBlockStorageInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteBlockStorageInstancesResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest (required)
	 * @return byte[]
	 *	DeleteBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteBlockStorageInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteBlockStorageInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스삭제
	 * @param deleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest (required)
	 * @return DeleteBlockStorageSnapshotInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteBlockStorageSnapshotInstancesResponse> deleteBlockStorageSnapshotInstancesGet(DeleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteBlockStorageSnapshotInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteBlockStorageSnapshotInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteBlockStorageSnapshotInstancesResponse.class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest (required)
	 * @return byte[]
	 *	DeleteBlockStorageSnapshotInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteBlockStorageSnapshotInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteBlockStorageSnapshotInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스삭제
	 * @param deleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest (required)
	 * @return DeleteBlockStorageSnapshotInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteBlockStorageSnapshotInstancesResponse> deleteBlockStorageSnapshotInstancesPost(DeleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteBlockStorageSnapshotInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteBlockStorageSnapshotInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteBlockStorageSnapshotInstancesResponse.class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest (required)
	 * @return byte[]
	 *	DeleteBlockStorageSnapshotInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteBlockStorageSnapshotInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteBlockStorageSnapshotInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 초기화스크립트삭제
	 * @param deleteInitScriptsRequest deleteInitScriptsRequest (required)
	 * @return DeleteInitScriptsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteInitScriptsResponse> deleteInitScriptsGet(DeleteInitScriptsRequest deleteInitScriptsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteInitScripts";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteInitScriptsRequest, true, false);
		return apiClient.call(apiRequest, DeleteInitScriptsResponse.class);
	}

	/**
	 * 
	 * 초기화스크립트삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteInitScriptsRequest deleteInitScriptsRequest (required)
	 * @return byte[]
	 *	DeleteInitScriptsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteInitScriptsGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteInitScripts";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 초기화스크립트삭제
	 * @param deleteInitScriptsRequest deleteInitScriptsRequest (required)
	 * @return DeleteInitScriptsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteInitScriptsResponse> deleteInitScriptsPost(DeleteInitScriptsRequest deleteInitScriptsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteInitScripts";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteInitScriptsRequest, true, false);
		return apiClient.call(apiRequest, DeleteInitScriptsResponse.class);
	}

	/**
	 * 
	 * 초기화스크립트삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteInitScriptsRequest deleteInitScriptsRequest (required)
	 * @return byte[]
	 *	DeleteInitScriptsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteInitScriptsPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteInitScripts";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로그인키삭제
	 * @param deleteLoginKeysRequest deleteLoginKeysRequest (required)
	 * @return DeleteLoginKeysResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLoginKeysResponse> deleteLoginKeysGet(DeleteLoginKeysRequest deleteLoginKeysRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLoginKeys";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteLoginKeysRequest, true, false);
		return apiClient.call(apiRequest, DeleteLoginKeysResponse.class);
	}

	/**
	 * 
	 * 로그인키삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLoginKeysRequest deleteLoginKeysRequest (required)
	 * @return byte[]
	 *	DeleteLoginKeysResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLoginKeysGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLoginKeys";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로그인키삭제
	 * @param deleteLoginKeysRequest deleteLoginKeysRequest (required)
	 * @return DeleteLoginKeysResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLoginKeysResponse> deleteLoginKeysPost(DeleteLoginKeysRequest deleteLoginKeysRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLoginKeys";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteLoginKeysRequest, true, false);
		return apiClient.call(apiRequest, DeleteLoginKeysResponse.class);
	}

	/**
	 * 
	 * 로그인키삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLoginKeysRequest deleteLoginKeysRequest (required)
	 * @return byte[]
	 *	DeleteLoginKeysResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLoginKeysPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLoginKeys";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스삭제
	 * @param deleteMemberServerImageInstancesRequest deleteMemberServerImageInstancesRequest (required)
	 * @return DeleteMemberServerImageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteMemberServerImageInstancesResponse> deleteMemberServerImageInstancesGet(DeleteMemberServerImageInstancesRequest deleteMemberServerImageInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteMemberServerImageInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteMemberServerImageInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteMemberServerImageInstancesResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteMemberServerImageInstancesRequest deleteMemberServerImageInstancesRequest (required)
	 * @return byte[]
	 *	DeleteMemberServerImageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteMemberServerImageInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteMemberServerImageInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스삭제
	 * @param deleteMemberServerImageInstancesRequest deleteMemberServerImageInstancesRequest (required)
	 * @return DeleteMemberServerImageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteMemberServerImageInstancesResponse> deleteMemberServerImageInstancesPost(DeleteMemberServerImageInstancesRequest deleteMemberServerImageInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteMemberServerImageInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteMemberServerImageInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteMemberServerImageInstancesResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteMemberServerImageInstancesRequest deleteMemberServerImageInstancesRequest (required)
	 * @return byte[]
	 *	DeleteMemberServerImageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteMemberServerImageInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteMemberServerImageInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스삭제
	 * @param deleteNetworkInterfaceRequest deleteNetworkInterfaceRequest (required)
	 * @return DeleteNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNetworkInterfaceResponse> deleteNetworkInterfaceGet(DeleteNetworkInterfaceRequest deleteNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, DeleteNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNetworkInterfaceRequest deleteNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	DeleteNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNetworkInterfaceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스삭제
	 * @param deleteNetworkInterfaceRequest deleteNetworkInterfaceRequest (required)
	 * @return DeleteNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNetworkInterfaceResponse> deleteNetworkInterfacePost(DeleteNetworkInterfaceRequest deleteNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, DeleteNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNetworkInterfaceRequest deleteNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	DeleteNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNetworkInterfacePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 물리배치그룹삭제
	 * @param deletePlacementGroupRequest deletePlacementGroupRequest (required)
	 * @return DeletePlacementGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeletePlacementGroupResponse> deletePlacementGroupGet(DeletePlacementGroupRequest deletePlacementGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deletePlacementGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deletePlacementGroupRequest, true, false);
		return apiClient.call(apiRequest, DeletePlacementGroupResponse.class);
	}

	/**
	 * 
	 * 물리배치그룹삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deletePlacementGroupRequest deletePlacementGroupRequest (required)
	 * @return byte[]
	 *	DeletePlacementGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deletePlacementGroupGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deletePlacementGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 물리배치그룹삭제
	 * @param deletePlacementGroupRequest deletePlacementGroupRequest (required)
	 * @return DeletePlacementGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeletePlacementGroupResponse> deletePlacementGroupPost(DeletePlacementGroupRequest deletePlacementGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deletePlacementGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deletePlacementGroupRequest, true, false);
		return apiClient.call(apiRequest, DeletePlacementGroupResponse.class);
	}

	/**
	 * 
	 * 물리배치그룹삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deletePlacementGroupRequest deletePlacementGroupRequest (required)
	 * @return byte[]
	 *	DeletePlacementGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deletePlacementGroupPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deletePlacementGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP인스턴스삭제
	 * @param deletePublicIpInstanceRequest deletePublicIpInstanceRequest (required)
	 * @return DeletePublicIpInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeletePublicIpInstanceResponse> deletePublicIpInstanceGet(DeletePublicIpInstanceRequest deletePublicIpInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deletePublicIpInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deletePublicIpInstanceRequest, true, false);
		return apiClient.call(apiRequest, DeletePublicIpInstanceResponse.class);
	}

	/**
	 * 
	 * 공인IP인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deletePublicIpInstanceRequest deletePublicIpInstanceRequest (required)
	 * @return byte[]
	 *	DeletePublicIpInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deletePublicIpInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deletePublicIpInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP인스턴스삭제
	 * @param deletePublicIpInstanceRequest deletePublicIpInstanceRequest (required)
	 * @return DeletePublicIpInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeletePublicIpInstanceResponse> deletePublicIpInstancePost(DeletePublicIpInstanceRequest deletePublicIpInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deletePublicIpInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deletePublicIpInstanceRequest, true, false);
		return apiClient.call(apiRequest, DeletePublicIpInstanceResponse.class);
	}

	/**
	 * 
	 * 공인IP인스턴스삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deletePublicIpInstanceRequest deletePublicIpInstanceRequest (required)
	 * @return byte[]
	 *	DeletePublicIpInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deletePublicIpInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deletePublicIpInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * deleteServerImage
	 * @param deleteServerImageRequest deleteServerImageRequest (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void deleteServerImageGet(DeleteServerImageRequest deleteServerImageRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteServerImage";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteServerImageRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * deleteServerImage
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteServerImageRequest deleteServerImageRequest (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteServerImageGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteServerImage";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * deleteServerImage
	 * @param deleteServerImageRequest deleteServerImageRequest (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void deleteServerImagePost(DeleteServerImageRequest deleteServerImageRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteServerImage";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteServerImageRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * deleteServerImage
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteServerImageRequest deleteServerImageRequest (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteServerImagePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteServerImage";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스할당해제
	 * @param detachBlockStorageInstancesRequest detachBlockStorageInstancesRequest (required)
	 * @return DetachBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DetachBlockStorageInstancesResponse> detachBlockStorageInstancesGet(DetachBlockStorageInstancesRequest detachBlockStorageInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/detachBlockStorageInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, detachBlockStorageInstancesRequest, true, false);
		return apiClient.call(apiRequest, DetachBlockStorageInstancesResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스할당해제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	detachBlockStorageInstancesRequest detachBlockStorageInstancesRequest (required)
	 * @return byte[]
	 *	DetachBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> detachBlockStorageInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/detachBlockStorageInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스할당해제
	 * @param detachBlockStorageInstancesRequest detachBlockStorageInstancesRequest (required)
	 * @return DetachBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DetachBlockStorageInstancesResponse> detachBlockStorageInstancesPost(DetachBlockStorageInstancesRequest detachBlockStorageInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/detachBlockStorageInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, detachBlockStorageInstancesRequest, true, false);
		return apiClient.call(apiRequest, DetachBlockStorageInstancesResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스할당해제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	detachBlockStorageInstancesRequest detachBlockStorageInstancesRequest (required)
	 * @return byte[]
	 *	DetachBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> detachBlockStorageInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/detachBlockStorageInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스할당해제
	 * @param detachNetworkInterfaceRequest detachNetworkInterfaceRequest (required)
	 * @return DetachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DetachNetworkInterfaceResponse> detachNetworkInterfaceGet(DetachNetworkInterfaceRequest detachNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/detachNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, detachNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, DetachNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스할당해제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	detachNetworkInterfaceRequest detachNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	DetachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> detachNetworkInterfaceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/detachNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스할당해제
	 * @param detachNetworkInterfaceRequest detachNetworkInterfaceRequest (required)
	 * @return DetachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DetachNetworkInterfaceResponse> detachNetworkInterfacePost(DetachNetworkInterfaceRequest detachNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/detachNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, detachNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, DetachNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스할당해제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	detachNetworkInterfaceRequest detachNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	DetachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> detachNetworkInterfacePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/detachNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * FlowLog비활성화
	 * @param disableFlowLogRequest disableFlowLogRequest (required)
	 * @return FlowLogConfigurationList
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<FlowLogConfigurationList> disableFlowLogGet(DisableFlowLogRequest disableFlowLogRequest) throws ApiException, SdkException {
		
		// path
		String path = "/disableFlowLog";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, disableFlowLogRequest, true, false);
		return apiClient.call(apiRequest, FlowLogConfigurationList.class);
	}

	/**
	 * 
	 * FlowLog비활성화
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	disableFlowLogRequest disableFlowLogRequest (required)
	 * @return byte[]
	 *	FlowLogConfigurationList
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> disableFlowLogGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/disableFlowLog";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * FlowLog비활성화
	 * @param disableFlowLogRequest disableFlowLogRequest (required)
	 * @return FlowLogConfigurationList
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<FlowLogConfigurationList> disableFlowLogPost(DisableFlowLogRequest disableFlowLogRequest) throws ApiException, SdkException {
		
		// path
		String path = "/disableFlowLog";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, disableFlowLogRequest, true, false);
		return apiClient.call(apiRequest, FlowLogConfigurationList.class);
	}

	/**
	 * 
	 * FlowLog비활성화
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	disableFlowLogRequest disableFlowLogRequest (required)
	 * @return byte[]
	 *	FlowLogConfigurationList
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> disableFlowLogPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/disableFlowLog";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP를서버인스턴스에서할당해제
	 * @param disassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest (required)
	 * @return DisassociatePublicIpFromServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DisassociatePublicIpFromServerInstanceResponse> disassociatePublicIpFromServerInstanceGet(DisassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/disassociatePublicIpFromServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, disassociatePublicIpFromServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, DisassociatePublicIpFromServerInstanceResponse.class);
	}

	/**
	 * 
	 * 공인IP를서버인스턴스에서할당해제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	disassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest (required)
	 * @return byte[]
	 *	DisassociatePublicIpFromServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> disassociatePublicIpFromServerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/disassociatePublicIpFromServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP를서버인스턴스에서할당해제
	 * @param disassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest (required)
	 * @return DisassociatePublicIpFromServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DisassociatePublicIpFromServerInstanceResponse> disassociatePublicIpFromServerInstancePost(DisassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/disassociatePublicIpFromServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, disassociatePublicIpFromServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, DisassociatePublicIpFromServerInstanceResponse.class);
	}

	/**
	 * 
	 * 공인IP를서버인스턴스에서할당해제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	disassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest (required)
	 * @return byte[]
	 *	DisassociatePublicIpFromServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> disassociatePublicIpFromServerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/disassociatePublicIpFromServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * FlowLog활성화
	 * @param enableFlowLogRequest enableFlowLogRequest (required)
	 * @return FlowLogConfigurationList
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<FlowLogConfigurationList> enableFlowLogGet(EnableFlowLogRequest enableFlowLogRequest) throws ApiException, SdkException {
		
		// path
		String path = "/enableFlowLog";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, enableFlowLogRequest, true, false);
		return apiClient.call(apiRequest, FlowLogConfigurationList.class);
	}

	/**
	 * 
	 * FlowLog활성화
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	enableFlowLogRequest enableFlowLogRequest (required)
	 * @return byte[]
	 *	FlowLogConfigurationList
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> enableFlowLogGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/enableFlowLog";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * FlowLog활성화
	 * @param enableFlowLogRequest enableFlowLogRequest (required)
	 * @return FlowLogConfigurationList
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<FlowLogConfigurationList> enableFlowLogPost(EnableFlowLogRequest enableFlowLogRequest) throws ApiException, SdkException {
		
		// path
		String path = "/enableFlowLog";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, enableFlowLogRequest, true, false);
		return apiClient.call(apiRequest, FlowLogConfigurationList.class);
	}

	/**
	 * 
	 * FlowLog활성화
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	enableFlowLogRequest enableFlowLogRequest (required)
	 * @return byte[]
	 *	FlowLogConfigurationList
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> enableFlowLogPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/enableFlowLog";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACG상세조회
	 * @param getAccessControlGroupDetailRequest getAccessControlGroupDetailRequest (required)
	 * @return GetAccessControlGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAccessControlGroupDetailResponse> getAccessControlGroupDetailGet(GetAccessControlGroupDetailRequest getAccessControlGroupDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAccessControlGroupDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getAccessControlGroupDetailRequest, true, false);
		return apiClient.call(apiRequest, GetAccessControlGroupDetailResponse.class);
	}

	/**
	 * 
	 * ACG상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAccessControlGroupDetailRequest getAccessControlGroupDetailRequest (required)
	 * @return byte[]
	 *	GetAccessControlGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAccessControlGroupDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAccessControlGroupDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACG상세조회
	 * @param getAccessControlGroupDetailRequest getAccessControlGroupDetailRequest (required)
	 * @return GetAccessControlGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAccessControlGroupDetailResponse> getAccessControlGroupDetailPost(GetAccessControlGroupDetailRequest getAccessControlGroupDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAccessControlGroupDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getAccessControlGroupDetailRequest, true, false);
		return apiClient.call(apiRequest, GetAccessControlGroupDetailResponse.class);
	}

	/**
	 * 
	 * ACG상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAccessControlGroupDetailRequest getAccessControlGroupDetailRequest (required)
	 * @return byte[]
	 *	GetAccessControlGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAccessControlGroupDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAccessControlGroupDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACG리스트조회
	 * @param getAccessControlGroupListRequest getAccessControlGroupListRequest (required)
	 * @return GetAccessControlGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAccessControlGroupListResponse> getAccessControlGroupListGet(GetAccessControlGroupListRequest getAccessControlGroupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAccessControlGroupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getAccessControlGroupListRequest, true, false);
		return apiClient.call(apiRequest, GetAccessControlGroupListResponse.class);
	}

	/**
	 * 
	 * ACG리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAccessControlGroupListRequest getAccessControlGroupListRequest (required)
	 * @return byte[]
	 *	GetAccessControlGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAccessControlGroupListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAccessControlGroupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACG리스트조회
	 * @param getAccessControlGroupListRequest getAccessControlGroupListRequest (required)
	 * @return GetAccessControlGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAccessControlGroupListResponse> getAccessControlGroupListPost(GetAccessControlGroupListRequest getAccessControlGroupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAccessControlGroupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getAccessControlGroupListRequest, true, false);
		return apiClient.call(apiRequest, GetAccessControlGroupListResponse.class);
	}

	/**
	 * 
	 * ACG리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAccessControlGroupListRequest getAccessControlGroupListRequest (required)
	 * @return byte[]
	 *	GetAccessControlGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAccessControlGroupListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAccessControlGroupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACGRule리스트조회
	 * @param getAccessControlGroupRuleListRequest getAccessControlGroupRuleListRequest (required)
	 * @return GetAccessControlGroupRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAccessControlGroupRuleListResponse> getAccessControlGroupRuleListGet(GetAccessControlGroupRuleListRequest getAccessControlGroupRuleListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAccessControlGroupRuleList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getAccessControlGroupRuleListRequest, true, false);
		return apiClient.call(apiRequest, GetAccessControlGroupRuleListResponse.class);
	}

	/**
	 * 
	 * ACGRule리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAccessControlGroupRuleListRequest getAccessControlGroupRuleListRequest (required)
	 * @return byte[]
	 *	GetAccessControlGroupRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAccessControlGroupRuleListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAccessControlGroupRuleList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACGRule리스트조회
	 * @param getAccessControlGroupRuleListRequest getAccessControlGroupRuleListRequest (required)
	 * @return GetAccessControlGroupRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAccessControlGroupRuleListResponse> getAccessControlGroupRuleListPost(GetAccessControlGroupRuleListRequest getAccessControlGroupRuleListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAccessControlGroupRuleList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getAccessControlGroupRuleListRequest, true, false);
		return apiClient.call(apiRequest, GetAccessControlGroupRuleListResponse.class);
	}

	/**
	 * 
	 * ACGRule리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAccessControlGroupRuleListRequest getAccessControlGroupRuleListRequest (required)
	 * @return byte[]
	 *	GetAccessControlGroupRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAccessControlGroupRuleListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAccessControlGroupRuleList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스상세조회
	 * @param getBlockStorageInstanceDetailRequest getBlockStorageInstanceDetailRequest (required)
	 * @return GetBlockStorageInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageInstanceDetailResponse> getBlockStorageInstanceDetailGet(GetBlockStorageInstanceDetailRequest getBlockStorageInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getBlockStorageInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageInstanceDetailResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageInstanceDetailRequest getBlockStorageInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetBlockStorageInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageInstanceDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스상세조회
	 * @param getBlockStorageInstanceDetailRequest getBlockStorageInstanceDetailRequest (required)
	 * @return GetBlockStorageInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageInstanceDetailResponse> getBlockStorageInstanceDetailPost(GetBlockStorageInstanceDetailRequest getBlockStorageInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getBlockStorageInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageInstanceDetailResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageInstanceDetailRequest getBlockStorageInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetBlockStorageInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageInstanceDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스리스트조회
	 * @param getBlockStorageInstanceListRequest getBlockStorageInstanceListRequest (required)
	 * @return GetBlockStorageInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageInstanceListResponse> getBlockStorageInstanceListGet(GetBlockStorageInstanceListRequest getBlockStorageInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getBlockStorageInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageInstanceListResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageInstanceListRequest getBlockStorageInstanceListRequest (required)
	 * @return byte[]
	 *	GetBlockStorageInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스리스트조회
	 * @param getBlockStorageInstanceListRequest getBlockStorageInstanceListRequest (required)
	 * @return GetBlockStorageInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageInstanceListResponse> getBlockStorageInstanceListPost(GetBlockStorageInstanceListRequest getBlockStorageInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getBlockStorageInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageInstanceListResponse.class);
	}

	/**
	 * 
	 * 블록스토리지인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageInstanceListRequest getBlockStorageInstanceListRequest (required)
	 * @return byte[]
	 *	GetBlockStorageInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스상세조회
	 * @param getBlockStorageSnapshotInstanceDetailRequest getBlockStorageSnapshotInstanceDetailRequest (required)
	 * @return GetBlockStorageSnapshotInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageSnapshotInstanceDetailResponse> getBlockStorageSnapshotInstanceDetailGet(GetBlockStorageSnapshotInstanceDetailRequest getBlockStorageSnapshotInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageSnapshotInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getBlockStorageSnapshotInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageSnapshotInstanceDetailResponse.class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageSnapshotInstanceDetailRequest getBlockStorageSnapshotInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetBlockStorageSnapshotInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageSnapshotInstanceDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageSnapshotInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스상세조회
	 * @param getBlockStorageSnapshotInstanceDetailRequest getBlockStorageSnapshotInstanceDetailRequest (required)
	 * @return GetBlockStorageSnapshotInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageSnapshotInstanceDetailResponse> getBlockStorageSnapshotInstanceDetailPost(GetBlockStorageSnapshotInstanceDetailRequest getBlockStorageSnapshotInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageSnapshotInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getBlockStorageSnapshotInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageSnapshotInstanceDetailResponse.class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageSnapshotInstanceDetailRequest getBlockStorageSnapshotInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetBlockStorageSnapshotInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageSnapshotInstanceDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageSnapshotInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스리스트조회
	 * @param getBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest (required)
	 * @return GetBlockStorageSnapshotInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageSnapshotInstanceListResponse> getBlockStorageSnapshotInstanceListGet(GetBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageSnapshotInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getBlockStorageSnapshotInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageSnapshotInstanceListResponse.class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest (required)
	 * @return byte[]
	 *	GetBlockStorageSnapshotInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageSnapshotInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageSnapshotInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스리스트조회
	 * @param getBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest (required)
	 * @return GetBlockStorageSnapshotInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageSnapshotInstanceListResponse> getBlockStorageSnapshotInstanceListPost(GetBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageSnapshotInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getBlockStorageSnapshotInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageSnapshotInstanceListResponse.class);
	}

	/**
	 * 
	 * 블록스토리지스냅샷인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest (required)
	 * @return byte[]
	 *	GetBlockStorageSnapshotInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageSnapshotInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageSnapshotInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지볼륨타입리스트 조회
	 * @param getBlockStorageVolumeTypeListRequest  (required)
	 * @return GetBlockStorageVolumeTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageVolumeTypeListResponse> getBlockStorageVolumeTypeListGet(GetBlockStorageVolumeTypeListRequest getBlockStorageVolumeTypeListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageVolumeTypeList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getBlockStorageVolumeTypeListRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageVolumeTypeListResponse.class);
	}

	/**
	 * 
	 * 블록스토리지볼륨타입리스트 조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageVolumeTypeListRequest  (required)
	 * @return byte[]
	 *	GetBlockStorageVolumeTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageVolumeTypeListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageVolumeTypeList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지볼륨타입리스트 조회
	 * @param getBlockStorageVolumeTypeListRequest  (required)
	 * @return GetBlockStorageVolumeTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageVolumeTypeListResponse> getBlockStorageVolumeTypeListPost(GetBlockStorageVolumeTypeListRequest getBlockStorageVolumeTypeListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageVolumeTypeList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getBlockStorageVolumeTypeListRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageVolumeTypeListResponse.class);
	}

	/**
	 * 
	 * 블록스토리지볼륨타입리스트 조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageVolumeTypeListRequest  (required)
	 * @return byte[]
	 *	GetBlockStorageVolumeTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageVolumeTypeListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageVolumeTypeList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * FlogLog 설정정보 조회
	 * @param getFlowLogConfigurationListRequest getFlowLogConfigurationListRequest (required)
	 * @return FlowLogConfigurationList
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<FlowLogConfigurationList> getFlowLogConfigurationListGet(GetFlowLogConfigurationListRequest getFlowLogConfigurationListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getFlowLogConfigurationList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getFlowLogConfigurationListRequest, true, false);
		return apiClient.call(apiRequest, FlowLogConfigurationList.class);
	}

	/**
	 * 
	 * FlogLog 설정정보 조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getFlowLogConfigurationListRequest getFlowLogConfigurationListRequest (required)
	 * @return byte[]
	 *	FlowLogConfigurationList
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getFlowLogConfigurationListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getFlowLogConfigurationList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * FlogLog 설정정보 조회
	 * @param getflowLogConfigurationListRequest getflowLogConfigurationListRequest (required)
	 * @return FlowLogConfigurationList
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<FlowLogConfigurationList> getFlowLogConfigurationListPost(GetFlowLogConfigurationListRequest getflowLogConfigurationListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getFlowLogConfigurationList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getflowLogConfigurationListRequest, true, false);
		return apiClient.call(apiRequest, FlowLogConfigurationList.class);
	}

	/**
	 * 
	 * FlogLog 설정정보 조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getflowLogConfigurationListRequest getflowLogConfigurationListRequest (required)
	 * @return byte[]
	 *	FlowLogConfigurationList
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getFlowLogConfigurationListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getFlowLogConfigurationList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 하이퍼바이저타입리스트조회
	 * @param getHypervisorTypeListRequest  (required)
	 * @return GetHypervisorTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetHypervisorTypeListResponse> getHypervisorTypeListGet(GetHypervisorTypeListRequest getHypervisorTypeListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getHypervisorTypeList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getHypervisorTypeListRequest, true, false);
		return apiClient.call(apiRequest, GetHypervisorTypeListResponse.class);
	}

	/**
	 * 
	 * 하이퍼바이저타입리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getHypervisorTypeListRequest  (required)
	 * @return byte[]
	 *	GetHypervisorTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getHypervisorTypeListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getHypervisorTypeList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 하이퍼바이저타입리스트조회 
	 * @param getHypervisorTypeListRequest  (required)
	 * @return GetHypervisorTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetHypervisorTypeListResponse> getHypervisorTypeListPost(GetHypervisorTypeListRequest getHypervisorTypeListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getHypervisorTypeList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getHypervisorTypeListRequest, true, false);
		return apiClient.call(apiRequest, GetHypervisorTypeListResponse.class);
	}

	/**
	 * 
	 * 하이퍼바이저타입리스트조회 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getHypervisorTypeListRequest  (required)
	 * @return byte[]
	 *	GetHypervisorTypeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getHypervisorTypeListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getHypervisorTypeList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 초기화스크립트상세조회
	 * @param getInitScriptDetailRequest getInitScriptDetailRequest (required)
	 * @return GetInitScriptDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetInitScriptDetailResponse> getInitScriptDetailGet(GetInitScriptDetailRequest getInitScriptDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getInitScriptDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getInitScriptDetailRequest, true, false);
		return apiClient.call(apiRequest, GetInitScriptDetailResponse.class);
	}

	/**
	 * 
	 * 초기화스크립트상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getInitScriptDetailRequest getInitScriptDetailRequest (required)
	 * @return byte[]
	 *	GetInitScriptDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getInitScriptDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getInitScriptDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 초기화스크립트상세조회
	 * @param getInitScriptDetailRequest getInitScriptDetailRequest (required)
	 * @return GetInitScriptDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetInitScriptDetailResponse> getInitScriptDetailPost(GetInitScriptDetailRequest getInitScriptDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getInitScriptDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getInitScriptDetailRequest, true, false);
		return apiClient.call(apiRequest, GetInitScriptDetailResponse.class);
	}

	/**
	 * 
	 * 초기화스크립트상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getInitScriptDetailRequest getInitScriptDetailRequest (required)
	 * @return byte[]
	 *	GetInitScriptDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getInitScriptDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getInitScriptDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 초기화스크립트리스트조회
	 * @param getInitScriptListRequest getInitScriptListRequest (required)
	 * @return GetInitScriptListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetInitScriptListResponse> getInitScriptListGet(GetInitScriptListRequest getInitScriptListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getInitScriptList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getInitScriptListRequest, true, false);
		return apiClient.call(apiRequest, GetInitScriptListResponse.class);
	}

	/**
	 * 
	 * 초기화스크립트리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getInitScriptListRequest getInitScriptListRequest (required)
	 * @return byte[]
	 *	GetInitScriptListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getInitScriptListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getInitScriptList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 초기화스크립트리스트조회
	 * @param getInitScriptListRequest getInitScriptListRequest (required)
	 * @return GetInitScriptListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetInitScriptListResponse> getInitScriptListPost(GetInitScriptListRequest getInitScriptListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getInitScriptList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getInitScriptListRequest, true, false);
		return apiClient.call(apiRequest, GetInitScriptListResponse.class);
	}

	/**
	 * 
	 * 초기화스크립트리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getInitScriptListRequest getInitScriptListRequest (required)
	 * @return byte[]
	 *	GetInitScriptListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getInitScriptListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getInitScriptList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로그인키리스트조회
	 * @param getLoginKeyListRequest getLoginKeyListRequest (required)
	 * @return GetLoginKeyListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoginKeyListResponse> getLoginKeyListGet(GetLoginKeyListRequest getLoginKeyListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoginKeyList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getLoginKeyListRequest, true, false);
		return apiClient.call(apiRequest, GetLoginKeyListResponse.class);
	}

	/**
	 * 
	 * 로그인키리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoginKeyListRequest getLoginKeyListRequest (required)
	 * @return byte[]
	 *	GetLoginKeyListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoginKeyListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoginKeyList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 로그인키리스트조회
	 * @param getLoginKeyListRequest getLoginKeyListRequest (required)
	 * @return GetLoginKeyListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoginKeyListResponse> getLoginKeyListPost(GetLoginKeyListRequest getLoginKeyListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoginKeyList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getLoginKeyListRequest, true, false);
		return apiClient.call(apiRequest, GetLoginKeyListResponse.class);
	}

	/**
	 * 
	 * 로그인키리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoginKeyListRequest getLoginKeyListRequest (required)
	 * @return byte[]
	 *	GetLoginKeyListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoginKeyListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoginKeyList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스상세조회
	 * @param getMemberServerImageInstanceDetailRequest getMemberServerImageInstanceDetailRequest (required)
	 * @return GetMemberServerImageInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetMemberServerImageInstanceDetailResponse> getMemberServerImageInstanceDetailGet(GetMemberServerImageInstanceDetailRequest getMemberServerImageInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getMemberServerImageInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getMemberServerImageInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetMemberServerImageInstanceDetailResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getMemberServerImageInstanceDetailRequest getMemberServerImageInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetMemberServerImageInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getMemberServerImageInstanceDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getMemberServerImageInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스상세조회
	 * @param getMemberServerImageInstanceDetailRequest getMemberServerImageInstanceDetailRequest (required)
	 * @return GetMemberServerImageInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetMemberServerImageInstanceDetailResponse> getMemberServerImageInstanceDetailPost(GetMemberServerImageInstanceDetailRequest getMemberServerImageInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getMemberServerImageInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getMemberServerImageInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetMemberServerImageInstanceDetailResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getMemberServerImageInstanceDetailRequest getMemberServerImageInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetMemberServerImageInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getMemberServerImageInstanceDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getMemberServerImageInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스리스트조회
	 * @param getMemberServerImageInstanceListRequest getMemberServerImageInstanceListRequest (required)
	 * @return GetMemberServerImageInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetMemberServerImageInstanceListResponse> getMemberServerImageInstanceListGet(GetMemberServerImageInstanceListRequest getMemberServerImageInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getMemberServerImageInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getMemberServerImageInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetMemberServerImageInstanceListResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getMemberServerImageInstanceListRequest getMemberServerImageInstanceListRequest (required)
	 * @return byte[]
	 *	GetMemberServerImageInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getMemberServerImageInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getMemberServerImageInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스리스트조회
	 * @param getMemberServerImageInstanceListRequest getMemberServerImageInstanceListRequest (required)
	 * @return GetMemberServerImageInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetMemberServerImageInstanceListResponse> getMemberServerImageInstanceListPost(GetMemberServerImageInstanceListRequest getMemberServerImageInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getMemberServerImageInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getMemberServerImageInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetMemberServerImageInstanceListResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getMemberServerImageInstanceListRequest getMemberServerImageInstanceListRequest (required)
	 * @return byte[]
	 *	GetMemberServerImageInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getMemberServerImageInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getMemberServerImageInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스상세조회
	 * @param getNetworkInterfaceDetailRequest getNetworkInterfaceDetailRequest (required)
	 * @return GetNetworkInterfaceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNetworkInterfaceDetailResponse> getNetworkInterfaceDetailGet(GetNetworkInterfaceDetailRequest getNetworkInterfaceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNetworkInterfaceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNetworkInterfaceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetNetworkInterfaceDetailResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNetworkInterfaceDetailRequest getNetworkInterfaceDetailRequest (required)
	 * @return byte[]
	 *	GetNetworkInterfaceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNetworkInterfaceDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNetworkInterfaceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스상세조회
	 * @param getNetworkInterfaceDetailRequest getNetworkInterfaceDetailRequest (required)
	 * @return GetNetworkInterfaceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNetworkInterfaceDetailResponse> getNetworkInterfaceDetailPost(GetNetworkInterfaceDetailRequest getNetworkInterfaceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNetworkInterfaceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNetworkInterfaceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetNetworkInterfaceDetailResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNetworkInterfaceDetailRequest getNetworkInterfaceDetailRequest (required)
	 * @return byte[]
	 *	GetNetworkInterfaceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNetworkInterfaceDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNetworkInterfaceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스리스트조회
	 * @param getNetworkInterfaceListRequest getNetworkInterfaceListRequest (required)
	 * @return GetNetworkInterfaceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNetworkInterfaceListResponse> getNetworkInterfaceListGet(GetNetworkInterfaceListRequest getNetworkInterfaceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNetworkInterfaceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNetworkInterfaceListRequest, true, false);
		return apiClient.call(apiRequest, GetNetworkInterfaceListResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNetworkInterfaceListRequest getNetworkInterfaceListRequest (required)
	 * @return byte[]
	 *	GetNetworkInterfaceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNetworkInterfaceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNetworkInterfaceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스리스트조회
	 * @param getNetworkInterfaceListRequest getNetworkInterfaceListRequest (required)
	 * @return GetNetworkInterfaceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNetworkInterfaceListResponse> getNetworkInterfaceListPost(GetNetworkInterfaceListRequest getNetworkInterfaceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNetworkInterfaceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNetworkInterfaceListRequest, true, false);
		return apiClient.call(apiRequest, GetNetworkInterfaceListResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNetworkInterfaceListRequest getNetworkInterfaceListRequest (required)
	 * @return byte[]
	 *	GetNetworkInterfaceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNetworkInterfaceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNetworkInterfaceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 물리배치그룹상세조회
	 * @param getPlacementGroupDetailRequest getPlacementGroupDetailRequest (required)
	 * @return GetPlacementGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPlacementGroupDetailResponse> getPlacementGroupDetailGet(GetPlacementGroupDetailRequest getPlacementGroupDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPlacementGroupDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getPlacementGroupDetailRequest, true, false);
		return apiClient.call(apiRequest, GetPlacementGroupDetailResponse.class);
	}

	/**
	 * 
	 * 물리배치그룹상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPlacementGroupDetailRequest getPlacementGroupDetailRequest (required)
	 * @return byte[]
	 *	GetPlacementGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPlacementGroupDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPlacementGroupDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 물리배치그룹상세조회
	 * @param getPlacementGroupDetailRequest getPlacementGroupDetailRequest (required)
	 * @return GetPlacementGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPlacementGroupDetailResponse> getPlacementGroupDetailPost(GetPlacementGroupDetailRequest getPlacementGroupDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPlacementGroupDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getPlacementGroupDetailRequest, true, false);
		return apiClient.call(apiRequest, GetPlacementGroupDetailResponse.class);
	}

	/**
	 * 
	 * 물리배치그룹상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPlacementGroupDetailRequest getPlacementGroupDetailRequest (required)
	 * @return byte[]
	 *	GetPlacementGroupDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPlacementGroupDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPlacementGroupDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 물리배치그룹리스트조회
	 * @param getPlacementGroupListRequest getPlacementGroupListRequest (required)
	 * @return GetPlacementGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPlacementGroupListResponse> getPlacementGroupListGet(GetPlacementGroupListRequest getPlacementGroupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPlacementGroupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getPlacementGroupListRequest, true, false);
		return apiClient.call(apiRequest, GetPlacementGroupListResponse.class);
	}

	/**
	 * 
	 * 물리배치그룹리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPlacementGroupListRequest getPlacementGroupListRequest (required)
	 * @return byte[]
	 *	GetPlacementGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPlacementGroupListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPlacementGroupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 물리배치그룹리스트조회
	 * @param getPlacementGroupListRequest getPlacementGroupListRequest (required)
	 * @return GetPlacementGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPlacementGroupListResponse> getPlacementGroupListPost(GetPlacementGroupListRequest getPlacementGroupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPlacementGroupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getPlacementGroupListRequest, true, false);
		return apiClient.call(apiRequest, GetPlacementGroupListResponse.class);
	}

	/**
	 * 
	 * 물리배치그룹리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPlacementGroupListRequest getPlacementGroupListRequest (required)
	 * @return byte[]
	 *	GetPlacementGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPlacementGroupListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPlacementGroupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP인스턴스상세조회
	 * @param getPublicIpInstanceDetailRequest getPublicIpInstanceDetailRequest (required)
	 * @return GetPublicIpInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPublicIpInstanceDetailResponse> getPublicIpInstanceDetailGet(GetPublicIpInstanceDetailRequest getPublicIpInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPublicIpInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getPublicIpInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetPublicIpInstanceDetailResponse.class);
	}

	/**
	 * 
	 * 공인IP인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPublicIpInstanceDetailRequest getPublicIpInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetPublicIpInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPublicIpInstanceDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPublicIpInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP인스턴스상세조회
	 * @param getPublicIpInstanceDetailRequest getPublicIpInstanceDetailRequest (required)
	 * @return GetPublicIpInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPublicIpInstanceDetailResponse> getPublicIpInstanceDetailPost(GetPublicIpInstanceDetailRequest getPublicIpInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPublicIpInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getPublicIpInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetPublicIpInstanceDetailResponse.class);
	}

	/**
	 * 
	 * 공인IP인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPublicIpInstanceDetailRequest getPublicIpInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetPublicIpInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPublicIpInstanceDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPublicIpInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP인스턴스리스트조회
	 * @param getPublicIpInstanceListRequest getPublicIpInstanceListRequest (required)
	 * @return GetPublicIpInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPublicIpInstanceListResponse> getPublicIpInstanceListGet(GetPublicIpInstanceListRequest getPublicIpInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPublicIpInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getPublicIpInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetPublicIpInstanceListResponse.class);
	}

	/**
	 * 
	 * 공인IP인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPublicIpInstanceListRequest getPublicIpInstanceListRequest (required)
	 * @return byte[]
	 *	GetPublicIpInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPublicIpInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPublicIpInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP인스턴스리스트조회
	 * @param getPublicIpInstanceListRequest getPublicIpInstanceListRequest (required)
	 * @return GetPublicIpInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPublicIpInstanceListResponse> getPublicIpInstanceListPost(GetPublicIpInstanceListRequest getPublicIpInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPublicIpInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getPublicIpInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetPublicIpInstanceListResponse.class);
	}

	/**
	 * 
	 * 공인IP인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPublicIpInstanceListRequest getPublicIpInstanceListRequest (required)
	 * @return byte[]
	 *	GetPublicIpInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPublicIpInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPublicIpInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP할당가능서버인스턴스리스트조회
	 * @param getPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest (required)
	 * @return GetPublicIpTargetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPublicIpTargetServerInstanceListResponse> getPublicIpTargetServerInstanceListGet(GetPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPublicIpTargetServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getPublicIpTargetServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetPublicIpTargetServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 공인IP할당가능서버인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetPublicIpTargetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPublicIpTargetServerInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPublicIpTargetServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 공인IP할당가능서버인스턴스리스트조회
	 * @param getPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest (required)
	 * @return GetPublicIpTargetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPublicIpTargetServerInstanceListResponse> getPublicIpTargetServerInstanceListPost(GetPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPublicIpTargetServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getPublicIpTargetServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetPublicIpTargetServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 공인IP할당가능서버인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetPublicIpTargetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPublicIpTargetServerInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPublicIpTargetServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * RAID리스트조회
	 * @param getRaidListRequest getRaidListRequest (required)
	 * @return GetRaidListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRaidListResponse> getRaidListGet(GetRaidListRequest getRaidListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRaidList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getRaidListRequest, true, false);
		return apiClient.call(apiRequest, GetRaidListResponse.class);
	}

	/**
	 * 
	 * RAID리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRaidListRequest getRaidListRequest (required)
	 * @return byte[]
	 *	GetRaidListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRaidListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRaidList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * RAID리스트조회
	 * @param getRaidListRequest getRaidListRequest (required)
	 * @return GetRaidListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRaidListResponse> getRaidListPost(GetRaidListRequest getRaidListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRaidList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getRaidListRequest, true, false);
		return apiClient.call(apiRequest, GetRaidListResponse.class);
	}

	/**
	 * 
	 * RAID리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRaidListRequest getRaidListRequest (required)
	 * @return byte[]
	 *	GetRaidListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRaidListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRaidList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * REGION리스트조회
	 * @param getRegionListRequest getRegionListRequest (required)
	 * @return GetRegionListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRegionListResponse> getRegionListGet(GetRegionListRequest getRegionListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRegionList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getRegionListRequest, true, false);
		return apiClient.call(apiRequest, GetRegionListResponse.class);
	}

	/**
	 * 
	 * REGION리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRegionListRequest getRegionListRequest (required)
	 * @return byte[]
	 *	GetRegionListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRegionListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRegionList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * REGION리스트조회
	 * @param getRegionListRequest getRegionListRequest (required)
	 * @return GetRegionListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRegionListResponse> getRegionListPost(GetRegionListRequest getRegionListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRegionList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getRegionListRequest, true, false);
		return apiClient.call(apiRequest, GetRegionListResponse.class);
	}

	/**
	 * 
	 * REGION리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRegionListRequest getRegionListRequest (required)
	 * @return byte[]
	 *	GetRegionListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRegionListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRegionList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스의루트패스워드조회
	 * @param getRootPasswordRequest getRootPasswordRequest (required)
	 * @return GetRootPasswordResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRootPasswordResponse> getRootPasswordGet(GetRootPasswordRequest getRootPasswordRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRootPassword";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getRootPasswordRequest, true, false);
		return apiClient.call(apiRequest, GetRootPasswordResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스의루트패스워드조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRootPasswordRequest getRootPasswordRequest (required)
	 * @return byte[]
	 *	GetRootPasswordResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRootPasswordGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRootPassword";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스의루트패스워드조회
	 * @param getRootPasswordRequest getRootPasswordRequest (required)
	 * @return GetRootPasswordResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRootPasswordResponse> getRootPasswordPost(GetRootPasswordRequest getRootPasswordRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRootPassword";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getRootPasswordRequest, true, false);
		return apiClient.call(apiRequest, GetRootPasswordResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스의루트패스워드조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRootPasswordRequest getRootPasswordRequest (required)
	 * @return byte[]
	 *	GetRootPasswordResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRootPasswordPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRootPassword";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스리스트의루트패스워드조회
	 * @param getRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest (required)
	 * @return GetRootPasswordServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRootPasswordServerInstanceListResponse> getRootPasswordServerInstanceListGet(GetRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRootPasswordServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getRootPasswordServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetRootPasswordServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스리스트의루트패스워드조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetRootPasswordServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRootPasswordServerInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRootPasswordServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스리스트의루트패스워드조회
	 * @param getRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest (required)
	 * @return GetRootPasswordServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRootPasswordServerInstanceListResponse> getRootPasswordServerInstanceListPost(GetRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRootPasswordServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getRootPasswordServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetRootPasswordServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스리스트의루트패스워드조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetRootPasswordServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRootPasswordServerInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRootPasswordServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버이미지상세조회
	 * @param getServerImageDetailRequest  (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getServerImageDetailGet(GetServerImageDetailRequest getServerImageDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerImageDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getServerImageDetailRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 서버이미지상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerImageDetailRequest  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerImageDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerImageDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버이미지상세조회
	 * @param getServerImageDetailRequest  (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getServerImageDetailPost(GetServerImageDetailRequest getServerImageDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerImageDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getServerImageDetailRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 서버이미지상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerImageDetailRequest  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerImageDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerImageDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버이미지리스트조회
	 * @param getServerImageListRequest  (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getServerImageListGet(GetServerImageListRequest getServerImageListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerImageList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getServerImageListRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 서버이미지리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerImageListRequest  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerImageListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerImageList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버이미지리스트조회
	 * @param getServerImageListRequest  (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getServerImageListPost(GetServerImageListRequest getServerImageListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerImageList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getServerImageListRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 서버이미지리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerImageListRequest  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerImageListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerImageList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버이미지상품리스트조회
	 * @param getServerImageProductListRequest getServerImageProductListRequest (required)
	 * @return GetServerImageProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerImageProductListResponse> getServerImageProductListGet(GetServerImageProductListRequest getServerImageProductListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerImageProductList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getServerImageProductListRequest, true, false);
		return apiClient.call(apiRequest, GetServerImageProductListResponse.class);
	}

	/**
	 * 
	 * 서버이미지상품리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerImageProductListRequest getServerImageProductListRequest (required)
	 * @return byte[]
	 *	GetServerImageProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerImageProductListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerImageProductList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버이미지상품리스트조회
	 * @param getServerImageProductListRequest getServerImageProductListRequest (required)
	 * @return GetServerImageProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerImageProductListResponse> getServerImageProductListPost(GetServerImageProductListRequest getServerImageProductListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerImageProductList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getServerImageProductListRequest, true, false);
		return apiClient.call(apiRequest, GetServerImageProductListResponse.class);
	}

	/**
	 * 
	 * 서버이미지상품리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerImageProductListRequest getServerImageProductListRequest (required)
	 * @return byte[]
	 *	GetServerImageProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerImageProductListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerImageProductList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스상세조회
	 * @param getServerInstanceDetailRequest getServerInstanceDetailRequest (required)
	 * @return GetServerInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerInstanceDetailResponse> getServerInstanceDetailGet(GetServerInstanceDetailRequest getServerInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getServerInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetServerInstanceDetailResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerInstanceDetailRequest getServerInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetServerInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerInstanceDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스상세조회
	 * @param getServerInstanceDetailRequest getServerInstanceDetailRequest (required)
	 * @return GetServerInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerInstanceDetailResponse> getServerInstanceDetailPost(GetServerInstanceDetailRequest getServerInstanceDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerInstanceDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getServerInstanceDetailRequest, true, false);
		return apiClient.call(apiRequest, GetServerInstanceDetailResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerInstanceDetailRequest getServerInstanceDetailRequest (required)
	 * @return byte[]
	 *	GetServerInstanceDetailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerInstanceDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerInstanceDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스리스트조회
	 * @param getServerInstanceListRequest getServerInstanceListRequest (required)
	 * @return GetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerInstanceListResponse> getServerInstanceListGet(GetServerInstanceListRequest getServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerInstanceListRequest getServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스리스트조회
	 * @param getServerInstanceListRequest getServerInstanceListRequest (required)
	 * @return GetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerInstanceListResponse> getServerInstanceListPost(GetServerInstanceListRequest getServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerInstanceListRequest getServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버상품리스트조회
	 * @param getServerProductListRequest getServerProductListRequest (required)
	 * @return GetServerProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerProductListResponse> getServerProductListGet(GetServerProductListRequest getServerProductListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerProductList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getServerProductListRequest, true, false);
		return apiClient.call(apiRequest, GetServerProductListResponse.class);
	}

	/**
	 * 
	 * 서버상품리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerProductListRequest getServerProductListRequest (required)
	 * @return byte[]
	 *	GetServerProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerProductListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerProductList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버상품리스트조회
	 * @param getServerProductListRequest getServerProductListRequest (required)
	 * @return GetServerProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerProductListResponse> getServerProductListPost(GetServerProductListRequest getServerProductListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerProductList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getServerProductListRequest, true, false);
		return apiClient.call(apiRequest, GetServerProductListResponse.class);
	}

	/**
	 * 
	 * 서버상품리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerProductListRequest getServerProductListRequest (required)
	 * @return byte[]
	 *	GetServerProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerProductListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerProductList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버스펙상세조회
	 * @param getServerSpecDetailRequest  (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getServerSpecDetailGet(GetServerSpecDetailRequest getServerSpecDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerSpecDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getServerSpecDetailRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 서버스펙상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerSpecDetailRequest  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerSpecDetailGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerSpecDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버스펙상세조회
	 * @param getServerSpecDetailRequest  (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getServerSpecDetailPost(GetServerSpecDetailRequest getServerSpecDetailRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerSpecDetail";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getServerSpecDetailRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 서버스펙상세조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerSpecDetailRequest  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerSpecDetailPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerSpecDetail";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버스펙리스트조회
	 * @param getServerSpecListRequest  (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getServerSpecListGet(GetServerSpecListRequest getServerSpecListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerSpecList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getServerSpecListRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 서버스펙리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerSpecListRequest  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerSpecListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerSpecList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버스펙리스트조회
	 * @param getServerSpecListRequest  (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void getServerSpecListPost(GetServerSpecListRequest getServerSpecListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerSpecList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getServerSpecListRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 서버스펙리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerSpecListRequest  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerSpecListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerSpecList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ZONE리스트조회
	 * @param getZoneListRequest getZoneListRequest (required)
	 * @return GetZoneListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetZoneListResponse> getZoneListGet(GetZoneListRequest getZoneListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getZoneList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getZoneListRequest, true, false);
		return apiClient.call(apiRequest, GetZoneListResponse.class);
	}

	/**
	 * 
	 * ZONE리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getZoneListRequest getZoneListRequest (required)
	 * @return byte[]
	 *	GetZoneListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getZoneListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getZoneList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ZONE리스트조회
	 * @param getZoneListRequest getZoneListRequest (required)
	 * @return GetZoneListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetZoneListResponse> getZoneListPost(GetZoneListRequest getZoneListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getZoneList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getZoneListRequest, true, false);
		return apiClient.call(apiRequest, GetZoneListResponse.class);
	}

	/**
	 * 
	 * ZONE리스트조회
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getZoneListRequest getZoneListRequest (required)
	 * @return byte[]
	 *	GetZoneListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getZoneListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getZoneList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 사용자가생성한로그인키import
	 * @param importLoginKeyRequest importLoginKeyRequest (required)
	 * @return ImportLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ImportLoginKeyResponse> importLoginKeyGet(ImportLoginKeyRequest importLoginKeyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/importLoginKey";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, importLoginKeyRequest, true, false);
		return apiClient.call(apiRequest, ImportLoginKeyResponse.class);
	}

	/**
	 * 
	 * 사용자가생성한로그인키import
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	importLoginKeyRequest importLoginKeyRequest (required)
	 * @return byte[]
	 *	ImportLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> importLoginKeyGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/importLoginKey";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 사용자가생성한로그인키import
	 * @param importLoginKeyRequest importLoginKeyRequest (required)
	 * @return ImportLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ImportLoginKeyResponse> importLoginKeyPost(ImportLoginKeyRequest importLoginKeyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/importLoginKey";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, importLoginKeyRequest, true, false);
		return apiClient.call(apiRequest, ImportLoginKeyResponse.class);
	}

	/**
	 * 
	 * 사용자가생성한로그인키import
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	importLoginKeyRequest importLoginKeyRequest (required)
	 * @return byte[]
	 *	ImportLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> importLoginKeyPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/importLoginKey";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param interruptServerInstanceRequest  (required)
	 * @return InterruptServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<InterruptServerInstanceResponse> interruptServerInstanceGet(InterruptServerInstanceRequest interruptServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/interruptServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, interruptServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, InterruptServerInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	interruptServerInstanceRequest  (required)
	 * @return byte[]
	 *	InterruptServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> interruptServerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/interruptServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param interruptServerInstanceRequest  (required)
	 * @return InterruptServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<InterruptServerInstanceResponse> interruptServerInstancePost(InterruptServerInstanceRequest interruptServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/interruptServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, interruptServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, InterruptServerInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	interruptServerInstanceRequest  (required)
	 * @return byte[]
	 *	InterruptServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> interruptServerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/interruptServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스재시작
	 * @param rebootServerInstancesRequest rebootServerInstancesRequest (required)
	 * @return RebootServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RebootServerInstancesResponse> rebootServerInstancesGet(RebootServerInstancesRequest rebootServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/rebootServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, rebootServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, RebootServerInstancesResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스재시작
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	rebootServerInstancesRequest rebootServerInstancesRequest (required)
	 * @return byte[]
	 *	RebootServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> rebootServerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/rebootServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스재시작
	 * @param rebootServerInstancesRequest rebootServerInstancesRequest (required)
	 * @return RebootServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RebootServerInstancesResponse> rebootServerInstancesPost(RebootServerInstancesRequest rebootServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/rebootServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, rebootServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, RebootServerInstancesResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스재시작
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	rebootServerInstancesRequest rebootServerInstancesRequest (required)
	 * @return byte[]
	 *	RebootServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> rebootServerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/rebootServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACGInboundRule삭제
	 * @param removeAccessControlGroupInboundRuleRequest removeAccessControlGroupInboundRuleRequest (required)
	 * @return RemoveAccessControlGroupInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveAccessControlGroupInboundRuleResponse> removeAccessControlGroupInboundRuleGet(RemoveAccessControlGroupInboundRuleRequest removeAccessControlGroupInboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeAccessControlGroupInboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removeAccessControlGroupInboundRuleRequest, true, false);
		return apiClient.call(apiRequest, RemoveAccessControlGroupInboundRuleResponse.class);
	}

	/**
	 * 
	 * ACGInboundRule삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeAccessControlGroupInboundRuleRequest removeAccessControlGroupInboundRuleRequest (required)
	 * @return byte[]
	 *	RemoveAccessControlGroupInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeAccessControlGroupInboundRuleGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeAccessControlGroupInboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACGInboundRule삭제
	 * @param removeAccessControlGroupInboundRuleRequest removeAccessControlGroupInboundRuleRequest (required)
	 * @return RemoveAccessControlGroupInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveAccessControlGroupInboundRuleResponse> removeAccessControlGroupInboundRulePost(RemoveAccessControlGroupInboundRuleRequest removeAccessControlGroupInboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeAccessControlGroupInboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removeAccessControlGroupInboundRuleRequest, true, false);
		return apiClient.call(apiRequest, RemoveAccessControlGroupInboundRuleResponse.class);
	}

	/**
	 * 
	 * ACGInboundRule삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeAccessControlGroupInboundRuleRequest removeAccessControlGroupInboundRuleRequest (required)
	 * @return byte[]
	 *	RemoveAccessControlGroupInboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeAccessControlGroupInboundRulePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeAccessControlGroupInboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACGOutboundRule삭제
	 * @param removeAccessControlGroupOutboundRuleRequest removeAccessControlGroupOutboundRuleRequest (required)
	 * @return RemoveAccessControlGroupOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveAccessControlGroupOutboundRuleResponse> removeAccessControlGroupOutboundRuleGet(RemoveAccessControlGroupOutboundRuleRequest removeAccessControlGroupOutboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeAccessControlGroupOutboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removeAccessControlGroupOutboundRuleRequest, true, false);
		return apiClient.call(apiRequest, RemoveAccessControlGroupOutboundRuleResponse.class);
	}

	/**
	 * 
	 * ACGOutboundRule삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeAccessControlGroupOutboundRuleRequest removeAccessControlGroupOutboundRuleRequest (required)
	 * @return byte[]
	 *	RemoveAccessControlGroupOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeAccessControlGroupOutboundRuleGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeAccessControlGroupOutboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * ACGOutboundRule삭제
	 * @param removeAccessControlGroupOutboundRuleRequest removeAccessControlGroupOutboundRuleRequest (required)
	 * @return RemoveAccessControlGroupOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveAccessControlGroupOutboundRuleResponse> removeAccessControlGroupOutboundRulePost(RemoveAccessControlGroupOutboundRuleRequest removeAccessControlGroupOutboundRuleRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeAccessControlGroupOutboundRule";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removeAccessControlGroupOutboundRuleRequest, true, false);
		return apiClient.call(apiRequest, RemoveAccessControlGroupOutboundRuleResponse.class);
	}

	/**
	 * 
	 * ACGOutboundRule삭제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeAccessControlGroupOutboundRuleRequest removeAccessControlGroupOutboundRuleRequest (required)
	 * @return byte[]
	 *	RemoveAccessControlGroupOutboundRuleResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeAccessControlGroupOutboundRulePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeAccessControlGroupOutboundRule";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지공유권한제거
	 * @param removeMemberServerImageSharingPermissionRequest removeMemberServerImageSharingPermissionRequest (required)
	 * @return RemoveMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveMemberServerImageSharingPermissionResponse> removeMemberServerImageSharingPermissionGet(RemoveMemberServerImageSharingPermissionRequest removeMemberServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeMemberServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removeMemberServerImageSharingPermissionRequest, true, false);
		return apiClient.call(apiRequest, RemoveMemberServerImageSharingPermissionResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지공유권한제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeMemberServerImageSharingPermissionRequest removeMemberServerImageSharingPermissionRequest (required)
	 * @return byte[]
	 *	RemoveMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeMemberServerImageSharingPermissionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeMemberServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지공유권한제거
	 * @param removeMemberServerImageSharingPermissionRequest removeMemberServerImageSharingPermissionRequest (required)
	 * @return RemoveMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveMemberServerImageSharingPermissionResponse> removeMemberServerImageSharingPermissionPost(RemoveMemberServerImageSharingPermissionRequest removeMemberServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeMemberServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removeMemberServerImageSharingPermissionRequest, true, false);
		return apiClient.call(apiRequest, RemoveMemberServerImageSharingPermissionResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지공유권한제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeMemberServerImageSharingPermissionRequest removeMemberServerImageSharingPermissionRequest (required)
	 * @return byte[]
	 *	RemoveMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeMemberServerImageSharingPermissionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeMemberServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스의ACG제거
	 * @param removeNetworkInterfaceAccessControlGroupRequest removeNetworkInterfaceAccessControlGroupRequest (required)
	 * @return RemoveNetworkInterfaceAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveNetworkInterfaceAccessControlGroupResponse> removeNetworkInterfaceAccessControlGroupGet(RemoveNetworkInterfaceAccessControlGroupRequest removeNetworkInterfaceAccessControlGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeNetworkInterfaceAccessControlGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removeNetworkInterfaceAccessControlGroupRequest, true, false);
		return apiClient.call(apiRequest, RemoveNetworkInterfaceAccessControlGroupResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스의ACG제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeNetworkInterfaceAccessControlGroupRequest removeNetworkInterfaceAccessControlGroupRequest (required)
	 * @return byte[]
	 *	RemoveNetworkInterfaceAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeNetworkInterfaceAccessControlGroupGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeNetworkInterfaceAccessControlGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 네트워크인터페이스의ACG제거
	 * @param removeNetworkInterfaceAccessControlGroupRequest removeNetworkInterfaceAccessControlGroupRequest (required)
	 * @return RemoveNetworkInterfaceAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveNetworkInterfaceAccessControlGroupResponse> removeNetworkInterfaceAccessControlGroupPost(RemoveNetworkInterfaceAccessControlGroupRequest removeNetworkInterfaceAccessControlGroupRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeNetworkInterfaceAccessControlGroup";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removeNetworkInterfaceAccessControlGroupRequest, true, false);
		return apiClient.call(apiRequest, RemoveNetworkInterfaceAccessControlGroupResponse.class);
	}

	/**
	 * 
	 * 네트워크인터페이스의ACG제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeNetworkInterfaceAccessControlGroupRequest removeNetworkInterfaceAccessControlGroupRequest (required)
	 * @return byte[]
	 *	RemoveNetworkInterfaceAccessControlGroupResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeNetworkInterfaceAccessControlGroupPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeNetworkInterfaceAccessControlGroup";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 물리배치그룹에서서버인스턴스제거
	 * @param removePlacementGroupServerInstanceRequest removePlacementGroupServerInstanceRequest (required)
	 * @return RemovePlacementGroupServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemovePlacementGroupServerInstanceResponse> removePlacementGroupServerInstanceGet(RemovePlacementGroupServerInstanceRequest removePlacementGroupServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removePlacementGroupServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removePlacementGroupServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, RemovePlacementGroupServerInstanceResponse.class);
	}

	/**
	 * 
	 * 물리배치그룹에서서버인스턴스제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removePlacementGroupServerInstanceRequest removePlacementGroupServerInstanceRequest (required)
	 * @return byte[]
	 *	RemovePlacementGroupServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removePlacementGroupServerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removePlacementGroupServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 물리배치그룹에서서버인스턴스제거
	 * @param removePlacementGroupServerInstanceRequest removePlacementGroupServerInstanceRequest (required)
	 * @return RemovePlacementGroupServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemovePlacementGroupServerInstanceResponse> removePlacementGroupServerInstancePost(RemovePlacementGroupServerInstanceRequest removePlacementGroupServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removePlacementGroupServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removePlacementGroupServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, RemovePlacementGroupServerInstanceResponse.class);
	}

	/**
	 * 
	 * 물리배치그룹에서서버인스턴스제거
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removePlacementGroupServerInstanceRequest removePlacementGroupServerInstanceRequest (required)
	 * @return byte[]
	 *	RemovePlacementGroupServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removePlacementGroupServerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removePlacementGroupServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param removeServerImageSharingPermissionRequest  (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void removeServerImageSharingPermissionGet(RemoveServerImageSharingPermissionRequest removeServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removeServerImageSharingPermissionRequest, true, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeServerImageSharingPermissionRequest  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeServerImageSharingPermissionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param removeServerImageSharingPermissionRequest  (required)
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public void removeServerImageSharingPermissionPost(RemoveServerImageSharingPermissionRequest removeServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removeServerImageSharingPermissionRequest, false, false);
		apiClient.call(apiRequest);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeServerImageSharingPermissionRequest  (required)
	 * @return byte[]
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeServerImageSharingPermissionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지반납보호설정
	 * @param setBlockStorageReturnProtectionRequest setBlockStorageReturnProtectionRequest (required)
	 * @return SetBlockStorageReturnProtectionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetBlockStorageReturnProtectionResponse> setBlockStorageReturnProtectionGet(SetBlockStorageReturnProtectionRequest setBlockStorageReturnProtectionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setBlockStorageReturnProtection";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setBlockStorageReturnProtectionRequest, true, false);
		return apiClient.call(apiRequest, SetBlockStorageReturnProtectionResponse.class);
	}

	/**
	 * 
	 * 블록스토리지반납보호설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setBlockStorageReturnProtectionRequest setBlockStorageReturnProtectionRequest (required)
	 * @return byte[]
	 *	SetBlockStorageReturnProtectionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setBlockStorageReturnProtectionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setBlockStorageReturnProtection";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 블록스토리지반납보호설정
	 * @param setBlockStorageReturnProtectionRequest setBlockStorageReturnProtectionRequest (required)
	 * @return SetBlockStorageReturnProtectionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetBlockStorageReturnProtectionResponse> setBlockStorageReturnProtectionPost(SetBlockStorageReturnProtectionRequest setBlockStorageReturnProtectionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setBlockStorageReturnProtection";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setBlockStorageReturnProtectionRequest, true, false);
		return apiClient.call(apiRequest, SetBlockStorageReturnProtectionResponse.class);
	}

	/**
	 * 
	 * 블록스토리지반납보호설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setBlockStorageReturnProtectionRequest setBlockStorageReturnProtectionRequest (required)
	 * @return byte[]
	 *	SetBlockStorageReturnProtectionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setBlockStorageReturnProtectionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setBlockStorageReturnProtection";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지공유권한설정
	 * @param setMemberServerImageSharingPermissionRequest setMemberServerImageSharingPermissionRequest (required)
	 * @return SetMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetMemberServerImageSharingPermissionResponse> setMemberServerImageSharingPermissionGet(SetMemberServerImageSharingPermissionRequest setMemberServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setMemberServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setMemberServerImageSharingPermissionRequest, true, false);
		return apiClient.call(apiRequest, SetMemberServerImageSharingPermissionResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지공유권한설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setMemberServerImageSharingPermissionRequest setMemberServerImageSharingPermissionRequest (required)
	 * @return byte[]
	 *	SetMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setMemberServerImageSharingPermissionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setMemberServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 회원서버이미지공유권한설정
	 * @param setMemberServerImageSharingPermissionRequest setMemberServerImageSharingPermissionRequest (required)
	 * @return SetMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetMemberServerImageSharingPermissionResponse> setMemberServerImageSharingPermissionPost(SetMemberServerImageSharingPermissionRequest setMemberServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setMemberServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setMemberServerImageSharingPermissionRequest, true, false);
		return apiClient.call(apiRequest, SetMemberServerImageSharingPermissionResponse.class);
	}

	/**
	 * 
	 * 회원서버이미지공유권한설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setMemberServerImageSharingPermissionRequest setMemberServerImageSharingPermissionRequest (required)
	 * @return byte[]
	 *	SetMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setMemberServerImageSharingPermissionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setMemberServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버반납보호설정
	 * @param setProtectServerTerminationRequest setProtectServerTerminationRequest (required)
	 * @return SetProtectServerTerminationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetProtectServerTerminationResponse> setProtectServerTerminationGet(SetProtectServerTerminationRequest setProtectServerTerminationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setProtectServerTermination";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setProtectServerTerminationRequest, true, false);
		return apiClient.call(apiRequest, SetProtectServerTerminationResponse.class);
	}

	/**
	 * 
	 * 서버반납보호설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setProtectServerTerminationRequest setProtectServerTerminationRequest (required)
	 * @return byte[]
	 *	SetProtectServerTerminationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setProtectServerTerminationGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setProtectServerTermination";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버반납보호설정
	 * @param setProtectServerTerminationRequest setProtectServerTerminationRequest (required)
	 * @return SetProtectServerTerminationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetProtectServerTerminationResponse> setProtectServerTerminationPost(SetProtectServerTerminationRequest setProtectServerTerminationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setProtectServerTermination";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setProtectServerTerminationRequest, true, false);
		return apiClient.call(apiRequest, SetProtectServerTerminationResponse.class);
	}

	/**
	 * 
	 * 서버반납보호설정
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setProtectServerTerminationRequest setProtectServerTerminationRequest (required)
	 * @return byte[]
	 *	SetProtectServerTerminationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setProtectServerTerminationPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setProtectServerTermination";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스시작
	 * @param startServerInstancesRequest startServerInstancesRequest (required)
	 * @return StartServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<StartServerInstancesResponse> startServerInstancesGet(StartServerInstancesRequest startServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/startServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, startServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, StartServerInstancesResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스시작
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	startServerInstancesRequest startServerInstancesRequest (required)
	 * @return byte[]
	 *	StartServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> startServerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/startServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스시작
	 * @param startServerInstancesRequest startServerInstancesRequest (required)
	 * @return StartServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<StartServerInstancesResponse> startServerInstancesPost(StartServerInstancesRequest startServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/startServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, startServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, StartServerInstancesResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스시작
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	startServerInstancesRequest startServerInstancesRequest (required)
	 * @return byte[]
	 *	StartServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> startServerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/startServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스정지
	 * @param stopServerInstancesRequest stopServerInstancesRequest (required)
	 * @return StopServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<StopServerInstancesResponse> stopServerInstancesGet(StopServerInstancesRequest stopServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/stopServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, stopServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, StopServerInstancesResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스정지
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	stopServerInstancesRequest stopServerInstancesRequest (required)
	 * @return byte[]
	 *	StopServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> stopServerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/stopServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스정지
	 * @param stopServerInstancesRequest stopServerInstancesRequest (required)
	 * @return StopServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<StopServerInstancesResponse> stopServerInstancesPost(StopServerInstancesRequest stopServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/stopServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, stopServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, StopServerInstancesResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스정지
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	stopServerInstancesRequest stopServerInstancesRequest (required)
	 * @return byte[]
	 *	StopServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> stopServerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/stopServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스반납
	 * @param terminateServerInstancesRequest terminateServerInstancesRequest (required)
	 * @return TerminateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<TerminateServerInstancesResponse> terminateServerInstancesGet(TerminateServerInstancesRequest terminateServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/terminateServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, terminateServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, TerminateServerInstancesResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스반납
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	terminateServerInstancesRequest terminateServerInstancesRequest (required)
	 * @return byte[]
	 *	TerminateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> terminateServerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/terminateServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 서버인스턴스반납
	 * @param terminateServerInstancesRequest terminateServerInstancesRequest (required)
	 * @return TerminateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<TerminateServerInstancesResponse> terminateServerInstancesPost(TerminateServerInstancesRequest terminateServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/terminateServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, terminateServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, TerminateServerInstancesResponse.class);
	}

	/**
	 * 
	 * 서버인스턴스반납
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	terminateServerInstancesRequest terminateServerInstancesRequest (required)
	 * @return byte[]
	 *	TerminateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> terminateServerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/terminateServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 보조IP할당해제
	 * @param unassignSecondaryIpsRequest unassignSecondaryIpsRequest (required)
	 * @return UnassignSecondaryIpsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<UnassignSecondaryIpsResponse> unassignSecondaryIpsGet(UnassignSecondaryIpsRequest unassignSecondaryIpsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/unassignSecondaryIps";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, unassignSecondaryIpsRequest, true, false);
		return apiClient.call(apiRequest, UnassignSecondaryIpsResponse.class);
	}

	/**
	 * 
	 * 보조IP할당해제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	unassignSecondaryIpsRequest unassignSecondaryIpsRequest (required)
	 * @return byte[]
	 *	UnassignSecondaryIpsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> unassignSecondaryIpsGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/unassignSecondaryIps";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 보조IP할당해제
	 * @param unassignSecondaryIpsRequest unassignSecondaryIpsRequest (required)
	 * @return UnassignSecondaryIpsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<UnassignSecondaryIpsResponse> unassignSecondaryIpsPost(UnassignSecondaryIpsRequest unassignSecondaryIpsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/unassignSecondaryIps";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, unassignSecondaryIpsRequest, true, false);
		return apiClient.call(apiRequest, UnassignSecondaryIpsResponse.class);
	}

	/**
	 * 
	 * 보조IP할당해제
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	unassignSecondaryIpsRequest unassignSecondaryIpsRequest (required)
	 * @return byte[]
	 *	UnassignSecondaryIpsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> unassignSecondaryIpsPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/unassignSecondaryIps";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

}
