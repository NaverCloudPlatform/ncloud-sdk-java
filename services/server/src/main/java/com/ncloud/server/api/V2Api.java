/*
 * server
 * <br/>https://ncloud.apigw.ntruss.com/server/v2
 *
 * NBP corp.
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ncloud.server.api;

import java.util.HashMap;
import java.util.Map;

import com.ncloud.ApiClient;
import com.ncloud.ApiRequest;
import com.ncloud.ApiResponse;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.server.model.AddMemberServerImageSharingPermissionRequest;
import com.ncloud.server.model.AddMemberServerImageSharingPermissionResponse;
import com.ncloud.server.model.AddNasVolumeAccessControlRequest;
import com.ncloud.server.model.AddNasVolumeAccessControlResponse;
import com.ncloud.server.model.AddPortForwardingRulesRequest;
import com.ncloud.server.model.AddPortForwardingRulesResponse;
import com.ncloud.server.model.AssociatePublicIpWithServerInstanceRequest;
import com.ncloud.server.model.AssociatePublicIpWithServerInstanceResponse;
import com.ncloud.server.model.AttachBlockStorageInstanceRequest;
import com.ncloud.server.model.AttachBlockStorageInstanceResponse;
import com.ncloud.server.model.AttachNetworkInterfaceRequest;
import com.ncloud.server.model.AttachNetworkInterfaceResponse;
import com.ncloud.server.model.ChangeBlockStorageVolumeSizeRequest;
import com.ncloud.server.model.ChangeBlockStorageVolumeSizeResponse;
import com.ncloud.server.model.ChangeNasVolumeSizeRequest;
import com.ncloud.server.model.ChangeNasVolumeSizeResponse;
import com.ncloud.server.model.ChangeNasVolumeSnapshotConfigurationRequest;
import com.ncloud.server.model.ChangeNasVolumeSnapshotConfigurationResponse;
import com.ncloud.server.model.ChangeServerInstanceSpecRequest;
import com.ncloud.server.model.ChangeServerInstanceSpecResponse;
import com.ncloud.server.model.CreateBlockStorageInstanceRequest;
import com.ncloud.server.model.CreateBlockStorageInstanceResponse;
import com.ncloud.server.model.CreateBlockStorageSnapshotInstanceRequest;
import com.ncloud.server.model.CreateBlockStorageSnapshotInstanceResponse;
import com.ncloud.server.model.CreateInstanceTagsRequest;
import com.ncloud.server.model.CreateInstanceTagsResponse;
import com.ncloud.server.model.CreateLoginKeyRequest;
import com.ncloud.server.model.CreateLoginKeyResponse;
import com.ncloud.server.model.CreateMemberServerImageRequest;
import com.ncloud.server.model.CreateMemberServerImageResponse;
import com.ncloud.server.model.CreateNasVolumeInstanceRequest;
import com.ncloud.server.model.CreateNasVolumeInstanceResponse;
import com.ncloud.server.model.CreateNasVolumeSnapshotRequest;
import com.ncloud.server.model.CreateNasVolumeSnapshotResponse;
import com.ncloud.server.model.CreateNetworkInterfaceRequest;
import com.ncloud.server.model.CreateNetworkInterfaceResponse;
import com.ncloud.server.model.CreatePublicIpInstanceRequest;
import com.ncloud.server.model.CreatePublicIpInstanceResponse;
import com.ncloud.server.model.CreateServerInstancesRequest;
import com.ncloud.server.model.CreateServerInstancesResponse;
import com.ncloud.server.model.DeleteBlockStorageInstancesRequest;
import com.ncloud.server.model.DeleteBlockStorageInstancesResponse;
import com.ncloud.server.model.DeleteBlockStorageSnapshotInstancesRequest;
import com.ncloud.server.model.DeleteBlockStorageSnapshotInstancesResponse;
import com.ncloud.server.model.DeleteInstanceTagsRequest;
import com.ncloud.server.model.DeleteInstanceTagsResponse;
import com.ncloud.server.model.DeleteLoginKeyRequest;
import com.ncloud.server.model.DeleteLoginKeyResponse;
import com.ncloud.server.model.DeleteMemberServerImagesRequest;
import com.ncloud.server.model.DeleteMemberServerImagesResponse;
import com.ncloud.server.model.DeleteNasVolumeInstanceRequest;
import com.ncloud.server.model.DeleteNasVolumeInstanceResponse;
import com.ncloud.server.model.DeleteNasVolumeSnapshotRequest;
import com.ncloud.server.model.DeleteNasVolumeSnapshotResponse;
import com.ncloud.server.model.DeleteNetworkInterfaceRequest;
import com.ncloud.server.model.DeleteNetworkInterfaceResponse;
import com.ncloud.server.model.DeletePortForwardingRulesRequest;
import com.ncloud.server.model.DeletePortForwardingRulesResponse;
import com.ncloud.server.model.DeletePublicIpInstancesRequest;
import com.ncloud.server.model.DeletePublicIpInstancesResponse;
import com.ncloud.server.model.DetachBlockStorageInstancesRequest;
import com.ncloud.server.model.DetachBlockStorageInstancesResponse;
import com.ncloud.server.model.DetachNetworkInterfaceRequest;
import com.ncloud.server.model.DetachNetworkInterfaceResponse;
import com.ncloud.server.model.DisassociatePublicIpFromServerInstanceRequest;
import com.ncloud.server.model.DisassociatePublicIpFromServerInstanceResponse;
import com.ncloud.server.model.GetAccessControlGroupListRequest;
import com.ncloud.server.model.GetAccessControlGroupListResponse;
import com.ncloud.server.model.GetAccessControlGroupServerInstanceListRequest;
import com.ncloud.server.model.GetAccessControlGroupServerInstanceListResponse;
import com.ncloud.server.model.GetAccessControlRuleListRequest;
import com.ncloud.server.model.GetAccessControlRuleListResponse;
import com.ncloud.server.model.GetBlockStorageInstanceListRequest;
import com.ncloud.server.model.GetBlockStorageInstanceListResponse;
import com.ncloud.server.model.GetBlockStorageSnapshotInstanceListRequest;
import com.ncloud.server.model.GetBlockStorageSnapshotInstanceListResponse;
import com.ncloud.server.model.GetInitScriptListRequest;
import com.ncloud.server.model.GetInitScriptListResponse;
import com.ncloud.server.model.GetInstanceTagListRequest;
import com.ncloud.server.model.GetInstanceTagListResponse;
import com.ncloud.server.model.GetLoginKeyListRequest;
import com.ncloud.server.model.GetLoginKeyListResponse;
import com.ncloud.server.model.GetMemberServerImageListRequest;
import com.ncloud.server.model.GetMemberServerImageListResponse;
import com.ncloud.server.model.GetNasVolumeAccessControlRuleListRequest;
import com.ncloud.server.model.GetNasVolumeAccessControlRuleListResponse;
import com.ncloud.server.model.GetNasVolumeInstanceListRequest;
import com.ncloud.server.model.GetNasVolumeInstanceListResponse;
import com.ncloud.server.model.GetNasVolumeInstanceRatingListRequest;
import com.ncloud.server.model.GetNasVolumeInstanceRatingListResponse;
import com.ncloud.server.model.GetNasVolumeSnapshotConfigurationHistoryListRequest;
import com.ncloud.server.model.GetNasVolumeSnapshotConfigurationHistoryListResponse;
import com.ncloud.server.model.GetNasVolumeSnapshotListRequest;
import com.ncloud.server.model.GetNasVolumeSnapshotListResponse;
import com.ncloud.server.model.GetNetworkInterfaceListRequest;
import com.ncloud.server.model.GetNetworkInterfaceListResponse;
import com.ncloud.server.model.GetPortForwardingConfigurationListRequest;
import com.ncloud.server.model.GetPortForwardingConfigurationListResponse;
import com.ncloud.server.model.GetPortForwardingRuleListRequest;
import com.ncloud.server.model.GetPortForwardingRuleListResponse;
import com.ncloud.server.model.GetPrivateSubnetInstanceListRequest;
import com.ncloud.server.model.GetPrivateSubnetInstanceListResponse;
import com.ncloud.server.model.GetPublicIpInstanceListRequest;
import com.ncloud.server.model.GetPublicIpInstanceListResponse;
import com.ncloud.server.model.GetPublicIpTargetServerInstanceListRequest;
import com.ncloud.server.model.GetPublicIpTargetServerInstanceListResponse;
import com.ncloud.server.model.GetRaidListRequest;
import com.ncloud.server.model.GetRaidListResponse;
import com.ncloud.server.model.GetRegionListRequest;
import com.ncloud.server.model.GetRegionListResponse;
import com.ncloud.server.model.GetRootPasswordRequest;
import com.ncloud.server.model.GetRootPasswordResponse;
import com.ncloud.server.model.GetRootPasswordServerInstanceListRequest;
import com.ncloud.server.model.GetRootPasswordServerInstanceListResponse;
import com.ncloud.server.model.GetServerImageProductListRequest;
import com.ncloud.server.model.GetServerImageProductListResponse;
import com.ncloud.server.model.GetServerInstanceListRequest;
import com.ncloud.server.model.GetServerInstanceListResponse;
import com.ncloud.server.model.GetServerProductListRequest;
import com.ncloud.server.model.GetServerProductListResponse;
import com.ncloud.server.model.GetZoneListRequest;
import com.ncloud.server.model.GetZoneListResponse;
import com.ncloud.server.model.ImportLoginKeyRequest;
import com.ncloud.server.model.ImportLoginKeyResponse;
import com.ncloud.server.model.InterruptServerInstanceRequest;
import com.ncloud.server.model.InterruptServerInstanceResponse;
import com.ncloud.server.model.RebootServerInstancesRequest;
import com.ncloud.server.model.RebootServerInstancesResponse;
import com.ncloud.server.model.RecreateServerInstanceRequest;
import com.ncloud.server.model.RecreateServerInstanceResponse;
import com.ncloud.server.model.RemoveMemberServerImageSharingPermissionRequest;
import com.ncloud.server.model.RemoveMemberServerImageSharingPermissionResponse;
import com.ncloud.server.model.RemoveNasVolumeAccessControlRequest;
import com.ncloud.server.model.RemoveNasVolumeAccessControlResponse;
import com.ncloud.server.model.ReplaceServerInstanceAssociatedWithPublicIpRequest;
import com.ncloud.server.model.ReplaceServerInstanceAssociatedWithPublicIpResponse;
import com.ncloud.server.model.RestoreNasVolumeWithSnapshotRequest;
import com.ncloud.server.model.RestoreNasVolumeWithSnapshotResponse;
import com.ncloud.server.model.SetMemberServerImageSharingPermissionRequest;
import com.ncloud.server.model.SetMemberServerImageSharingPermissionResponse;
import com.ncloud.server.model.SetNasVolumeAccessControlRequest;
import com.ncloud.server.model.SetNasVolumeAccessControlResponse;
import com.ncloud.server.model.SetNasVolumeReturnProtectionRequest;
import com.ncloud.server.model.SetNasVolumeReturnProtectionResponse;
import com.ncloud.server.model.SetProtectServerTerminationRequest;
import com.ncloud.server.model.SetProtectServerTerminationResponse;
import com.ncloud.server.model.StartServerInstancesRequest;
import com.ncloud.server.model.StartServerInstancesResponse;
import com.ncloud.server.model.StopServerInstancesRequest;
import com.ncloud.server.model.StopServerInstancesResponse;
import com.ncloud.server.model.TerminateServerInstancesRequest;
import com.ncloud.server.model.TerminateServerInstancesResponse;

public class V2Api {

	private final String basePath = "/server/v2";

	private final ApiClient apiClient;

	public V2Api(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	/**
	 * 
	 * 
	 * @param addMemberServerImageSharingPermissionRequest addMemberServerImageSharingPermissionRequest (required)
	 * @return AddMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddMemberServerImageSharingPermissionResponse> addMemberServerImageSharingPermissionGet(AddMemberServerImageSharingPermissionRequest addMemberServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addMemberServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addMemberServerImageSharingPermissionRequest, true, false);
		return apiClient.call(apiRequest, AddMemberServerImageSharingPermissionResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addMemberServerImageSharingPermissionRequest addMemberServerImageSharingPermissionRequest (required)
	 * @return byte[]
	 *	AddMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addMemberServerImageSharingPermissionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addMemberServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param addMemberServerImageSharingPermissionRequest addMemberServerImageSharingPermissionRequest (required)
	 * @return AddMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddMemberServerImageSharingPermissionResponse> addMemberServerImageSharingPermissionPost(AddMemberServerImageSharingPermissionRequest addMemberServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addMemberServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addMemberServerImageSharingPermissionRequest, true, false);
		return apiClient.call(apiRequest, AddMemberServerImageSharingPermissionResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addMemberServerImageSharingPermissionRequest addMemberServerImageSharingPermissionRequest (required)
	 * @return byte[]
	 *	AddMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addMemberServerImageSharingPermissionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addMemberServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param addNasVolumeAccessControlRequest addNasVolumeAccessControlRequest (required)
	 * @return AddNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddNasVolumeAccessControlResponse> addNasVolumeAccessControlGet(AddNasVolumeAccessControlRequest addNasVolumeAccessControlRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addNasVolumeAccessControl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addNasVolumeAccessControlRequest, true, false);
		return apiClient.call(apiRequest, AddNasVolumeAccessControlResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addNasVolumeAccessControlRequest addNasVolumeAccessControlRequest (required)
	 * @return byte[]
	 *	AddNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addNasVolumeAccessControlGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addNasVolumeAccessControl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param addNasVolumeAccessControlRequest addNasVolumeAccessControlRequest (required)
	 * @return AddNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddNasVolumeAccessControlResponse> addNasVolumeAccessControlPost(AddNasVolumeAccessControlRequest addNasVolumeAccessControlRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addNasVolumeAccessControl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addNasVolumeAccessControlRequest, true, false);
		return apiClient.call(apiRequest, AddNasVolumeAccessControlResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addNasVolumeAccessControlRequest addNasVolumeAccessControlRequest (required)
	 * @return byte[]
	 *	AddNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addNasVolumeAccessControlPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addNasVolumeAccessControl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param addPortForwardingRulesRequest addPortForwardingRulesRequest (required)
	 * @return AddPortForwardingRulesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddPortForwardingRulesResponse> addPortForwardingRulesGet(AddPortForwardingRulesRequest addPortForwardingRulesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addPortForwardingRules";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, addPortForwardingRulesRequest, true, false);
		return apiClient.call(apiRequest, AddPortForwardingRulesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addPortForwardingRulesRequest addPortForwardingRulesRequest (required)
	 * @return byte[]
	 *	AddPortForwardingRulesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addPortForwardingRulesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addPortForwardingRules";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param addPortForwardingRulesRequest addPortForwardingRulesRequest (required)
	 * @return AddPortForwardingRulesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddPortForwardingRulesResponse> addPortForwardingRulesPost(AddPortForwardingRulesRequest addPortForwardingRulesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/addPortForwardingRules";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, addPortForwardingRulesRequest, true, false);
		return apiClient.call(apiRequest, AddPortForwardingRulesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	addPortForwardingRulesRequest addPortForwardingRulesRequest (required)
	 * @return byte[]
	 *	AddPortForwardingRulesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addPortForwardingRulesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/addPortForwardingRules";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param associatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest (required)
	 * @return AssociatePublicIpWithServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AssociatePublicIpWithServerInstanceResponse> associatePublicIpWithServerInstanceGet(AssociatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/associatePublicIpWithServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, associatePublicIpWithServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, AssociatePublicIpWithServerInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	associatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest (required)
	 * @return byte[]
	 *	AssociatePublicIpWithServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> associatePublicIpWithServerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/associatePublicIpWithServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param associatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest (required)
	 * @return AssociatePublicIpWithServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AssociatePublicIpWithServerInstanceResponse> associatePublicIpWithServerInstancePost(AssociatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/associatePublicIpWithServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, associatePublicIpWithServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, AssociatePublicIpWithServerInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	associatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest (required)
	 * @return byte[]
	 *	AssociatePublicIpWithServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> associatePublicIpWithServerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/associatePublicIpWithServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param attachBlockStorageInstanceRequest attachBlockStorageInstanceRequest (required)
	 * @return AttachBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AttachBlockStorageInstanceResponse> attachBlockStorageInstanceGet(AttachBlockStorageInstanceRequest attachBlockStorageInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/attachBlockStorageInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, attachBlockStorageInstanceRequest, true, false);
		return apiClient.call(apiRequest, AttachBlockStorageInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	attachBlockStorageInstanceRequest attachBlockStorageInstanceRequest (required)
	 * @return byte[]
	 *	AttachBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> attachBlockStorageInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/attachBlockStorageInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param attachBlockStorageInstanceRequest attachBlockStorageInstanceRequest (required)
	 * @return AttachBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AttachBlockStorageInstanceResponse> attachBlockStorageInstancePost(AttachBlockStorageInstanceRequest attachBlockStorageInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/attachBlockStorageInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, attachBlockStorageInstanceRequest, true, false);
		return apiClient.call(apiRequest, AttachBlockStorageInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	attachBlockStorageInstanceRequest attachBlockStorageInstanceRequest (required)
	 * @return byte[]
	 *	AttachBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> attachBlockStorageInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/attachBlockStorageInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param attachNetworkInterfaceRequest attachNetworkInterfaceRequest (required)
	 * @return AttachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AttachNetworkInterfaceResponse> attachNetworkInterfaceGet(AttachNetworkInterfaceRequest attachNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/attachNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, attachNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, AttachNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	attachNetworkInterfaceRequest attachNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	AttachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> attachNetworkInterfaceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/attachNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param attachNetworkInterfaceRequest attachNetworkInterfaceRequest (required)
	 * @return AttachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AttachNetworkInterfaceResponse> attachNetworkInterfacePost(AttachNetworkInterfaceRequest attachNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/attachNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, attachNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, AttachNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	attachNetworkInterfaceRequest attachNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	AttachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> attachNetworkInterfacePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/attachNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param changeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest (required)
	 * @return ChangeBlockStorageVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeBlockStorageVolumeSizeResponse> changeBlockStorageVolumeSizeGet(ChangeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeBlockStorageVolumeSize";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, changeBlockStorageVolumeSizeRequest, true, false);
		return apiClient.call(apiRequest, ChangeBlockStorageVolumeSizeResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest (required)
	 * @return byte[]
	 *	ChangeBlockStorageVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeBlockStorageVolumeSizeGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeBlockStorageVolumeSize";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param changeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest (required)
	 * @return ChangeBlockStorageVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeBlockStorageVolumeSizeResponse> changeBlockStorageVolumeSizePost(ChangeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeBlockStorageVolumeSize";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, changeBlockStorageVolumeSizeRequest, true, false);
		return apiClient.call(apiRequest, ChangeBlockStorageVolumeSizeResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest (required)
	 * @return byte[]
	 *	ChangeBlockStorageVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeBlockStorageVolumeSizePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeBlockStorageVolumeSize";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param changeNasVolumeSizeRequest changeNasVolumeSizeRequest (required)
	 * @return ChangeNasVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeNasVolumeSizeResponse> changeNasVolumeSizeGet(ChangeNasVolumeSizeRequest changeNasVolumeSizeRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeNasVolumeSize";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, changeNasVolumeSizeRequest, true, false);
		return apiClient.call(apiRequest, ChangeNasVolumeSizeResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeNasVolumeSizeRequest changeNasVolumeSizeRequest (required)
	 * @return byte[]
	 *	ChangeNasVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeNasVolumeSizeGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeNasVolumeSize";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param changeNasVolumeSizeRequest changeNasVolumeSizeRequest (required)
	 * @return ChangeNasVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeNasVolumeSizeResponse> changeNasVolumeSizePost(ChangeNasVolumeSizeRequest changeNasVolumeSizeRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeNasVolumeSize";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, changeNasVolumeSizeRequest, true, false);
		return apiClient.call(apiRequest, ChangeNasVolumeSizeResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeNasVolumeSizeRequest changeNasVolumeSizeRequest (required)
	 * @return byte[]
	 *	ChangeNasVolumeSizeResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeNasVolumeSizePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeNasVolumeSize";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param changeNasVolumeSnapshotConfigurationRequest changeNasVolumeSnapshotConfigurationRequest (required)
	 * @return ChangeNasVolumeSnapshotConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeNasVolumeSnapshotConfigurationResponse> changeNasVolumeSnapshotConfigurationGet(ChangeNasVolumeSnapshotConfigurationRequest changeNasVolumeSnapshotConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeNasVolumeSnapshotConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, changeNasVolumeSnapshotConfigurationRequest, true, false);
		return apiClient.call(apiRequest, ChangeNasVolumeSnapshotConfigurationResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeNasVolumeSnapshotConfigurationRequest changeNasVolumeSnapshotConfigurationRequest (required)
	 * @return byte[]
	 *	ChangeNasVolumeSnapshotConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeNasVolumeSnapshotConfigurationGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeNasVolumeSnapshotConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param changeNasVolumeSnapshotConfigurationRequest changeNasVolumeSnapshotConfigurationRequest (required)
	 * @return ChangeNasVolumeSnapshotConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeNasVolumeSnapshotConfigurationResponse> changeNasVolumeSnapshotConfigurationPost(ChangeNasVolumeSnapshotConfigurationRequest changeNasVolumeSnapshotConfigurationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeNasVolumeSnapshotConfiguration";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, changeNasVolumeSnapshotConfigurationRequest, true, false);
		return apiClient.call(apiRequest, ChangeNasVolumeSnapshotConfigurationResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeNasVolumeSnapshotConfigurationRequest changeNasVolumeSnapshotConfigurationRequest (required)
	 * @return byte[]
	 *	ChangeNasVolumeSnapshotConfigurationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeNasVolumeSnapshotConfigurationPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeNasVolumeSnapshotConfiguration";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param changeServerInstanceSpecRequest changeServerInstanceSpecRequest (required)
	 * @return ChangeServerInstanceSpecResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeServerInstanceSpecResponse> changeServerInstanceSpecGet(ChangeServerInstanceSpecRequest changeServerInstanceSpecRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeServerInstanceSpec";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, changeServerInstanceSpecRequest, true, false);
		return apiClient.call(apiRequest, ChangeServerInstanceSpecResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeServerInstanceSpecRequest changeServerInstanceSpecRequest (required)
	 * @return byte[]
	 *	ChangeServerInstanceSpecResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeServerInstanceSpecGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeServerInstanceSpec";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param changeServerInstanceSpecRequest changeServerInstanceSpecRequest (required)
	 * @return ChangeServerInstanceSpecResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ChangeServerInstanceSpecResponse> changeServerInstanceSpecPost(ChangeServerInstanceSpecRequest changeServerInstanceSpecRequest) throws ApiException, SdkException {
		
		// path
		String path = "/changeServerInstanceSpec";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, changeServerInstanceSpecRequest, true, false);
		return apiClient.call(apiRequest, ChangeServerInstanceSpecResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	changeServerInstanceSpecRequest changeServerInstanceSpecRequest (required)
	 * @return byte[]
	 *	ChangeServerInstanceSpecResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> changeServerInstanceSpecPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/changeServerInstanceSpec";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createBlockStorageInstanceRequest createBlockStorageInstanceRequest (required)
	 * @return CreateBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateBlockStorageInstanceResponse> createBlockStorageInstanceGet(CreateBlockStorageInstanceRequest createBlockStorageInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createBlockStorageInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createBlockStorageInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateBlockStorageInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createBlockStorageInstanceRequest createBlockStorageInstanceRequest (required)
	 * @return byte[]
	 *	CreateBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createBlockStorageInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createBlockStorageInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createBlockStorageInstanceRequest createBlockStorageInstanceRequest (required)
	 * @return CreateBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateBlockStorageInstanceResponse> createBlockStorageInstancePost(CreateBlockStorageInstanceRequest createBlockStorageInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createBlockStorageInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createBlockStorageInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateBlockStorageInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createBlockStorageInstanceRequest createBlockStorageInstanceRequest (required)
	 * @return byte[]
	 *	CreateBlockStorageInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createBlockStorageInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createBlockStorageInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest (required)
	 * @return CreateBlockStorageSnapshotInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateBlockStorageSnapshotInstanceResponse> createBlockStorageSnapshotInstanceGet(CreateBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createBlockStorageSnapshotInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createBlockStorageSnapshotInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateBlockStorageSnapshotInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest (required)
	 * @return byte[]
	 *	CreateBlockStorageSnapshotInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createBlockStorageSnapshotInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createBlockStorageSnapshotInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest (required)
	 * @return CreateBlockStorageSnapshotInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateBlockStorageSnapshotInstanceResponse> createBlockStorageSnapshotInstancePost(CreateBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createBlockStorageSnapshotInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createBlockStorageSnapshotInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateBlockStorageSnapshotInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest (required)
	 * @return byte[]
	 *	CreateBlockStorageSnapshotInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createBlockStorageSnapshotInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createBlockStorageSnapshotInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createInstanceTagsRequest createInstanceTagsRequest (required)
	 * @return CreateInstanceTagsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateInstanceTagsResponse> createInstanceTagsGet(CreateInstanceTagsRequest createInstanceTagsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createInstanceTags";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createInstanceTagsRequest, true, false);
		return apiClient.call(apiRequest, CreateInstanceTagsResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createInstanceTagsRequest createInstanceTagsRequest (required)
	 * @return byte[]
	 *	CreateInstanceTagsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createInstanceTagsGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createInstanceTags";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createInstanceTagsRequest createInstanceTagsRequest (required)
	 * @return CreateInstanceTagsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateInstanceTagsResponse> createInstanceTagsPost(CreateInstanceTagsRequest createInstanceTagsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createInstanceTags";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createInstanceTagsRequest, true, false);
		return apiClient.call(apiRequest, CreateInstanceTagsResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createInstanceTagsRequest createInstanceTagsRequest (required)
	 * @return byte[]
	 *	CreateInstanceTagsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createInstanceTagsPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createInstanceTags";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createLoginKeyRequest createLoginKeyRequest (required)
	 * @return CreateLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateLoginKeyResponse> createLoginKeyGet(CreateLoginKeyRequest createLoginKeyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createLoginKey";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createLoginKeyRequest, true, false);
		return apiClient.call(apiRequest, CreateLoginKeyResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createLoginKeyRequest createLoginKeyRequest (required)
	 * @return byte[]
	 *	CreateLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createLoginKeyGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createLoginKey";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createLoginKeyRequest createLoginKeyRequest (required)
	 * @return CreateLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateLoginKeyResponse> createLoginKeyPost(CreateLoginKeyRequest createLoginKeyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createLoginKey";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createLoginKeyRequest, true, false);
		return apiClient.call(apiRequest, CreateLoginKeyResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createLoginKeyRequest createLoginKeyRequest (required)
	 * @return byte[]
	 *	CreateLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createLoginKeyPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createLoginKey";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createMemberServerImageRequest createMemberServerImageRequest (required)
	 * @return CreateMemberServerImageResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateMemberServerImageResponse> createMemberServerImageGet(CreateMemberServerImageRequest createMemberServerImageRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createMemberServerImage";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createMemberServerImageRequest, true, false);
		return apiClient.call(apiRequest, CreateMemberServerImageResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createMemberServerImageRequest createMemberServerImageRequest (required)
	 * @return byte[]
	 *	CreateMemberServerImageResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createMemberServerImageGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createMemberServerImage";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createMemberServerImageRequest createMemberServerImageRequest (required)
	 * @return CreateMemberServerImageResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateMemberServerImageResponse> createMemberServerImagePost(CreateMemberServerImageRequest createMemberServerImageRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createMemberServerImage";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createMemberServerImageRequest, true, false);
		return apiClient.call(apiRequest, CreateMemberServerImageResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createMemberServerImageRequest createMemberServerImageRequest (required)
	 * @return byte[]
	 *	CreateMemberServerImageResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createMemberServerImagePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createMemberServerImage";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createNasVolumeInstanceRequest createNasVolumeInstanceRequest (required)
	 * @return CreateNasVolumeInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNasVolumeInstanceResponse> createNasVolumeInstanceGet(CreateNasVolumeInstanceRequest createNasVolumeInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNasVolumeInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createNasVolumeInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateNasVolumeInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNasVolumeInstanceRequest createNasVolumeInstanceRequest (required)
	 * @return byte[]
	 *	CreateNasVolumeInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNasVolumeInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNasVolumeInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createNasVolumeInstanceRequest createNasVolumeInstanceRequest (required)
	 * @return CreateNasVolumeInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNasVolumeInstanceResponse> createNasVolumeInstancePost(CreateNasVolumeInstanceRequest createNasVolumeInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNasVolumeInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createNasVolumeInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreateNasVolumeInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNasVolumeInstanceRequest createNasVolumeInstanceRequest (required)
	 * @return byte[]
	 *	CreateNasVolumeInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNasVolumeInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNasVolumeInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createNasVolumeSnapshotRequest createNasVolumeSnapshotRequest (required)
	 * @return CreateNasVolumeSnapshotResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNasVolumeSnapshotResponse> createNasVolumeSnapshotGet(CreateNasVolumeSnapshotRequest createNasVolumeSnapshotRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNasVolumeSnapshot";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createNasVolumeSnapshotRequest, true, false);
		return apiClient.call(apiRequest, CreateNasVolumeSnapshotResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNasVolumeSnapshotRequest createNasVolumeSnapshotRequest (required)
	 * @return byte[]
	 *	CreateNasVolumeSnapshotResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNasVolumeSnapshotGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNasVolumeSnapshot";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createNasVolumeSnapshotRequest createNasVolumeSnapshotRequest (required)
	 * @return CreateNasVolumeSnapshotResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNasVolumeSnapshotResponse> createNasVolumeSnapshotPost(CreateNasVolumeSnapshotRequest createNasVolumeSnapshotRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNasVolumeSnapshot";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createNasVolumeSnapshotRequest, true, false);
		return apiClient.call(apiRequest, CreateNasVolumeSnapshotResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNasVolumeSnapshotRequest createNasVolumeSnapshotRequest (required)
	 * @return byte[]
	 *	CreateNasVolumeSnapshotResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNasVolumeSnapshotPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNasVolumeSnapshot";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createNetworkInterfaceRequest createNetworkInterfaceRequest (required)
	 * @return CreateNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNetworkInterfaceResponse> createNetworkInterfaceGet(CreateNetworkInterfaceRequest createNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createNetworkInterfaceRequest, false, false);
		return apiClient.call(apiRequest, CreateNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNetworkInterfaceRequest createNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	CreateNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNetworkInterfaceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createNetworkInterfaceRequest createNetworkInterfaceRequest (required)
	 * @return CreateNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateNetworkInterfaceResponse> createNetworkInterfacePost(CreateNetworkInterfaceRequest createNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, CreateNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createNetworkInterfaceRequest createNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	CreateNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createNetworkInterfacePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createPublicIpInstanceRequest createPublicIpInstanceRequest (required)
	 * @return CreatePublicIpInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreatePublicIpInstanceResponse> createPublicIpInstanceGet(CreatePublicIpInstanceRequest createPublicIpInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createPublicIpInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createPublicIpInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreatePublicIpInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createPublicIpInstanceRequest createPublicIpInstanceRequest (required)
	 * @return byte[]
	 *	CreatePublicIpInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createPublicIpInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createPublicIpInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createPublicIpInstanceRequest createPublicIpInstanceRequest (required)
	 * @return CreatePublicIpInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreatePublicIpInstanceResponse> createPublicIpInstancePost(CreatePublicIpInstanceRequest createPublicIpInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createPublicIpInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createPublicIpInstanceRequest, true, false);
		return apiClient.call(apiRequest, CreatePublicIpInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createPublicIpInstanceRequest createPublicIpInstanceRequest (required)
	 * @return byte[]
	 *	CreatePublicIpInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createPublicIpInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createPublicIpInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createServerInstancesRequest createServerInstancesRequest (required)
	 * @return CreateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateServerInstancesResponse> createServerInstancesGet(CreateServerInstancesRequest createServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, createServerInstancesRequest, false, false);
		return apiClient.call(apiRequest, CreateServerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createServerInstancesRequest createServerInstancesRequest (required)
	 * @return byte[]
	 *	CreateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createServerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param createServerInstancesRequest createServerInstancesRequest (required)
	 * @return CreateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<CreateServerInstancesResponse> createServerInstancesPost(CreateServerInstancesRequest createServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/createServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, createServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, CreateServerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	createServerInstancesRequest createServerInstancesRequest (required)
	 * @return byte[]
	 *	CreateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> createServerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/createServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest (required)
	 * @return DeleteBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteBlockStorageInstancesResponse> deleteBlockStorageInstancesGet(DeleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteBlockStorageInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteBlockStorageInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteBlockStorageInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest (required)
	 * @return byte[]
	 *	DeleteBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteBlockStorageInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteBlockStorageInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest (required)
	 * @return DeleteBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteBlockStorageInstancesResponse> deleteBlockStorageInstancesPost(DeleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteBlockStorageInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteBlockStorageInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteBlockStorageInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest (required)
	 * @return byte[]
	 *	DeleteBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteBlockStorageInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteBlockStorageInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest (required)
	 * @return DeleteBlockStorageSnapshotInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteBlockStorageSnapshotInstancesResponse> deleteBlockStorageSnapshotInstancesGet(DeleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteBlockStorageSnapshotInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteBlockStorageSnapshotInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteBlockStorageSnapshotInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest (required)
	 * @return byte[]
	 *	DeleteBlockStorageSnapshotInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteBlockStorageSnapshotInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteBlockStorageSnapshotInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest (required)
	 * @return DeleteBlockStorageSnapshotInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteBlockStorageSnapshotInstancesResponse> deleteBlockStorageSnapshotInstancesPost(DeleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteBlockStorageSnapshotInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteBlockStorageSnapshotInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeleteBlockStorageSnapshotInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest (required)
	 * @return byte[]
	 *	DeleteBlockStorageSnapshotInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteBlockStorageSnapshotInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteBlockStorageSnapshotInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteInstanceTagsRequest deleteInstanceTagsRequest (required)
	 * @return DeleteInstanceTagsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteInstanceTagsResponse> deleteInstanceTagsGet(DeleteInstanceTagsRequest deleteInstanceTagsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteInstanceTags";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteInstanceTagsRequest, true, false);
		return apiClient.call(apiRequest, DeleteInstanceTagsResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteInstanceTagsRequest deleteInstanceTagsRequest (required)
	 * @return byte[]
	 *	DeleteInstanceTagsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteInstanceTagsGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteInstanceTags";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteInstanceTagsRequest deleteInstanceTagsRequest (required)
	 * @return DeleteInstanceTagsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteInstanceTagsResponse> deleteInstanceTagsPost(DeleteInstanceTagsRequest deleteInstanceTagsRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteInstanceTags";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteInstanceTagsRequest, true, false);
		return apiClient.call(apiRequest, DeleteInstanceTagsResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteInstanceTagsRequest deleteInstanceTagsRequest (required)
	 * @return byte[]
	 *	DeleteInstanceTagsResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteInstanceTagsPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteInstanceTags";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteLoginKeyRequest deleteLoginKeyRequest (required)
	 * @return DeleteLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLoginKeyResponse> deleteLoginKeyGet(DeleteLoginKeyRequest deleteLoginKeyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLoginKey";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteLoginKeyRequest, true, false);
		return apiClient.call(apiRequest, DeleteLoginKeyResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLoginKeyRequest deleteLoginKeyRequest (required)
	 * @return byte[]
	 *	DeleteLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLoginKeyGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLoginKey";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteLoginKeyRequest deleteLoginKeyRequest (required)
	 * @return DeleteLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteLoginKeyResponse> deleteLoginKeyPost(DeleteLoginKeyRequest deleteLoginKeyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteLoginKey";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteLoginKeyRequest, true, false);
		return apiClient.call(apiRequest, DeleteLoginKeyResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteLoginKeyRequest deleteLoginKeyRequest (required)
	 * @return byte[]
	 *	DeleteLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteLoginKeyPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteLoginKey";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteMemberServerImagesRequest deleteMemberServerImagesRequest (required)
	 * @return DeleteMemberServerImagesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteMemberServerImagesResponse> deleteMemberServerImagesGet(DeleteMemberServerImagesRequest deleteMemberServerImagesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteMemberServerImages";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteMemberServerImagesRequest, true, false);
		return apiClient.call(apiRequest, DeleteMemberServerImagesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteMemberServerImagesRequest deleteMemberServerImagesRequest (required)
	 * @return byte[]
	 *	DeleteMemberServerImagesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteMemberServerImagesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteMemberServerImages";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteMemberServerImagesRequest deleteMemberServerImagesRequest (required)
	 * @return DeleteMemberServerImagesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteMemberServerImagesResponse> deleteMemberServerImagesPost(DeleteMemberServerImagesRequest deleteMemberServerImagesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteMemberServerImages";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteMemberServerImagesRequest, true, false);
		return apiClient.call(apiRequest, DeleteMemberServerImagesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteMemberServerImagesRequest deleteMemberServerImagesRequest (required)
	 * @return byte[]
	 *	DeleteMemberServerImagesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteMemberServerImagesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteMemberServerImages";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteNasVolumeInstanceRequest deleteNasVolumeInstanceRequest (required)
	 * @return DeleteNasVolumeInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNasVolumeInstanceResponse> deleteNasVolumeInstanceGet(DeleteNasVolumeInstanceRequest deleteNasVolumeInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNasVolumeInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteNasVolumeInstanceRequest, true, false);
		return apiClient.call(apiRequest, DeleteNasVolumeInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNasVolumeInstanceRequest deleteNasVolumeInstanceRequest (required)
	 * @return byte[]
	 *	DeleteNasVolumeInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNasVolumeInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNasVolumeInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteNasVolumeInstanceRequest deleteNasVolumeInstanceRequest (required)
	 * @return DeleteNasVolumeInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNasVolumeInstanceResponse> deleteNasVolumeInstancePost(DeleteNasVolumeInstanceRequest deleteNasVolumeInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNasVolumeInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteNasVolumeInstanceRequest, true, false);
		return apiClient.call(apiRequest, DeleteNasVolumeInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNasVolumeInstanceRequest deleteNasVolumeInstanceRequest (required)
	 * @return byte[]
	 *	DeleteNasVolumeInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNasVolumeInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNasVolumeInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteNasVolumeSnapshotRequest deleteNasVolumeSnapshotRequest (required)
	 * @return DeleteNasVolumeSnapshotResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNasVolumeSnapshotResponse> deleteNasVolumeSnapshotGet(DeleteNasVolumeSnapshotRequest deleteNasVolumeSnapshotRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNasVolumeSnapshot";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteNasVolumeSnapshotRequest, true, false);
		return apiClient.call(apiRequest, DeleteNasVolumeSnapshotResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNasVolumeSnapshotRequest deleteNasVolumeSnapshotRequest (required)
	 * @return byte[]
	 *	DeleteNasVolumeSnapshotResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNasVolumeSnapshotGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNasVolumeSnapshot";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteNasVolumeSnapshotRequest deleteNasVolumeSnapshotRequest (required)
	 * @return DeleteNasVolumeSnapshotResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNasVolumeSnapshotResponse> deleteNasVolumeSnapshotPost(DeleteNasVolumeSnapshotRequest deleteNasVolumeSnapshotRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNasVolumeSnapshot";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteNasVolumeSnapshotRequest, true, false);
		return apiClient.call(apiRequest, DeleteNasVolumeSnapshotResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNasVolumeSnapshotRequest deleteNasVolumeSnapshotRequest (required)
	 * @return byte[]
	 *	DeleteNasVolumeSnapshotResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNasVolumeSnapshotPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNasVolumeSnapshot";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteNetworkInterfaceRequest deleteNetworkInterfaceRequest (required)
	 * @return DeleteNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNetworkInterfaceResponse> deleteNetworkInterfaceGet(DeleteNetworkInterfaceRequest deleteNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deleteNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, DeleteNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNetworkInterfaceRequest deleteNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	DeleteNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNetworkInterfaceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deleteNetworkInterfaceRequest deleteNetworkInterfaceRequest (required)
	 * @return DeleteNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeleteNetworkInterfaceResponse> deleteNetworkInterfacePost(DeleteNetworkInterfaceRequest deleteNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deleteNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deleteNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, DeleteNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deleteNetworkInterfaceRequest deleteNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	DeleteNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deleteNetworkInterfacePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deleteNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deletePortForwardingRulesRequest deletePortForwardingRulesRequest (required)
	 * @return DeletePortForwardingRulesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeletePortForwardingRulesResponse> deletePortForwardingRulesGet(DeletePortForwardingRulesRequest deletePortForwardingRulesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deletePortForwardingRules";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deletePortForwardingRulesRequest, true, false);
		return apiClient.call(apiRequest, DeletePortForwardingRulesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deletePortForwardingRulesRequest deletePortForwardingRulesRequest (required)
	 * @return byte[]
	 *	DeletePortForwardingRulesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deletePortForwardingRulesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deletePortForwardingRules";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deletePortForwardingRulesRequest deletePortForwardingRulesRequest (required)
	 * @return DeletePortForwardingRulesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeletePortForwardingRulesResponse> deletePortForwardingRulesPost(DeletePortForwardingRulesRequest deletePortForwardingRulesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deletePortForwardingRules";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deletePortForwardingRulesRequest, true, false);
		return apiClient.call(apiRequest, DeletePortForwardingRulesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deletePortForwardingRulesRequest deletePortForwardingRulesRequest (required)
	 * @return byte[]
	 *	DeletePortForwardingRulesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deletePortForwardingRulesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deletePortForwardingRules";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deletePublicIpInstancesRequest deletePublicIpInstancesRequest (required)
	 * @return DeletePublicIpInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeletePublicIpInstancesResponse> deletePublicIpInstancesGet(DeletePublicIpInstancesRequest deletePublicIpInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deletePublicIpInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, deletePublicIpInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeletePublicIpInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deletePublicIpInstancesRequest deletePublicIpInstancesRequest (required)
	 * @return byte[]
	 *	DeletePublicIpInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deletePublicIpInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deletePublicIpInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param deletePublicIpInstancesRequest deletePublicIpInstancesRequest (required)
	 * @return DeletePublicIpInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DeletePublicIpInstancesResponse> deletePublicIpInstancesPost(DeletePublicIpInstancesRequest deletePublicIpInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/deletePublicIpInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, deletePublicIpInstancesRequest, true, false);
		return apiClient.call(apiRequest, DeletePublicIpInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	deletePublicIpInstancesRequest deletePublicIpInstancesRequest (required)
	 * @return byte[]
	 *	DeletePublicIpInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> deletePublicIpInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/deletePublicIpInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param detachBlockStorageInstancesRequest detachBlockStorageInstancesRequest (required)
	 * @return DetachBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DetachBlockStorageInstancesResponse> detachBlockStorageInstancesGet(DetachBlockStorageInstancesRequest detachBlockStorageInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/detachBlockStorageInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, detachBlockStorageInstancesRequest, true, false);
		return apiClient.call(apiRequest, DetachBlockStorageInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	detachBlockStorageInstancesRequest detachBlockStorageInstancesRequest (required)
	 * @return byte[]
	 *	DetachBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> detachBlockStorageInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/detachBlockStorageInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param detachBlockStorageInstancesRequest detachBlockStorageInstancesRequest (required)
	 * @return DetachBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DetachBlockStorageInstancesResponse> detachBlockStorageInstancesPost(DetachBlockStorageInstancesRequest detachBlockStorageInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/detachBlockStorageInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, detachBlockStorageInstancesRequest, true, false);
		return apiClient.call(apiRequest, DetachBlockStorageInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	detachBlockStorageInstancesRequest detachBlockStorageInstancesRequest (required)
	 * @return byte[]
	 *	DetachBlockStorageInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> detachBlockStorageInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/detachBlockStorageInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param detachNetworkInterfaceRequest detachNetworkInterfaceRequest (required)
	 * @return DetachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DetachNetworkInterfaceResponse> detachNetworkInterfaceGet(DetachNetworkInterfaceRequest detachNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/detachNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, detachNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, DetachNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	detachNetworkInterfaceRequest detachNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	DetachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> detachNetworkInterfaceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/detachNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param detachNetworkInterfaceRequest detachNetworkInterfaceRequest (required)
	 * @return DetachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DetachNetworkInterfaceResponse> detachNetworkInterfacePost(DetachNetworkInterfaceRequest detachNetworkInterfaceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/detachNetworkInterface";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, detachNetworkInterfaceRequest, true, false);
		return apiClient.call(apiRequest, DetachNetworkInterfaceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	detachNetworkInterfaceRequest detachNetworkInterfaceRequest (required)
	 * @return byte[]
	 *	DetachNetworkInterfaceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> detachNetworkInterfacePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/detachNetworkInterface";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param disassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest (required)
	 * @return DisassociatePublicIpFromServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DisassociatePublicIpFromServerInstanceResponse> disassociatePublicIpFromServerInstanceGet(DisassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/disassociatePublicIpFromServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, disassociatePublicIpFromServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, DisassociatePublicIpFromServerInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	disassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest (required)
	 * @return byte[]
	 *	DisassociatePublicIpFromServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> disassociatePublicIpFromServerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/disassociatePublicIpFromServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param disassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest (required)
	 * @return DisassociatePublicIpFromServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<DisassociatePublicIpFromServerInstanceResponse> disassociatePublicIpFromServerInstancePost(DisassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/disassociatePublicIpFromServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, disassociatePublicIpFromServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, DisassociatePublicIpFromServerInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	disassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest (required)
	 * @return byte[]
	 *	DisassociatePublicIpFromServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> disassociatePublicIpFromServerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/disassociatePublicIpFromServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getAccessControlGroupListRequest getAccessControlGroupListRequest (required)
	 * @return GetAccessControlGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAccessControlGroupListResponse> getAccessControlGroupListGet(GetAccessControlGroupListRequest getAccessControlGroupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAccessControlGroupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getAccessControlGroupListRequest, true, false);
		return apiClient.call(apiRequest, GetAccessControlGroupListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAccessControlGroupListRequest getAccessControlGroupListRequest (required)
	 * @return byte[]
	 *	GetAccessControlGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAccessControlGroupListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAccessControlGroupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getAccessControlGroupListRequest getAccessControlGroupListRequest (required)
	 * @return GetAccessControlGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAccessControlGroupListResponse> getAccessControlGroupListPost(GetAccessControlGroupListRequest getAccessControlGroupListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAccessControlGroupList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getAccessControlGroupListRequest, true, false);
		return apiClient.call(apiRequest, GetAccessControlGroupListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAccessControlGroupListRequest getAccessControlGroupListRequest (required)
	 * @return byte[]
	 *	GetAccessControlGroupListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAccessControlGroupListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAccessControlGroupList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getAccessControlGroupServerInstanceListRequest getAccessControlGroupServerInstanceListRequest (required)
	 * @return GetAccessControlGroupServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAccessControlGroupServerInstanceListResponse> getAccessControlGroupServerInstanceListGet(GetAccessControlGroupServerInstanceListRequest getAccessControlGroupServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAccessControlGroupServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getAccessControlGroupServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetAccessControlGroupServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAccessControlGroupServerInstanceListRequest getAccessControlGroupServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetAccessControlGroupServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAccessControlGroupServerInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAccessControlGroupServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getAccessControlGroupServerInstanceListRequest getAccessControlGroupServerInstanceListRequest (required)
	 * @return GetAccessControlGroupServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAccessControlGroupServerInstanceListResponse> getAccessControlGroupServerInstanceListPost(GetAccessControlGroupServerInstanceListRequest getAccessControlGroupServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAccessControlGroupServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getAccessControlGroupServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetAccessControlGroupServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAccessControlGroupServerInstanceListRequest getAccessControlGroupServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetAccessControlGroupServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAccessControlGroupServerInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAccessControlGroupServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getAccessControlRuleListRequest getAccessControlRuleListRequest (required)
	 * @return GetAccessControlRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAccessControlRuleListResponse> getAccessControlRuleListGet(GetAccessControlRuleListRequest getAccessControlRuleListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAccessControlRuleList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getAccessControlRuleListRequest, true, false);
		return apiClient.call(apiRequest, GetAccessControlRuleListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAccessControlRuleListRequest getAccessControlRuleListRequest (required)
	 * @return byte[]
	 *	GetAccessControlRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAccessControlRuleListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAccessControlRuleList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getAccessControlRuleListRequest getAccessControlRuleListRequest (required)
	 * @return GetAccessControlRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetAccessControlRuleListResponse> getAccessControlRuleListPost(GetAccessControlRuleListRequest getAccessControlRuleListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getAccessControlRuleList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getAccessControlRuleListRequest, true, false);
		return apiClient.call(apiRequest, GetAccessControlRuleListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getAccessControlRuleListRequest getAccessControlRuleListRequest (required)
	 * @return byte[]
	 *	GetAccessControlRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getAccessControlRuleListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getAccessControlRuleList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getBlockStorageInstanceListRequest getBlockStorageInstanceListRequest (required)
	 * @return GetBlockStorageInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageInstanceListResponse> getBlockStorageInstanceListGet(GetBlockStorageInstanceListRequest getBlockStorageInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getBlockStorageInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageInstanceListRequest getBlockStorageInstanceListRequest (required)
	 * @return byte[]
	 *	GetBlockStorageInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getBlockStorageInstanceListRequest getBlockStorageInstanceListRequest (required)
	 * @return GetBlockStorageInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageInstanceListResponse> getBlockStorageInstanceListPost(GetBlockStorageInstanceListRequest getBlockStorageInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getBlockStorageInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageInstanceListRequest getBlockStorageInstanceListRequest (required)
	 * @return byte[]
	 *	GetBlockStorageInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest (required)
	 * @return GetBlockStorageSnapshotInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageSnapshotInstanceListResponse> getBlockStorageSnapshotInstanceListGet(GetBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageSnapshotInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getBlockStorageSnapshotInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageSnapshotInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest (required)
	 * @return byte[]
	 *	GetBlockStorageSnapshotInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageSnapshotInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageSnapshotInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest (required)
	 * @return GetBlockStorageSnapshotInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetBlockStorageSnapshotInstanceListResponse> getBlockStorageSnapshotInstanceListPost(GetBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getBlockStorageSnapshotInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getBlockStorageSnapshotInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetBlockStorageSnapshotInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest (required)
	 * @return byte[]
	 *	GetBlockStorageSnapshotInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getBlockStorageSnapshotInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getBlockStorageSnapshotInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getInitScriptListRqeust getInitScriptListRqeust (required)
	 * @return GetInitScriptListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetInitScriptListResponse> getInitScriptListGet(GetInitScriptListRequest getInitScriptListRqeust) throws ApiException, SdkException {
		
		// path
		String path = "/getInitScriptList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getInitScriptListRqeust, true, false);
		return apiClient.call(apiRequest, GetInitScriptListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getInitScriptListRqeust getInitScriptListRqeust (required)
	 * @return byte[]
	 *	GetInitScriptListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getInitScriptListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getInitScriptList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getInitScriptListRqeust getInitScriptListRqeust (required)
	 * @return GetInitScriptListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetInitScriptListResponse> getInitScriptListPost(GetInitScriptListRequest getInitScriptListRqeust) throws ApiException, SdkException {
		
		// path
		String path = "/getInitScriptList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getInitScriptListRqeust, true, false);
		return apiClient.call(apiRequest, GetInitScriptListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getInitScriptListRqeust getInitScriptListRqeust (required)
	 * @return byte[]
	 *	GetInitScriptListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getInitScriptListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getInitScriptList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getInstanceTagListRequest getInstanceTagListRequest (required)
	 * @return GetInstanceTagListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetInstanceTagListResponse> getInstanceTagListGet(GetInstanceTagListRequest getInstanceTagListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getInstanceTagList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getInstanceTagListRequest, true, false);
		return apiClient.call(apiRequest, GetInstanceTagListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getInstanceTagListRequest getInstanceTagListRequest (required)
	 * @return byte[]
	 *	GetInstanceTagListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getInstanceTagListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getInstanceTagList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getInstanceTagListRequest getInstanceTagListRequest (required)
	 * @return GetInstanceTagListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetInstanceTagListResponse> getInstanceTagListPost(GetInstanceTagListRequest getInstanceTagListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getInstanceTagList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getInstanceTagListRequest, true, false);
		return apiClient.call(apiRequest, GetInstanceTagListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getInstanceTagListRequest getInstanceTagListRequest (required)
	 * @return byte[]
	 *	GetInstanceTagListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getInstanceTagListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getInstanceTagList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getLoginKeyListRequest getLoginKeyListRequest (required)
	 * @return GetLoginKeyListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoginKeyListResponse> getLoginKeyListGet(GetLoginKeyListRequest getLoginKeyListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoginKeyList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getLoginKeyListRequest, true, false);
		return apiClient.call(apiRequest, GetLoginKeyListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoginKeyListRequest getLoginKeyListRequest (required)
	 * @return byte[]
	 *	GetLoginKeyListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoginKeyListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoginKeyList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getLoginKeyListRequest getLoginKeyListRequest (required)
	 * @return GetLoginKeyListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetLoginKeyListResponse> getLoginKeyListPost(GetLoginKeyListRequest getLoginKeyListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getLoginKeyList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getLoginKeyListRequest, true, false);
		return apiClient.call(apiRequest, GetLoginKeyListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getLoginKeyListRequest getLoginKeyListRequest (required)
	 * @return byte[]
	 *	GetLoginKeyListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getLoginKeyListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getLoginKeyList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getMemberServerImageListRequest getMemberServerImageListRequest (required)
	 * @return GetMemberServerImageListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetMemberServerImageListResponse> getMemberServerImageListGet(GetMemberServerImageListRequest getMemberServerImageListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getMemberServerImageList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getMemberServerImageListRequest, true, false);
		return apiClient.call(apiRequest, GetMemberServerImageListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getMemberServerImageListRequest getMemberServerImageListRequest (required)
	 * @return byte[]
	 *	GetMemberServerImageListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getMemberServerImageListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getMemberServerImageList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getMemberServerImageListRequest getMemberServerImageListRequest (required)
	 * @return GetMemberServerImageListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetMemberServerImageListResponse> getMemberServerImageListPost(GetMemberServerImageListRequest getMemberServerImageListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getMemberServerImageList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getMemberServerImageListRequest, true, false);
		return apiClient.call(apiRequest, GetMemberServerImageListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getMemberServerImageListRequest getMemberServerImageListRequest (required)
	 * @return byte[]
	 *	GetMemberServerImageListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getMemberServerImageListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getMemberServerImageList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getNasVolumeAccessControlRuleListRequest getNasVolumeAccessControlRuleListRequest (required)
	 * @return GetNasVolumeAccessControlRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeAccessControlRuleListResponse> getNasVolumeAccessControlRuleListGet(GetNasVolumeAccessControlRuleListRequest getNasVolumeAccessControlRuleListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeAccessControlRuleList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNasVolumeAccessControlRuleListRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeAccessControlRuleListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeAccessControlRuleListRequest getNasVolumeAccessControlRuleListRequest (required)
	 * @return byte[]
	 *	GetNasVolumeAccessControlRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeAccessControlRuleListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeAccessControlRuleList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getNasVolumeAccessControlRuleListRequest getNasVolumeAccessControlRuleListRequest (required)
	 * @return GetNasVolumeAccessControlRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeAccessControlRuleListResponse> getNasVolumeAccessControlRuleListPost(GetNasVolumeAccessControlRuleListRequest getNasVolumeAccessControlRuleListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeAccessControlRuleList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNasVolumeAccessControlRuleListRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeAccessControlRuleListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeAccessControlRuleListRequest getNasVolumeAccessControlRuleListRequest (required)
	 * @return byte[]
	 *	GetNasVolumeAccessControlRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeAccessControlRuleListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeAccessControlRuleList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getNasVolumeInstanceListRequest getNasVolumeInstanceListRequest (required)
	 * @return GetNasVolumeInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeInstanceListResponse> getNasVolumeInstanceListGet(GetNasVolumeInstanceListRequest getNasVolumeInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNasVolumeInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeInstanceListRequest getNasVolumeInstanceListRequest (required)
	 * @return byte[]
	 *	GetNasVolumeInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getNasVolumeInstanceListRequest getNasVolumeInstanceListRequest (required)
	 * @return GetNasVolumeInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeInstanceListResponse> getNasVolumeInstanceListPost(GetNasVolumeInstanceListRequest getNasVolumeInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNasVolumeInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeInstanceListRequest getNasVolumeInstanceListRequest (required)
	 * @return byte[]
	 *	GetNasVolumeInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getNasVolumeInstanceRatingListRequest getNasVolumeInstanceRatingListRequest (required)
	 * @return GetNasVolumeInstanceRatingListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeInstanceRatingListResponse> getNasVolumeInstanceRatingListGet(GetNasVolumeInstanceRatingListRequest getNasVolumeInstanceRatingListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeInstanceRatingList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNasVolumeInstanceRatingListRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeInstanceRatingListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeInstanceRatingListRequest getNasVolumeInstanceRatingListRequest (required)
	 * @return byte[]
	 *	GetNasVolumeInstanceRatingListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeInstanceRatingListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeInstanceRatingList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getNasVolumeInstanceRatingListRequest getNasVolumeInstanceRatingListRequest (required)
	 * @return GetNasVolumeInstanceRatingListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeInstanceRatingListResponse> getNasVolumeInstanceRatingListPost(GetNasVolumeInstanceRatingListRequest getNasVolumeInstanceRatingListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeInstanceRatingList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNasVolumeInstanceRatingListRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeInstanceRatingListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeInstanceRatingListRequest getNasVolumeInstanceRatingListRequest (required)
	 * @return byte[]
	 *	GetNasVolumeInstanceRatingListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeInstanceRatingListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeInstanceRatingList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getNasVolumeSnapshotConfigurationHistoryListRequest getNasVolumeSnapshotConfigurationHistoryListRequest (required)
	 * @return GetNasVolumeSnapshotConfigurationHistoryListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeSnapshotConfigurationHistoryListResponse> getNasVolumeSnapshotConfigurationHistoryListGet(GetNasVolumeSnapshotConfigurationHistoryListRequest getNasVolumeSnapshotConfigurationHistoryListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeSnapshotConfigurationHistoryList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNasVolumeSnapshotConfigurationHistoryListRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeSnapshotConfigurationHistoryListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeSnapshotConfigurationHistoryListRequest getNasVolumeSnapshotConfigurationHistoryListRequest (required)
	 * @return byte[]
	 *	GetNasVolumeSnapshotConfigurationHistoryListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeSnapshotConfigurationHistoryListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeSnapshotConfigurationHistoryList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getNasVolumeSnapshotConfigurationHistoryListRequest getNasVolumeSnapshotConfigurationHistoryListRequest (required)
	 * @return GetNasVolumeSnapshotConfigurationHistoryListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeSnapshotConfigurationHistoryListResponse> getNasVolumeSnapshotConfigurationHistoryListPost(GetNasVolumeSnapshotConfigurationHistoryListRequest getNasVolumeSnapshotConfigurationHistoryListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeSnapshotConfigurationHistoryList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNasVolumeSnapshotConfigurationHistoryListRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeSnapshotConfigurationHistoryListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeSnapshotConfigurationHistoryListRequest getNasVolumeSnapshotConfigurationHistoryListRequest (required)
	 * @return byte[]
	 *	GetNasVolumeSnapshotConfigurationHistoryListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeSnapshotConfigurationHistoryListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeSnapshotConfigurationHistoryList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getNasVolumeSnapshotListRequest getNasVolumeSnapshotListRequest (required)
	 * @return GetNasVolumeSnapshotListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeSnapshotListResponse> getNasVolumeSnapshotListGet(GetNasVolumeSnapshotListRequest getNasVolumeSnapshotListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeSnapshotList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNasVolumeSnapshotListRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeSnapshotListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeSnapshotListRequest getNasVolumeSnapshotListRequest (required)
	 * @return byte[]
	 *	GetNasVolumeSnapshotListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeSnapshotListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeSnapshotList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getNasVolumeSnapshotListRequest getNasVolumeSnapshotListRequest (required)
	 * @return GetNasVolumeSnapshotListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNasVolumeSnapshotListResponse> getNasVolumeSnapshotListPost(GetNasVolumeSnapshotListRequest getNasVolumeSnapshotListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNasVolumeSnapshotList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNasVolumeSnapshotListRequest, true, false);
		return apiClient.call(apiRequest, GetNasVolumeSnapshotListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNasVolumeSnapshotListRequest getNasVolumeSnapshotListRequest (required)
	 * @return byte[]
	 *	GetNasVolumeSnapshotListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNasVolumeSnapshotListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNasVolumeSnapshotList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getNetworkInterfaceListRequest getNetworkInterfaceListRequest (required)
	 * @return GetNetworkInterfaceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNetworkInterfaceListResponse> getNetworkInterfaceListGet(GetNetworkInterfaceListRequest getNetworkInterfaceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNetworkInterfaceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getNetworkInterfaceListRequest, true, false);
		return apiClient.call(apiRequest, GetNetworkInterfaceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNetworkInterfaceListRequest getNetworkInterfaceListRequest (required)
	 * @return byte[]
	 *	GetNetworkInterfaceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNetworkInterfaceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNetworkInterfaceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getNetworkInterfaceListRequest getNetworkInterfaceListRequest (required)
	 * @return GetNetworkInterfaceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetNetworkInterfaceListResponse> getNetworkInterfaceListPost(GetNetworkInterfaceListRequest getNetworkInterfaceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getNetworkInterfaceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getNetworkInterfaceListRequest, true, false);
		return apiClient.call(apiRequest, GetNetworkInterfaceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getNetworkInterfaceListRequest getNetworkInterfaceListRequest (required)
	 * @return byte[]
	 *	GetNetworkInterfaceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getNetworkInterfaceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getNetworkInterfaceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getPortForwardingConfigurationListRequest getPortForwardingConfigurationListRequest (required)
	 * @return GetPortForwardingConfigurationListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPortForwardingConfigurationListResponse> getPortForwardingConfigurationListGet(GetPortForwardingConfigurationListRequest getPortForwardingConfigurationListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPortForwardingConfigurationList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getPortForwardingConfigurationListRequest, true, false);
		return apiClient.call(apiRequest, GetPortForwardingConfigurationListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPortForwardingConfigurationListRequest getPortForwardingConfigurationListRequest (required)
	 * @return byte[]
	 *	GetPortForwardingConfigurationListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPortForwardingConfigurationListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPortForwardingConfigurationList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getPortForwardingConfigurationListRequest getPortForwardingConfigurationListRequest (required)
	 * @return GetPortForwardingConfigurationListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPortForwardingConfigurationListResponse> getPortForwardingConfigurationListPost(GetPortForwardingConfigurationListRequest getPortForwardingConfigurationListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPortForwardingConfigurationList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getPortForwardingConfigurationListRequest, true, false);
		return apiClient.call(apiRequest, GetPortForwardingConfigurationListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPortForwardingConfigurationListRequest getPortForwardingConfigurationListRequest (required)
	 * @return byte[]
	 *	GetPortForwardingConfigurationListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPortForwardingConfigurationListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPortForwardingConfigurationList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getPortForwardingRuleListRequest getPortForwardingRuleListRequest (required)
	 * @return GetPortForwardingRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPortForwardingRuleListResponse> getPortForwardingRuleListGet(GetPortForwardingRuleListRequest getPortForwardingRuleListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPortForwardingRuleList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getPortForwardingRuleListRequest, true, false);
		return apiClient.call(apiRequest, GetPortForwardingRuleListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPortForwardingRuleListRequest getPortForwardingRuleListRequest (required)
	 * @return byte[]
	 *	GetPortForwardingRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPortForwardingRuleListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPortForwardingRuleList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getPortForwardingRuleListRequest getPortForwardingRuleListRequest (required)
	 * @return GetPortForwardingRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPortForwardingRuleListResponse> getPortForwardingRuleListPost(GetPortForwardingRuleListRequest getPortForwardingRuleListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPortForwardingRuleList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getPortForwardingRuleListRequest, true, false);
		return apiClient.call(apiRequest, GetPortForwardingRuleListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPortForwardingRuleListRequest getPortForwardingRuleListRequest (required)
	 * @return byte[]
	 *	GetPortForwardingRuleListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPortForwardingRuleListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPortForwardingRuleList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getPrivateSubnetInstanceListRequest getPrivateSubnetInstanceListRequest (required)
	 * @return GetPrivateSubnetInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPrivateSubnetInstanceListResponse> getPrivateSubnetInstanceListGet(GetPrivateSubnetInstanceListRequest getPrivateSubnetInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPrivateSubnetInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getPrivateSubnetInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetPrivateSubnetInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPrivateSubnetInstanceListRequest getPrivateSubnetInstanceListRequest (required)
	 * @return byte[]
	 *	GetPrivateSubnetInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPrivateSubnetInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPrivateSubnetInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getPrivateSubnetInstanceListRequest getPrivateSubnetInstanceListRequest (required)
	 * @return GetPrivateSubnetInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPrivateSubnetInstanceListResponse> getPrivateSubnetInstanceListPost(GetPrivateSubnetInstanceListRequest getPrivateSubnetInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPrivateSubnetInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getPrivateSubnetInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetPrivateSubnetInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPrivateSubnetInstanceListRequest getPrivateSubnetInstanceListRequest (required)
	 * @return byte[]
	 *	GetPrivateSubnetInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPrivateSubnetInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPrivateSubnetInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getPublicIpInstanceListRequest getPublicIpInstanceListRequest (required)
	 * @return GetPublicIpInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPublicIpInstanceListResponse> getPublicIpInstanceListGet(GetPublicIpInstanceListRequest getPublicIpInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPublicIpInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getPublicIpInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetPublicIpInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPublicIpInstanceListRequest getPublicIpInstanceListRequest (required)
	 * @return byte[]
	 *	GetPublicIpInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPublicIpInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPublicIpInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getPublicIpInstanceListRequest getPublicIpInstanceListRequest (required)
	 * @return GetPublicIpInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPublicIpInstanceListResponse> getPublicIpInstanceListPost(GetPublicIpInstanceListRequest getPublicIpInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPublicIpInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getPublicIpInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetPublicIpInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPublicIpInstanceListRequest getPublicIpInstanceListRequest (required)
	 * @return byte[]
	 *	GetPublicIpInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPublicIpInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPublicIpInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest (required)
	 * @return GetPublicIpTargetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPublicIpTargetServerInstanceListResponse> getPublicIpTargetServerInstanceListGet(GetPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPublicIpTargetServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getPublicIpTargetServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetPublicIpTargetServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetPublicIpTargetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPublicIpTargetServerInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPublicIpTargetServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest (required)
	 * @return GetPublicIpTargetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetPublicIpTargetServerInstanceListResponse> getPublicIpTargetServerInstanceListPost(GetPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getPublicIpTargetServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getPublicIpTargetServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetPublicIpTargetServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetPublicIpTargetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getPublicIpTargetServerInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getPublicIpTargetServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getRaidListRequest getRaidListRequest (required)
	 * @return GetRaidListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRaidListResponse> getRaidListGet(GetRaidListRequest getRaidListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRaidList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getRaidListRequest, true, false);
		return apiClient.call(apiRequest, GetRaidListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRaidListRequest getRaidListRequest (required)
	 * @return byte[]
	 *	GetRaidListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRaidListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRaidList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getRaidListRequest getRaidListRequest (required)
	 * @return GetRaidListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRaidListResponse> getRaidListPost(GetRaidListRequest getRaidListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRaidList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getRaidListRequest, true, false);
		return apiClient.call(apiRequest, GetRaidListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRaidListRequest getRaidListRequest (required)
	 * @return byte[]
	 *	GetRaidListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRaidListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRaidList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getRegionListRequest getRegionListRequest (required)
	 * @return GetRegionListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRegionListResponse> getRegionListGet(GetRegionListRequest getRegionListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRegionList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getRegionListRequest, true, false);
		return apiClient.call(apiRequest, GetRegionListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRegionListRequest getRegionListRequest (required)
	 * @return byte[]
	 *	GetRegionListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRegionListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRegionList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getRegionListRequest getRegionListRequest (required)
	 * @return GetRegionListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRegionListResponse> getRegionListPost(GetRegionListRequest getRegionListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRegionList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getRegionListRequest, true, false);
		return apiClient.call(apiRequest, GetRegionListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRegionListRequest getRegionListRequest (required)
	 * @return byte[]
	 *	GetRegionListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRegionListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRegionList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getRootPasswordRequest getRootPasswordRequest (required)
	 * @return GetRootPasswordResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRootPasswordResponse> getRootPasswordGet(GetRootPasswordRequest getRootPasswordRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRootPassword";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getRootPasswordRequest, true, false);
		return apiClient.call(apiRequest, GetRootPasswordResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRootPasswordRequest getRootPasswordRequest (required)
	 * @return byte[]
	 *	GetRootPasswordResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRootPasswordGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRootPassword";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getRootPasswordRequest getRootPasswordRequest (required)
	 * @return GetRootPasswordResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRootPasswordResponse> getRootPasswordPost(GetRootPasswordRequest getRootPasswordRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRootPassword";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getRootPasswordRequest, true, false);
		return apiClient.call(apiRequest, GetRootPasswordResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRootPasswordRequest getRootPasswordRequest (required)
	 * @return byte[]
	 *	GetRootPasswordResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRootPasswordPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRootPassword";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest (required)
	 * @return GetRootPasswordServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRootPasswordServerInstanceListResponse> getRootPasswordServerInstanceListGet(GetRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRootPasswordServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getRootPasswordServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetRootPasswordServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetRootPasswordServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRootPasswordServerInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRootPasswordServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest (required)
	 * @return GetRootPasswordServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetRootPasswordServerInstanceListResponse> getRootPasswordServerInstanceListPost(GetRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getRootPasswordServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getRootPasswordServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetRootPasswordServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetRootPasswordServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getRootPasswordServerInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getRootPasswordServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getServerImageProductListRequest getServerImageProductListRequest (required)
	 * @return GetServerImageProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerImageProductListResponse> getServerImageProductListGet(GetServerImageProductListRequest getServerImageProductListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerImageProductList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getServerImageProductListRequest, true, false);
		return apiClient.call(apiRequest, GetServerImageProductListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerImageProductListRequest getServerImageProductListRequest (required)
	 * @return byte[]
	 *	GetServerImageProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerImageProductListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerImageProductList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getServerImageProductListRequest getServerImageProductListRequest (required)
	 * @return GetServerImageProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerImageProductListResponse> getServerImageProductListPost(GetServerImageProductListRequest getServerImageProductListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerImageProductList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getServerImageProductListRequest, true, false);
		return apiClient.call(apiRequest, GetServerImageProductListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerImageProductListRequest getServerImageProductListRequest (required)
	 * @return byte[]
	 *	GetServerImageProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerImageProductListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerImageProductList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getServerInstanceListRequest getServerInstanceListRequest (required)
	 * @return GetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerInstanceListResponse> getServerInstanceListGet(GetServerInstanceListRequest getServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerInstanceListRequest getServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerInstanceListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getServerInstanceListRequest getServerInstanceListRequest (required)
	 * @return GetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerInstanceListResponse> getServerInstanceListPost(GetServerInstanceListRequest getServerInstanceListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerInstanceList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getServerInstanceListRequest, true, false);
		return apiClient.call(apiRequest, GetServerInstanceListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerInstanceListRequest getServerInstanceListRequest (required)
	 * @return byte[]
	 *	GetServerInstanceListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerInstanceListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerInstanceList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getServerProductListRequest getServerProductListRequest (required)
	 * @return GetServerProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerProductListResponse> getServerProductListGet(GetServerProductListRequest getServerProductListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerProductList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getServerProductListRequest, true, false);
		return apiClient.call(apiRequest, GetServerProductListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerProductListRequest getServerProductListRequest (required)
	 * @return byte[]
	 *	GetServerProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerProductListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerProductList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getServerProductListRequest getServerProductListRequest (required)
	 * @return GetServerProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetServerProductListResponse> getServerProductListPost(GetServerProductListRequest getServerProductListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getServerProductList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getServerProductListRequest, true, false);
		return apiClient.call(apiRequest, GetServerProductListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getServerProductListRequest getServerProductListRequest (required)
	 * @return byte[]
	 *	GetServerProductListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getServerProductListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getServerProductList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getZoneListRequest getZoneListRequest (required)
	 * @return GetZoneListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetZoneListResponse> getZoneListGet(GetZoneListRequest getZoneListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getZoneList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, getZoneListRequest, true, false);
		return apiClient.call(apiRequest, GetZoneListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getZoneListRequest getZoneListRequest (required)
	 * @return byte[]
	 *	GetZoneListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getZoneListGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getZoneList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param getZoneListRequest getZoneListRequest (required)
	 * @return GetZoneListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<GetZoneListResponse> getZoneListPost(GetZoneListRequest getZoneListRequest) throws ApiException, SdkException {
		
		// path
		String path = "/getZoneList";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, getZoneListRequest, true, false);
		return apiClient.call(apiRequest, GetZoneListResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	getZoneListRequest getZoneListRequest (required)
	 * @return byte[]
	 *	GetZoneListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> getZoneListPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/getZoneList";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param importLoginKeyRequest importLoginKeyRequest (required)
	 * @return ImportLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ImportLoginKeyResponse> importLoginKeyGet(ImportLoginKeyRequest importLoginKeyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/importLoginKey";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, importLoginKeyRequest, true, false);
		return apiClient.call(apiRequest, ImportLoginKeyResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	importLoginKeyRequest importLoginKeyRequest (required)
	 * @return byte[]
	 *	ImportLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> importLoginKeyGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/importLoginKey";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param importLoginKeyRequest importLoginKeyRequest (required)
	 * @return ImportLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ImportLoginKeyResponse> importLoginKeyPost(ImportLoginKeyRequest importLoginKeyRequest) throws ApiException, SdkException {
		
		// path
		String path = "/importLoginKey";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, importLoginKeyRequest, true, false);
		return apiClient.call(apiRequest, ImportLoginKeyResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	importLoginKeyRequest importLoginKeyRequest (required)
	 * @return byte[]
	 *	ImportLoginKeyResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> importLoginKeyPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/importLoginKey";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param interruptServerInstanceRequest  (required)
	 * @return InterruptServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<InterruptServerInstanceResponse> interruptServerInstanceGet(InterruptServerInstanceRequest interruptServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/interruptServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, interruptServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, InterruptServerInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	interruptServerInstanceRequest  (required)
	 * @return byte[]
	 *	InterruptServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> interruptServerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/interruptServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param interruptServerInstanceRequest  (required)
	 * @return InterruptServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<InterruptServerInstanceResponse> interruptServerInstancePost(InterruptServerInstanceRequest interruptServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/interruptServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, interruptServerInstanceRequest, false, false);
		return apiClient.call(apiRequest, InterruptServerInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	interruptServerInstanceRequest  (required)
	 * @return byte[]
	 *	InterruptServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> interruptServerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/interruptServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param rebootServerInstancesRequest rebootServerInstancesRequest (required)
	 * @return RebootServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RebootServerInstancesResponse> rebootServerInstancesGet(RebootServerInstancesRequest rebootServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/rebootServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, rebootServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, RebootServerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	rebootServerInstancesRequest rebootServerInstancesRequest (required)
	 * @return byte[]
	 *	RebootServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> rebootServerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/rebootServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param rebootServerInstancesRequest rebootServerInstancesRequest (required)
	 * @return RebootServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RebootServerInstancesResponse> rebootServerInstancesPost(RebootServerInstancesRequest rebootServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/rebootServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, rebootServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, RebootServerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	rebootServerInstancesRequest rebootServerInstancesRequest (required)
	 * @return byte[]
	 *	RebootServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> rebootServerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/rebootServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param recreateServerInstanceRequest recreateServerInstanceRequest (required)
	 * @return RecreateServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RecreateServerInstanceResponse> recreateServerInstanceGet(RecreateServerInstanceRequest recreateServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/recreateServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, recreateServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, RecreateServerInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	recreateServerInstanceRequest recreateServerInstanceRequest (required)
	 * @return byte[]
	 *	RecreateServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> recreateServerInstanceGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/recreateServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param recreateServerInstanceRequest recreateServerInstanceRequest (required)
	 * @return RecreateServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RecreateServerInstanceResponse> recreateServerInstancePost(RecreateServerInstanceRequest recreateServerInstanceRequest) throws ApiException, SdkException {
		
		// path
		String path = "/recreateServerInstance";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, recreateServerInstanceRequest, true, false);
		return apiClient.call(apiRequest, RecreateServerInstanceResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	recreateServerInstanceRequest recreateServerInstanceRequest (required)
	 * @return byte[]
	 *	RecreateServerInstanceResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> recreateServerInstancePost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/recreateServerInstance";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param removeMemberServerImageSharingPermissionRequest removeMemberServerImageSharingPermissionRequest (required)
	 * @return RemoveMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveMemberServerImageSharingPermissionResponse> removeMemberServerImageSharingPermissionGet(RemoveMemberServerImageSharingPermissionRequest removeMemberServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeMemberServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removeMemberServerImageSharingPermissionRequest, true, false);
		return apiClient.call(apiRequest, RemoveMemberServerImageSharingPermissionResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeMemberServerImageSharingPermissionRequest removeMemberServerImageSharingPermissionRequest (required)
	 * @return byte[]
	 *	RemoveMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeMemberServerImageSharingPermissionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeMemberServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param removeMemberServerImageSharingPermissionRequest removeMemberServerImageSharingPermissionRequest (required)
	 * @return RemoveMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveMemberServerImageSharingPermissionResponse> removeMemberServerImageSharingPermissionPost(RemoveMemberServerImageSharingPermissionRequest removeMemberServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeMemberServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removeMemberServerImageSharingPermissionRequest, true, false);
		return apiClient.call(apiRequest, RemoveMemberServerImageSharingPermissionResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeMemberServerImageSharingPermissionRequest removeMemberServerImageSharingPermissionRequest (required)
	 * @return byte[]
	 *	RemoveMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeMemberServerImageSharingPermissionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeMemberServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param removeNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest (required)
	 * @return RemoveNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveNasVolumeAccessControlResponse> removeNasVolumeAccessControlGet(RemoveNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeNasVolumeAccessControl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, removeNasVolumeAccessControlRequest, true, false);
		return apiClient.call(apiRequest, RemoveNasVolumeAccessControlResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest (required)
	 * @return byte[]
	 *	RemoveNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeNasVolumeAccessControlGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeNasVolumeAccessControl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param removeNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest (required)
	 * @return RemoveNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RemoveNasVolumeAccessControlResponse> removeNasVolumeAccessControlPost(RemoveNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest) throws ApiException, SdkException {
		
		// path
		String path = "/removeNasVolumeAccessControl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, removeNasVolumeAccessControlRequest, true, false);
		return apiClient.call(apiRequest, RemoveNasVolumeAccessControlResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	removeNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest (required)
	 * @return byte[]
	 *	RemoveNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> removeNasVolumeAccessControlPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/removeNasVolumeAccessControl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param replaceServerInstanceAssociatedWithPublicIpRequest replaceServerInstanceAssociatedWithPublicIpRequest (required)
	 * @return ReplaceServerInstanceAssociatedWithPublicIpResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ReplaceServerInstanceAssociatedWithPublicIpResponse> replaceServerInstanceAssociatedWithPublicIpGet(ReplaceServerInstanceAssociatedWithPublicIpRequest replaceServerInstanceAssociatedWithPublicIpRequest) throws ApiException, SdkException {
		
		// path
		String path = "/replaceServerInstanceAssociatedWithPublicIp";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, replaceServerInstanceAssociatedWithPublicIpRequest, true, false);
		return apiClient.call(apiRequest, ReplaceServerInstanceAssociatedWithPublicIpResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	replaceServerInstanceAssociatedWithPublicIpRequest replaceServerInstanceAssociatedWithPublicIpRequest (required)
	 * @return byte[]
	 *	ReplaceServerInstanceAssociatedWithPublicIpResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> replaceServerInstanceAssociatedWithPublicIpGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/replaceServerInstanceAssociatedWithPublicIp";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param replaceServerInstanceAssociatedWithPublicIpRequest replaceServerInstanceAssociatedWithPublicIpRequest (required)
	 * @return ReplaceServerInstanceAssociatedWithPublicIpResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<ReplaceServerInstanceAssociatedWithPublicIpResponse> replaceServerInstanceAssociatedWithPublicIpPost(ReplaceServerInstanceAssociatedWithPublicIpRequest replaceServerInstanceAssociatedWithPublicIpRequest) throws ApiException, SdkException {
		
		// path
		String path = "/replaceServerInstanceAssociatedWithPublicIp";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, replaceServerInstanceAssociatedWithPublicIpRequest, true, false);
		return apiClient.call(apiRequest, ReplaceServerInstanceAssociatedWithPublicIpResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	replaceServerInstanceAssociatedWithPublicIpRequest replaceServerInstanceAssociatedWithPublicIpRequest (required)
	 * @return byte[]
	 *	ReplaceServerInstanceAssociatedWithPublicIpResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> replaceServerInstanceAssociatedWithPublicIpPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/replaceServerInstanceAssociatedWithPublicIp";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param restoreNasVolumeWithSnapshotRequest restoreNasVolumeWithSnapshotRequest (required)
	 * @return RestoreNasVolumeWithSnapshotResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RestoreNasVolumeWithSnapshotResponse> restoreNasVolumeWithSnapshotGet(RestoreNasVolumeWithSnapshotRequest restoreNasVolumeWithSnapshotRequest) throws ApiException, SdkException {
		
		// path
		String path = "/restoreNasVolumeWithSnapshot";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, restoreNasVolumeWithSnapshotRequest, true, false);
		return apiClient.call(apiRequest, RestoreNasVolumeWithSnapshotResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	restoreNasVolumeWithSnapshotRequest restoreNasVolumeWithSnapshotRequest (required)
	 * @return byte[]
	 *	RestoreNasVolumeWithSnapshotResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> restoreNasVolumeWithSnapshotGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/restoreNasVolumeWithSnapshot";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param restoreNasVolumeWithSnapshotRequest restoreNasVolumeWithSnapshotRequest (required)
	 * @return RestoreNasVolumeWithSnapshotResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<RestoreNasVolumeWithSnapshotResponse> restoreNasVolumeWithSnapshotPost(RestoreNasVolumeWithSnapshotRequest restoreNasVolumeWithSnapshotRequest) throws ApiException, SdkException {
		
		// path
		String path = "/restoreNasVolumeWithSnapshot";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, restoreNasVolumeWithSnapshotRequest, true, false);
		return apiClient.call(apiRequest, RestoreNasVolumeWithSnapshotResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	restoreNasVolumeWithSnapshotRequest restoreNasVolumeWithSnapshotRequest (required)
	 * @return byte[]
	 *	RestoreNasVolumeWithSnapshotResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> restoreNasVolumeWithSnapshotPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/restoreNasVolumeWithSnapshot";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param setMemberServerImageSharingPermissionRequest setMemberServerImageSharingPermissionRequest (required)
	 * @return SetMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetMemberServerImageSharingPermissionResponse> setMemberServerImageSharingPermissionGet(SetMemberServerImageSharingPermissionRequest setMemberServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setMemberServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setMemberServerImageSharingPermissionRequest, true, false);
		return apiClient.call(apiRequest, SetMemberServerImageSharingPermissionResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setMemberServerImageSharingPermissionRequest setMemberServerImageSharingPermissionRequest (required)
	 * @return byte[]
	 *	SetMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setMemberServerImageSharingPermissionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setMemberServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param setMemberServerImageSharingPermissionRequest setMemberServerImageSharingPermissionRequest (required)
	 * @return SetMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetMemberServerImageSharingPermissionResponse> setMemberServerImageSharingPermissionPost(SetMemberServerImageSharingPermissionRequest setMemberServerImageSharingPermissionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setMemberServerImageSharingPermission";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setMemberServerImageSharingPermissionRequest, true, false);
		return apiClient.call(apiRequest, SetMemberServerImageSharingPermissionResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setMemberServerImageSharingPermissionRequest setMemberServerImageSharingPermissionRequest (required)
	 * @return byte[]
	 *	SetMemberServerImageSharingPermissionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setMemberServerImageSharingPermissionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setMemberServerImageSharingPermission";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param setNasVolumeAccessControlRequest setNasVolumeAccessControlRequest (required)
	 * @return SetNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetNasVolumeAccessControlResponse> setNasVolumeAccessControlGet(SetNasVolumeAccessControlRequest setNasVolumeAccessControlRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setNasVolumeAccessControl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setNasVolumeAccessControlRequest, true, false);
		return apiClient.call(apiRequest, SetNasVolumeAccessControlResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setNasVolumeAccessControlRequest setNasVolumeAccessControlRequest (required)
	 * @return byte[]
	 *	SetNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setNasVolumeAccessControlGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setNasVolumeAccessControl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param setNasVolumeAccessControlRequest setNasVolumeAccessControlRequest (required)
	 * @return SetNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetNasVolumeAccessControlResponse> setNasVolumeAccessControlPost(SetNasVolumeAccessControlRequest setNasVolumeAccessControlRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setNasVolumeAccessControl";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setNasVolumeAccessControlRequest, true, false);
		return apiClient.call(apiRequest, SetNasVolumeAccessControlResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setNasVolumeAccessControlRequest setNasVolumeAccessControlRequest (required)
	 * @return byte[]
	 *	SetNasVolumeAccessControlResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setNasVolumeAccessControlPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setNasVolumeAccessControl";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param setNasVolumeReturnProtectionRequest setNasVolumeReturnProtectionRequest (required)
	 * @return SetNasVolumeReturnProtectionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetNasVolumeReturnProtectionResponse> setNasVolumeReturnProtectionGet(SetNasVolumeReturnProtectionRequest setNasVolumeReturnProtectionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setNasVolumeReturnProtection";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setNasVolumeReturnProtectionRequest, true, false);
		return apiClient.call(apiRequest, SetNasVolumeReturnProtectionResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setNasVolumeReturnProtectionRequest setNasVolumeReturnProtectionRequest (required)
	 * @return byte[]
	 *	SetNasVolumeReturnProtectionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setNasVolumeReturnProtectionGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setNasVolumeReturnProtection";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param setNasVolumeReturnProtectionRequest setNasVolumeReturnProtectionRequest (required)
	 * @return SetNasVolumeReturnProtectionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetNasVolumeReturnProtectionResponse> setNasVolumeReturnProtectionPost(SetNasVolumeReturnProtectionRequest setNasVolumeReturnProtectionRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setNasVolumeReturnProtection";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setNasVolumeReturnProtectionRequest, true, false);
		return apiClient.call(apiRequest, SetNasVolumeReturnProtectionResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setNasVolumeReturnProtectionRequest setNasVolumeReturnProtectionRequest (required)
	 * @return byte[]
	 *	SetNasVolumeReturnProtectionResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setNasVolumeReturnProtectionPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setNasVolumeReturnProtection";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param setProtectServerTerminationRequest setProtectServerTerminationRequest (required)
	 * @return SetProtectServerTerminationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetProtectServerTerminationResponse> setProtectServerTerminationGet(SetProtectServerTerminationRequest setProtectServerTerminationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setProtectServerTermination";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, setProtectServerTerminationRequest, true, false);
		return apiClient.call(apiRequest, SetProtectServerTerminationResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setProtectServerTerminationRequest setProtectServerTerminationRequest (required)
	 * @return byte[]
	 *	SetProtectServerTerminationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setProtectServerTerminationGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setProtectServerTermination";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param setProtectServerTerminationRequest setProtectServerTerminationRequest (required)
	 * @return SetProtectServerTerminationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<SetProtectServerTerminationResponse> setProtectServerTerminationPost(SetProtectServerTerminationRequest setProtectServerTerminationRequest) throws ApiException, SdkException {
		
		// path
		String path = "/setProtectServerTermination";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, setProtectServerTerminationRequest, true, false);
		return apiClient.call(apiRequest, SetProtectServerTerminationResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	setProtectServerTerminationRequest setProtectServerTerminationRequest (required)
	 * @return byte[]
	 *	SetProtectServerTerminationResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> setProtectServerTerminationPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/setProtectServerTermination";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param startServerInstancesRequest startServerInstancesRequest (required)
	 * @return StartServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<StartServerInstancesResponse> startServerInstancesGet(StartServerInstancesRequest startServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/startServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, startServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, StartServerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	startServerInstancesRequest startServerInstancesRequest (required)
	 * @return byte[]
	 *	StartServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> startServerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/startServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param startServerInstancesRequest startServerInstancesRequest (required)
	 * @return StartServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<StartServerInstancesResponse> startServerInstancesPost(StartServerInstancesRequest startServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/startServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, startServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, StartServerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	startServerInstancesRequest startServerInstancesRequest (required)
	 * @return byte[]
	 *	StartServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> startServerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/startServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param stopServerInstancesRequest stopServerInstancesRequest (required)
	 * @return StopServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<StopServerInstancesResponse> stopServerInstancesGet(StopServerInstancesRequest stopServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/stopServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, stopServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, StopServerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	stopServerInstancesRequest stopServerInstancesRequest (required)
	 * @return byte[]
	 *	StopServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> stopServerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/stopServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param stopServerInstancesRequest stopServerInstancesRequest (required)
	 * @return StopServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<StopServerInstancesResponse> stopServerInstancesPost(StopServerInstancesRequest stopServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/stopServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, stopServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, StopServerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	stopServerInstancesRequest stopServerInstancesRequest (required)
	 * @return byte[]
	 *	StopServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> stopServerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/stopServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param terminateServerInstancesRequest terminateServerInstancesRequest (required)
	 * @return TerminateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<TerminateServerInstancesResponse> terminateServerInstancesGet(TerminateServerInstancesRequest terminateServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/terminateServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, terminateServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, TerminateServerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	terminateServerInstancesRequest terminateServerInstancesRequest (required)
	 * @return byte[]
	 *	TerminateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> terminateServerInstancesGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/terminateServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "GET", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 * 
	 * 
	 * @param terminateServerInstancesRequest terminateServerInstancesRequest (required)
	 * @return TerminateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<TerminateServerInstancesResponse> terminateServerInstancesPost(TerminateServerInstancesRequest terminateServerInstancesRequest) throws ApiException, SdkException {
		
		// path
		String path = "/terminateServerInstances";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, terminateServerInstancesRequest, true, false);
		return apiClient.call(apiRequest, TerminateServerInstancesResponse.class);
	}

	/**
	 * 
	 * 
	 * @param httpHeaders
	 * @param queryParams
	 * @param body
	 *	terminateServerInstancesRequest terminateServerInstancesRequest (required)
	 * @return byte[]
	 *	TerminateServerInstancesResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> terminateServerInstancesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		
		// path
		String path = "/terminateServerInstances";

		// accept
		final String[] accepts = {
			
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/x-www-form-urlencoded"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest(this.basePath, "POST", path, queryParams, formParams, httpHeaders, body, true, false);
		return apiClient.call(apiRequest, byte[].class);
	}

}
